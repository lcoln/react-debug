{"version":3,"file":"ReactFabric-prod.js","sources":["../../../packages/shared/invokeGuardedCallbackImpl.js","../../../packages/shared/ReactErrorUtils.js","../../../packages/shared/isArray.js","../../../packages/react-native-renderer/src/legacy-events/EventPluginUtils.js","../../../packages/shared/assign.js","../../../packages/react-native-renderer/src/legacy-events/SyntheticEvent.js","../../../packages/react-native-renderer/src/legacy-events/ResponderSyntheticEvent.js","../../../packages/react-native-renderer/src/legacy-events/ResponderTopLevelEventTypes.js","../../../packages/react-native-renderer/src/legacy-events/ResponderTouchHistoryStore.js","../../../packages/react-native-renderer/src/legacy-events/accumulate.js","../../../packages/react-native-renderer/src/legacy-events/accumulateInto.js","../../../packages/react-native-renderer/src/legacy-events/forEachAccumulated.js","../../../packages/react-reconciler/src/ReactWorkTags.js","../../../packages/react-native-renderer/src/legacy-events/ResponderEventPlugin.js","../../../packages/react-native-renderer/src/legacy-events/EventPluginRegistry.js","../../../packages/react-native-renderer/src/ReactNativeGetListeners.js","../../../packages/react-native-renderer/src/ReactNativeBridgeEventPlugin.js","../../../packages/react-native-renderer/src/ReactNativeEventPluginOrder.js","../../../packages/react-native-renderer/src/ReactNativeInjectionShared.js","../../../packages/react-native-renderer/src/ReactFabricComponentTree.js","../../../packages/react-native-renderer/src/ReactFabricGlobalResponderHandler.js","../../../packages/react-native-renderer/src/ReactFabricInjection.js","../../../packages/shared/ReactInstanceMap.js","../../../packages/shared/ReactSharedInternals.js","../../../packages/shared/forks/ReactFeatureFlags.native-oss.js","../../../packages/shared/ReactSymbols.js","../../../packages/shared/getComponentNameFromType.js","../../../packages/react-reconciler/src/getComponentNameFromFiber.js","../../../packages/react-reconciler/src/ReactFiberFlags.js","../../../packages/react-reconciler/src/ReactFiberTreeReflection.js","../../../packages/react-native-renderer/src/NativeMethodsMixinUtils.js","../../../packages/react-native-renderer/src/ReactNativeAttributePayload.js","../../../packages/react-native-renderer/src/legacy-events/ReactGenericBatching.js","../../../packages/react-native-renderer/src/legacy-events/EventBatching.js","../../../packages/react-native-renderer/src/ReactFabricEventEmitter.js","../../../packages/react-reconciler/src/Scheduler.js","../../../packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","../../../packages/react-reconciler/src/ReactTypeOfMode.js","../../../packages/react-reconciler/src/clz32.js","../../../packages/react-reconciler/src/ReactFiberLane.old.js","../../../packages/react-reconciler/src/ReactEventPriorities.old.js","../../../packages/react-reconciler/src/ReactFiberHostConfigWithNoMutation.js","../../../packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js","../../../packages/react-native-renderer/src/ReactFabricHostConfig.js","../../../packages/shared/ReactComponentStackFrame.js","../../../packages/shared/hasOwnProperty.js","../../../packages/shared/checkPropTypes.js","../../../packages/react-reconciler/src/ReactFiberStack.old.js","../../../packages/react-reconciler/src/ReactFiberContext.old.js","../../../packages/react-reconciler/src/ReactRootTags.js","../../../packages/react-reconciler/src/ReactFiberOffscreenComponent.js","../../../packages/shared/objectIs.js","../../../packages/react-reconciler/src/ReactFiberSyncTaskQueue.old.js","../../../packages/react-reconciler/src/ReactFiberShellHydration.js","../../../packages/react-reconciler/src/ReactFiberTreeContext.old.js","../../../packages/react-reconciler/src/ReactFiberHydrationContext.old.js","../../../packages/react-reconciler/src/ReactFiberTransition.js","../../../packages/shared/shallowEqual.js","../../../packages/react-reconciler/src/ReactFiberComponentStack.js","../../../packages/react-reconciler/src/ReactCurrentFiber.js","../../../packages/react-reconciler/src/ReactFiberLazyComponent.old.js","../../../packages/react-reconciler/src/ReactFiberNewContext.old.js","../../../packages/react-reconciler/src/ReactFiberConcurrentUpdates.old.js","../../../packages/react-reconciler/src/ReactFiberClassUpdateQueue.old.js","../../../packages/react-reconciler/src/ReactFiberClassComponent.old.js","../../../packages/react-reconciler/src/ReactChildFiber.old.js","../../../packages/react-reconciler/src/ReactFiberHostContext.old.js","../../../packages/react-reconciler/src/ReactFiberHiddenContext.old.js","../../../packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","../../../packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","../../../packages/react-reconciler/src/ReactHookEffectTags.js","../../../packages/react-reconciler/src/ReactMutableSource.old.js","../../../packages/react-reconciler/src/ReactFiberHooks.old.js","../../../packages/react-reconciler/src/ReactProfilerTimer.old.js","../../../packages/react-reconciler/src/ReactCapturedValue.js","../../../packages/react-reconciler/src/forks/ReactFiberErrorDialog.native.js","../../../packages/react-reconciler/src/ReactFiberErrorLogger.js","../../../packages/react-reconciler/src/ReactFiberThrow.old.js","../../../packages/react-reconciler/src/ReactFiberTransition.old.js","../../../packages/react-reconciler/src/ReactFiberBeginWork.old.js","../../../packages/react-reconciler/src/ReactFiberCompleteWork.old.js","../../../packages/react-reconciler/src/ReactFiberUnwindWork.old.js","../../../packages/react-reconciler/src/ReactFiberCommitWork.old.js","../../../packages/react-reconciler/src/ReactFiberAct.old.js","../../../packages/react-reconciler/src/ReactFiberWorkLoop.old.js","../../../packages/react-reconciler/src/ReactFiber.old.js","../../../packages/react-reconciler/src/ReactFiberRoot.old.js","../../../packages/shared/ReactVersion.js","../../../packages/react-reconciler/src/ReactPortal.js","../../../packages/react-reconciler/src/ReactFiberReconciler.old.js","../../../packages/react-native-renderer/src/ReactNativeFiberInspector.js","../../../packages/react-native-renderer/src/ReactFabric.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nfunction invokeGuardedCallbackProd<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n) {\n  const funcArgs = Array.prototype.slice.call(arguments, 3);\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this.onError(error);\n  }\n}\n\nlet invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\nif (__DEV__) {\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // unintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.dispatchEvent === 'function' &&\n    typeof document !== 'undefined' &&\n    typeof document.createEvent === 'function'\n  ) {\n    const fakeNode = document.createElement('react');\n\n    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev<\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      Context,\n    >(\n      name: string | null,\n      func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n      context: Context,\n      a: A,\n      b: B,\n      c: C,\n      d: D,\n      e: E,\n      f: F,\n    ) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebook/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      if (typeof document === 'undefined' || document === null) {\n        throw new Error(\n          'The `document` global was defined when React was initialized, but is not ' +\n            'defined anymore. This can happen in a test environment if a component ' +\n            'schedules an update from an asynchronous callback, but the test has already ' +\n            'finished running. To solve this, you can either unmount the component at ' +\n            'the end of your test (and ensure that any asynchronous operations get ' +\n            'canceled in `componentWillUnmount`), or you can change the test itself ' +\n            'to be asynchronous.',\n        );\n      }\n\n      const evt = document.createEvent('Event');\n\n      let didCall = false;\n      // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n      let didError = true;\n\n      // Keeps track of the value of window.event so that we can reset it\n      // during the callback to let user code access window.event in the\n      // browsers that support it.\n      const windowEvent = window.event;\n\n      // Keeps track of the descriptor of window.event to restore it after event\n      // dispatching: https://github.com/facebook/react/issues/13688\n      const windowEventDescriptor = Object.getOwnPropertyDescriptor(\n        window,\n        'event',\n      );\n\n      function restoreAfterDispatch() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false);\n\n        // We check for window.hasOwnProperty('event') to prevent the\n        // window.event assignment in both IE <= 10 as they throw an error\n        // \"Member not found\" in strict mode, and in Firefox which does not\n        // support window.event.\n        if (\n          typeof window.event !== 'undefined' &&\n          window.hasOwnProperty('event')\n        ) {\n          window.event = windowEvent;\n        }\n      }\n\n      // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n      const funcArgs = Array.prototype.slice.call(arguments, 3);\n      function callCallback() {\n        didCall = true;\n        restoreAfterDispatch();\n        func.apply(context, funcArgs);\n        didError = false;\n      }\n\n      // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n      let error;\n      // Use this to track whether the error event is ever called.\n      let didSetError = false;\n      let isCrossOriginError = false;\n\n      function handleWindowError(event) {\n        error = event.error;\n        didSetError = true;\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n        if (event.defaultPrevented) {\n          // Some other error handler has prevented default.\n          // Browsers silence the error report if this happens.\n          // We'll remember this to later decide whether to log it or not.\n          if (error != null && typeof error === 'object') {\n            try {\n              error._suppressLogging = true;\n            } catch (inner) {\n              // Ignore.\n            }\n          }\n        }\n      }\n\n      // Create a fake event type.\n      const evtType = `react-${name ? name : 'invokeguardedcallback'}`;\n\n      // Attach our event handlers\n      window.addEventListener('error', handleWindowError);\n      fakeNode.addEventListener(evtType, callCallback, false);\n\n      // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (windowEventDescriptor) {\n        Object.defineProperty(window, 'event', windowEventDescriptor);\n      }\n\n      if (didCall && didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error(\n            'An error was thrown inside one of your components, but React ' +\n              \"doesn't know what it was. This is likely due to browser \" +\n              'flakiness. React does its best to preserve the \"Pause on ' +\n              'exceptions\" behavior of the DevTools, which requires some ' +\n              \"DEV-mode only tricks. It's possible that these don't work in \" +\n              'your browser. Try triggering the error in production mode, ' +\n              'or switching to a modern browser. If you suspect that this is ' +\n              'actually an issue with React, please file an issue.',\n          );\n        } else if (isCrossOriginError) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error(\n            \"A cross-origin error was thrown. React doesn't have access to \" +\n              'the actual error object in development. ' +\n              'See https://reactjs.org/link/crossorigin-error for more information.',\n          );\n        }\n        this.onError(error);\n      }\n\n      // Remove our event listeners\n      window.removeEventListener('error', handleWindowError);\n\n      if (!didCall) {\n        // Something went really wrong, and our event was not dispatched.\n        // https://github.com/facebook/react/issues/16734\n        // https://github.com/facebook/react/issues/16585\n        // Fall back to the production implementation.\n        restoreAfterDispatch();\n        return invokeGuardedCallbackProd.apply(this, arguments);\n      }\n    };\n  }\n}\n\nexport default invokeGuardedCallbackImpl;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invokeGuardedCallbackImpl from './invokeGuardedCallbackImpl';\n\n// Used by Fiber to simulate a try-catch.\nlet hasError: boolean = false;\nlet caughtError: mixed = null;\n\n// Used by event system to capture/rethrow the first error.\nlet hasRethrowError: boolean = false;\nlet rethrowError: mixed = null;\n\nconst reporter = {\n  onError(error: mixed) {\n    hasError = true;\n    caughtError = error;\n  },\n};\n\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallback<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl.apply(reporter, arguments);\n}\n\n/**\n * Same as invokeGuardedCallback, but instead of returning an error, it stores\n * it in a global so it can be rethrown by `rethrowCaughtError` later.\n * TODO: See if caughtError and rethrowError can be unified.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallbackAndCatchFirstError<\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  Context,\n>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => void,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  invokeGuardedCallback.apply(this, arguments);\n  if (hasError) {\n    const error = clearCaughtError();\n    if (!hasRethrowError) {\n      hasRethrowError = true;\n      rethrowError = error;\n    }\n  }\n}\n\n/**\n * During execution of guarded functions we will capture the first error which\n * we will rethrow to be handled by the top level error handler.\n */\nexport function rethrowCaughtError() {\n  if (hasRethrowError) {\n    const error = rethrowError;\n    hasRethrowError = false;\n    rethrowError = null;\n    throw error;\n  }\n}\n\nexport function hasCaughtError() {\n  return hasError;\n}\n\nexport function clearCaughtError() {\n  if (hasError) {\n    const error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    throw new Error(\n      'clearCaughtError was called but no error was captured. This error ' +\n        'is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\ndeclare function isArray(a: mixed): boolean %checks(Array.isArray(a));\n\nconst isArrayImpl = Array.isArray;\n\n// eslint-disable-next-line no-redeclare\nfunction isArray(a: mixed): boolean {\n  return isArrayImpl(a);\n}\n\nexport default isArray;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {invokeGuardedCallbackAndCatchFirstError} from 'shared/ReactErrorUtils';\nimport isArray from 'shared/isArray';\n\nexport let getFiberCurrentPropsFromNode = null;\nexport let getInstanceFromNode = null;\nexport let getNodeFromInstance = null;\n\nexport function setComponentTree(\n  getFiberCurrentPropsFromNodeImpl,\n  getInstanceFromNodeImpl,\n  getNodeFromInstanceImpl,\n) {\n  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;\n  getInstanceFromNode = getInstanceFromNodeImpl;\n  getNodeFromInstance = getNodeFromInstanceImpl;\n  if (__DEV__) {\n    if (!getNodeFromInstance || !getInstanceFromNode) {\n      console.error(\n        'EventPluginUtils.setComponentTree(...): Injected ' +\n          'module is missing getNodeFromInstance or getInstanceFromNode.',\n      );\n    }\n  }\n}\n\nlet validateEventDispatches;\nif (__DEV__) {\n  validateEventDispatches = function(event) {\n    const dispatchListeners = event._dispatchListeners;\n    const dispatchInstances = event._dispatchInstances;\n\n    const listenersIsArr = isArray(dispatchListeners);\n    const listenersLen = listenersIsArr\n      ? dispatchListeners.length\n      : dispatchListeners\n      ? 1\n      : 0;\n\n    const instancesIsArr = isArray(dispatchInstances);\n    const instancesLen = instancesIsArr\n      ? dispatchInstances.length\n      : dispatchInstances\n      ? 1\n      : 0;\n\n    if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {\n      console.error('EventPluginUtils: Invalid `event`.');\n    }\n  };\n}\n\n/**\n * Dispatch the event to the listener.\n * @param {SyntheticEvent} event SyntheticEvent to handle\n * @param {function} listener Application-level callback\n * @param {*} inst Internal component instance\n */\nexport function executeDispatch(event, listener, inst) {\n  const type = event.type || 'unknown-event';\n  event.currentTarget = getNodeFromInstance(inst);\n  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);\n  event.currentTarget = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches.\n */\nexport function executeDispatchesInOrder(event) {\n  const dispatchListeners = event._dispatchListeners;\n  const dispatchInstances = event._dispatchInstances;\n  if (__DEV__) {\n    validateEventDispatches(event);\n  }\n  if (isArray(dispatchListeners)) {\n    for (let i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and Instances are two parallel arrays that are always in sync.\n      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);\n    }\n  } else if (dispatchListeners) {\n    executeDispatch(event, dispatchListeners, dispatchInstances);\n  }\n  event._dispatchListeners = null;\n  event._dispatchInstances = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches, but stops\n * at the first dispatch execution returning true, and returns that id.\n *\n * @return {?string} id of the first dispatch execution who's listener returns\n * true, or null if no listener returned true.\n */\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {\n  const dispatchListeners = event._dispatchListeners;\n  const dispatchInstances = event._dispatchInstances;\n  if (__DEV__) {\n    validateEventDispatches(event);\n  }\n  if (isArray(dispatchListeners)) {\n    for (let i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and Instances are two parallel arrays that are always in sync.\n      if (dispatchListeners[i](event, dispatchInstances[i])) {\n        return dispatchInstances[i];\n      }\n    }\n  } else if (dispatchListeners) {\n    if (dispatchListeners(event, dispatchInstances)) {\n      return dispatchInstances;\n    }\n  }\n  return null;\n}\n\n/**\n * @see executeDispatchesInOrderStopAtTrueImpl\n */\nexport function executeDispatchesInOrderStopAtTrue(event) {\n  const ret = executeDispatchesInOrderStopAtTrueImpl(event);\n  event._dispatchInstances = null;\n  event._dispatchListeners = null;\n  return ret;\n}\n\n/**\n * Execution of a \"direct\" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn't really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with \"direct\" dispatches.\n *\n * @return {*} The return value of executing the single dispatch.\n */\nexport function executeDirectDispatch(event) {\n  if (__DEV__) {\n    validateEventDispatches(event);\n  }\n  const dispatchListener = event._dispatchListeners;\n  const dispatchInstance = event._dispatchInstances;\n\n  if (isArray(dispatchListener)) {\n    throw new Error('executeDirectDispatch(...): Invalid `event`.');\n  }\n\n  event.currentTarget = dispatchListener\n    ? getNodeFromInstance(dispatchInstance)\n    : null;\n  const res = dispatchListener ? dispatchListener(event) : null;\n  event.currentTarget = null;\n  event._dispatchListeners = null;\n  event._dispatchInstances = null;\n  return res;\n}\n\n/**\n * @param {SyntheticEvent} event\n * @return {boolean} True iff number of dispatches accumulated is greater than 0.\n */\nexport function hasDispatches(event) {\n  return !!event._dispatchListeners;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst assign = Object.assign;\n\nexport default assign;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint valid-typeof: 0 */\n\nimport assign from 'shared/assign';\n\nconst EVENT_POOL_SIZE = 10;\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst EventInterface = {\n  type: null,\n  target: null,\n  // currentTarget is set when dispatching; no use in copying it here\n  currentTarget: function() {\n    return null;\n  },\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function(event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null,\n};\n\nfunction functionThatReturnsTrue() {\n  return true;\n}\n\nfunction functionThatReturnsFalse() {\n  return false;\n}\n\n/**\n * Synthetic events are dispatched by event plugins, typically in response to a\n * top-level event delegation handler.\n *\n * These systems should generally use pooling to reduce the frequency of garbage\n * collection. The system should check `isPersistent` to determine whether the\n * event should be released into the pool after being dispatched. Users that\n * need a persisted event should invoke `persist`.\n *\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n * normalizing browser quirks. Subclasses do not necessarily have to implement a\n * DOM interface; custom application-specific events can also subclass this.\n *\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {*} targetInst Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @param {DOMEventTarget} nativeEventTarget Target node.\n */\nfunction SyntheticEvent(\n  dispatchConfig,\n  targetInst,\n  nativeEvent,\n  nativeEventTarget,\n) {\n  if (__DEV__) {\n    // these have a getter/setter for warnings\n    delete this.nativeEvent;\n    delete this.preventDefault;\n    delete this.stopPropagation;\n    delete this.isDefaultPrevented;\n    delete this.isPropagationStopped;\n  }\n\n  this.dispatchConfig = dispatchConfig;\n  this._targetInst = targetInst;\n  this.nativeEvent = nativeEvent;\n  this._dispatchListeners = null;\n  this._dispatchInstances = null;\n\n  const Interface = this.constructor.Interface;\n  for (const propName in Interface) {\n    if (!Interface.hasOwnProperty(propName)) {\n      continue;\n    }\n    if (__DEV__) {\n      delete this[propName]; // this has a getter/setter for warnings\n    }\n    const normalize = Interface[propName];\n    if (normalize) {\n      this[propName] = normalize(nativeEvent);\n    } else {\n      if (propName === 'target') {\n        this.target = nativeEventTarget;\n      } else {\n        this[propName] = nativeEvent[propName];\n      }\n    }\n  }\n\n  const defaultPrevented =\n    nativeEvent.defaultPrevented != null\n      ? nativeEvent.defaultPrevented\n      : nativeEvent.returnValue === false;\n  if (defaultPrevented) {\n    this.isDefaultPrevented = functionThatReturnsTrue;\n  } else {\n    this.isDefaultPrevented = functionThatReturnsFalse;\n  }\n  this.isPropagationStopped = functionThatReturnsFalse;\n  return this;\n}\n\nassign(SyntheticEvent.prototype, {\n  preventDefault: function() {\n    this.defaultPrevented = true;\n    const event = this.nativeEvent;\n    if (!event) {\n      return;\n    }\n\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else if (typeof event.returnValue !== 'unknown') {\n      event.returnValue = false;\n    }\n    this.isDefaultPrevented = functionThatReturnsTrue;\n  },\n\n  stopPropagation: function() {\n    const event = this.nativeEvent;\n    if (!event) {\n      return;\n    }\n\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else if (typeof event.cancelBubble !== 'unknown') {\n      // The ChangeEventPlugin registers a \"propertychange\" event for\n      // IE. This event does not support bubbling or cancelling, and\n      // any references to cancelBubble throw \"Member not found\".  A\n      // typeof check of \"unknown\" circumvents this issue (and is also\n      // IE specific).\n      event.cancelBubble = true;\n    }\n\n    this.isPropagationStopped = functionThatReturnsTrue;\n  },\n\n  /**\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding\n   * them back into the pool. This allows a way to hold onto a reference that\n   * won't be added back into the pool.\n   */\n  persist: function() {\n    this.isPersistent = functionThatReturnsTrue;\n  },\n\n  /**\n   * Checks if this event should be released back into the pool.\n   *\n   * @return {boolean} True if this should not be released, false otherwise.\n   */\n  isPersistent: functionThatReturnsFalse,\n\n  /**\n   * `PooledClass` looks for `destructor` on each instance it releases.\n   */\n  destructor: function() {\n    const Interface = this.constructor.Interface;\n    for (const propName in Interface) {\n      if (__DEV__) {\n        Object.defineProperty(\n          this,\n          propName,\n          getPooledWarningPropertyDefinition(propName, Interface[propName]),\n        );\n      } else {\n        this[propName] = null;\n      }\n    }\n    this.dispatchConfig = null;\n    this._targetInst = null;\n    this.nativeEvent = null;\n    this.isDefaultPrevented = functionThatReturnsFalse;\n    this.isPropagationStopped = functionThatReturnsFalse;\n    this._dispatchListeners = null;\n    this._dispatchInstances = null;\n    if (__DEV__) {\n      Object.defineProperty(\n        this,\n        'nativeEvent',\n        getPooledWarningPropertyDefinition('nativeEvent', null),\n      );\n      Object.defineProperty(\n        this,\n        'isDefaultPrevented',\n        getPooledWarningPropertyDefinition(\n          'isDefaultPrevented',\n          functionThatReturnsFalse,\n        ),\n      );\n      Object.defineProperty(\n        this,\n        'isPropagationStopped',\n        getPooledWarningPropertyDefinition(\n          'isPropagationStopped',\n          functionThatReturnsFalse,\n        ),\n      );\n      Object.defineProperty(\n        this,\n        'preventDefault',\n        getPooledWarningPropertyDefinition('preventDefault', () => {}),\n      );\n      Object.defineProperty(\n        this,\n        'stopPropagation',\n        getPooledWarningPropertyDefinition('stopPropagation', () => {}),\n      );\n    }\n  },\n});\n\nSyntheticEvent.Interface = EventInterface;\n\n/**\n * Helper to reduce boilerplate when creating subclasses.\n */\nSyntheticEvent.extend = function(Interface) {\n  const Super = this;\n\n  const E = function() {};\n  E.prototype = Super.prototype;\n  const prototype = new E();\n\n  function Class() {\n    return Super.apply(this, arguments);\n  }\n  assign(prototype, Class.prototype);\n  Class.prototype = prototype;\n  Class.prototype.constructor = Class;\n\n  Class.Interface = assign({}, Super.Interface, Interface);\n  Class.extend = Super.extend;\n  addEventPoolingTo(Class);\n\n  return Class;\n};\n\naddEventPoolingTo(SyntheticEvent);\n\n/**\n * Helper to nullify syntheticEvent instance properties when destructing\n *\n * @param {String} propName\n * @param {?object} getVal\n * @return {object} defineProperty object\n */\nfunction getPooledWarningPropertyDefinition(propName, getVal) {\n  function set(val) {\n    const action = isFunction ? 'setting the method' : 'setting the property';\n    warn(action, 'This is effectively a no-op');\n    return val;\n  }\n\n  function get() {\n    const action = isFunction\n      ? 'accessing the method'\n      : 'accessing the property';\n    const result = isFunction\n      ? 'This is a no-op function'\n      : 'This is set to null';\n    warn(action, result);\n    return getVal;\n  }\n\n  function warn(action, result) {\n    if (__DEV__) {\n      console.error(\n        \"This synthetic event is reused for performance reasons. If you're seeing this, \" +\n          \"you're %s `%s` on a released/nullified synthetic event. %s. \" +\n          'If you must keep the original synthetic event around, use event.persist(). ' +\n          'See https://reactjs.org/link/event-pooling for more information.',\n        action,\n        propName,\n        result,\n      );\n    }\n  }\n  const isFunction = typeof getVal === 'function';\n  return {\n    configurable: true,\n    set: set,\n    get: get,\n  };\n}\n\nfunction createOrGetPooledEvent(\n  dispatchConfig,\n  targetInst,\n  nativeEvent,\n  nativeInst,\n) {\n  const EventConstructor = this;\n  if (EventConstructor.eventPool.length) {\n    const instance = EventConstructor.eventPool.pop();\n    EventConstructor.call(\n      instance,\n      dispatchConfig,\n      targetInst,\n      nativeEvent,\n      nativeInst,\n    );\n    return instance;\n  }\n  return new EventConstructor(\n    dispatchConfig,\n    targetInst,\n    nativeEvent,\n    nativeInst,\n  );\n}\n\nfunction releasePooledEvent(event) {\n  const EventConstructor = this;\n\n  if (!(event instanceof EventConstructor)) {\n    throw new Error(\n      'Trying to release an event instance into a pool of a different type.',\n    );\n  }\n\n  event.destructor();\n  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {\n    EventConstructor.eventPool.push(event);\n  }\n}\n\nfunction addEventPoolingTo(EventConstructor) {\n  EventConstructor.getPooled = createOrGetPooledEvent;\n  EventConstructor.eventPool = [];\n  EventConstructor.release = releasePooledEvent;\n}\n\nexport default SyntheticEvent;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport SyntheticEvent from './SyntheticEvent';\n\n/**\n * `touchHistory` isn't actually on the native event, but putting it in the\n * interface will ensure that it is cleaned up when pooled/destroyed. The\n * `ResponderEventPlugin` will populate it appropriately.\n */\nconst ResponderSyntheticEvent = SyntheticEvent.extend({\n  touchHistory: function(nativeEvent) {\n    return null; // Actually doesn't even look at the native event.\n  },\n});\n\nexport default ResponderSyntheticEvent;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport const TOP_TOUCH_START = 'topTouchStart';\nexport const TOP_TOUCH_MOVE = 'topTouchMove';\nexport const TOP_TOUCH_END = 'topTouchEnd';\nexport const TOP_TOUCH_CANCEL = 'topTouchCancel';\nexport const TOP_SCROLL = 'topScroll';\nexport const TOP_SELECTION_CHANGE = 'topSelectionChange';\n\nexport function isStartish(topLevelType: mixed): boolean {\n  return topLevelType === TOP_TOUCH_START;\n}\n\nexport function isMoveish(topLevelType: mixed): boolean {\n  return topLevelType === TOP_TOUCH_MOVE;\n}\n\nexport function isEndish(topLevelType: mixed): boolean {\n  return topLevelType === TOP_TOUCH_END || topLevelType === TOP_TOUCH_CANCEL;\n}\n\nexport const startDependencies = [TOP_TOUCH_START];\nexport const moveDependencies = [TOP_TOUCH_MOVE];\nexport const endDependencies = [TOP_TOUCH_CANCEL, TOP_TOUCH_END];\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {isStartish, isMoveish, isEndish} from './ResponderTopLevelEventTypes';\n\n/**\n * Tracks the position and time of each active touch by `touch.identifier`. We\n * should typically only see IDs in the range of 1-20 because IDs get recycled\n * when touches end and start again.\n */\ntype TouchRecord = {|\n  touchActive: boolean,\n  startPageX: number,\n  startPageY: number,\n  startTimeStamp: number,\n  currentPageX: number,\n  currentPageY: number,\n  currentTimeStamp: number,\n  previousPageX: number,\n  previousPageY: number,\n  previousTimeStamp: number,\n|};\n\nconst MAX_TOUCH_BANK = 20;\nconst touchBank: Array<TouchRecord> = [];\nconst touchHistory = {\n  touchBank,\n  numberActiveTouches: 0,\n  // If there is only one active touch, we remember its location. This prevents\n  // us having to loop through all of the touches all the time in the most\n  // common case.\n  indexOfSingleActiveTouch: -1,\n  mostRecentTimeStamp: 0,\n};\n\ntype Touch = {\n  identifier: ?number,\n  pageX: number,\n  pageY: number,\n  timestamp: number,\n  ...\n};\ntype TouchEvent = {\n  changedTouches: Array<Touch>,\n  touches: Array<Touch>,\n  ...\n};\n\nfunction timestampForTouch(touch: Touch): number {\n  // The legacy internal implementation provides \"timeStamp\", which has been\n  // renamed to \"timestamp\". Let both work for now while we iron it out\n  // TODO (evv): rename timeStamp to timestamp in internal code\n  return (touch: any).timeStamp || touch.timestamp;\n}\n\n/**\n * TODO: Instead of making gestures recompute filtered velocity, we could\n * include a built in velocity computation that can be reused globally.\n */\nfunction createTouchRecord(touch: Touch): TouchRecord {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch),\n  };\n}\n\nfunction resetTouchRecord(touchRecord: TouchRecord, touch: Touch): void {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier({identifier}: Touch): number {\n  if (identifier == null) {\n    throw new Error('Touch object is missing identifier.');\n  }\n\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error(\n        'Touch identifier %s is greater than maximum supported %s which causes ' +\n          'performance issues backfilling array locations for all of the indices.',\n        identifier,\n        MAX_TOUCH_BANK,\n      );\n    }\n  }\n  return identifier;\n}\n\nfunction recordTouchStart(touch: Touch): void {\n  const identifier = getTouchIdentifier(touch);\n  const touchRecord = touchBank[identifier];\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchBank[identifier] = createTouchRecord(touch);\n  }\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch: Touch): void {\n  const touchRecord = touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    if (__DEV__) {\n      console.warn(\n        'Cannot record touch move without a touch start.\\n' +\n          'Touch Move: %s\\n' +\n          'Touch Bank: %s',\n        printTouch(touch),\n        printTouchBank(),\n      );\n    }\n  }\n}\n\nfunction recordTouchEnd(touch: Touch): void {\n  const touchRecord = touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    if (__DEV__) {\n      console.warn(\n        'Cannot record touch end without a touch start.\\n' +\n          'Touch End: %s\\n' +\n          'Touch Bank: %s',\n        printTouch(touch),\n        printTouchBank(),\n      );\n    }\n  }\n}\n\nfunction printTouch(touch: Touch): string {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch),\n  });\n}\n\nfunction printTouchBank(): string {\n  let printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n  return printed;\n}\n\nlet instrumentationCallback: ?(string, TouchEvent) => void;\n\nconst ResponderTouchHistoryStore = {\n  /**\n   * Registers a listener which can be used to instrument every touch event.\n   */\n  instrument(callback: (string, TouchEvent) => void): void {\n    instrumentationCallback = callback;\n  },\n\n  recordTouchTrack(topLevelType: string, nativeEvent: TouchEvent): void {\n    if (instrumentationCallback != null) {\n      instrumentationCallback(topLevelType, nativeEvent);\n    }\n\n    if (isMoveish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchMove);\n    } else if (isStartish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchStart);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch =\n          nativeEvent.touches[0].identifier;\n      }\n    } else if (isEndish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchEnd);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        for (let i = 0; i < touchBank.length; i++) {\n          const touchTrackToCheck = touchBank[i];\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n        if (__DEV__) {\n          const activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n          if (activeRecord == null || !activeRecord.touchActive) {\n            console.error('Cannot find single active touch.');\n          }\n        }\n      }\n    }\n  },\n\n  touchHistory,\n};\n\nexport default ResponderTouchHistoryStore;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport isArray from 'shared/isArray';\n\n/**\n * Accumulates items that must not be null or undefined.\n *\n * This is used to conserve memory by avoiding array allocations.\n *\n * @return {*|array<*>} An accumulation of items.\n */\nfunction accumulate<T>(\n  current: ?(T | Array<T>),\n  next: T | Array<T>,\n): T | Array<T> {\n  if (next == null) {\n    throw new Error(\n      'accumulate(...): Accumulated items must not be null or undefined.',\n    );\n  }\n\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  if (isArray(current)) {\n    return current.concat(next);\n  }\n\n  if (isArray(next)) {\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nexport default accumulate;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport isArray from 'shared/isArray';\n\n/**\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto<T>(\n  current: ?(Array<T> | T),\n  next: T | Array<T>,\n): T | Array<T> {\n  if (next == null) {\n    throw new Error(\n      'accumulateInto(...): Accumulated items must not be null or undefined.',\n    );\n  }\n\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  if (isArray(current)) {\n    if (isArray(next)) {\n      current.push.apply(current, next);\n      return current;\n    }\n    current.push(next);\n    return current;\n  }\n\n  if (isArray(next)) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nexport default accumulateInto;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * @param {array} arr an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n * @param {function} cb Callback invoked with each element or a collection.\n * @param {?} [scope] Scope used as `this` in a callback.\n */\nfunction forEachAccumulated<T>(\n  arr: ?(Array<T> | T),\n  cb: (elem: T) => void,\n  scope: ?any,\n) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n}\n\nexport default forEachAccumulated;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const ScopeComponent = 21;\nexport const OffscreenComponent = 22;\nexport const LegacyHiddenComponent = 23;\nexport const CacheComponent = 24;\nexport const TracingMarkerComponent = 25;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  executeDirectDispatch,\n  hasDispatches,\n  executeDispatchesInOrderStopAtTrue,\n  getInstanceFromNode,\n  getFiberCurrentPropsFromNode,\n} from './EventPluginUtils';\nimport ResponderSyntheticEvent from './ResponderSyntheticEvent';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\nimport accumulate from './accumulate';\nimport {\n  TOP_SCROLL,\n  TOP_SELECTION_CHANGE,\n  TOP_TOUCH_CANCEL,\n  isStartish,\n  isMoveish,\n  isEndish,\n  startDependencies,\n  moveDependencies,\n  endDependencies,\n} from './ResponderTopLevelEventTypes';\nimport accumulateInto from './accumulateInto';\nimport forEachAccumulated from './forEachAccumulated';\nimport {HostComponent} from 'react-reconciler/src/ReactWorkTags';\n\n/**\n * Instance of element that should respond to touch/move types of interactions,\n * as indicated explicitly by relevant callbacks.\n */\nlet responderInst = null;\n\n/**\n * Count of current touches. A textInput should become responder iff the\n * selection changes while there is a touch on the screen.\n */\nlet trackedTouchCount = 0;\n\nconst changeResponder = function(nextResponderInst, blockHostResponder) {\n  const oldResponderInst = responderInst;\n  responderInst = nextResponderInst;\n  if (ResponderEventPlugin.GlobalResponderHandler !== null) {\n    ResponderEventPlugin.GlobalResponderHandler.onChange(\n      oldResponderInst,\n      nextResponderInst,\n      blockHostResponder,\n    );\n  }\n};\n\nconst eventTypes = {\n  /**\n   * On a `touchStart`/`mouseDown`, is it desired that this element become the\n   * responder?\n   */\n  startShouldSetResponder: {\n    phasedRegistrationNames: {\n      bubbled: 'onStartShouldSetResponder',\n      captured: 'onStartShouldSetResponderCapture',\n    },\n    dependencies: startDependencies,\n  },\n\n  /**\n   * On a `scroll`, is it desired that this element become the responder? This\n   * is usually not needed, but should be used to retroactively infer that a\n   * `touchStart` had occurred during momentum scroll. During a momentum scroll,\n   * a touch start will be immediately followed by a scroll event if the view is\n   * currently scrolling.\n   *\n   * TODO: This shouldn't bubble.\n   */\n  scrollShouldSetResponder: {\n    phasedRegistrationNames: {\n      bubbled: 'onScrollShouldSetResponder',\n      captured: 'onScrollShouldSetResponderCapture',\n    },\n    dependencies: [TOP_SCROLL],\n  },\n\n  /**\n   * On text selection change, should this element become the responder? This\n   * is needed for text inputs or other views with native selection, so the\n   * JS view can claim the responder.\n   *\n   * TODO: This shouldn't bubble.\n   */\n  selectionChangeShouldSetResponder: {\n    phasedRegistrationNames: {\n      bubbled: 'onSelectionChangeShouldSetResponder',\n      captured: 'onSelectionChangeShouldSetResponderCapture',\n    },\n    dependencies: [TOP_SELECTION_CHANGE],\n  },\n\n  /**\n   * On a `touchMove`/`mouseMove`, is it desired that this element become the\n   * responder?\n   */\n  moveShouldSetResponder: {\n    phasedRegistrationNames: {\n      bubbled: 'onMoveShouldSetResponder',\n      captured: 'onMoveShouldSetResponderCapture',\n    },\n    dependencies: moveDependencies,\n  },\n\n  /**\n   * Direct responder events dispatched directly to responder. Do not bubble.\n   */\n  responderStart: {\n    registrationName: 'onResponderStart',\n    dependencies: startDependencies,\n  },\n  responderMove: {\n    registrationName: 'onResponderMove',\n    dependencies: moveDependencies,\n  },\n  responderEnd: {\n    registrationName: 'onResponderEnd',\n    dependencies: endDependencies,\n  },\n  responderRelease: {\n    registrationName: 'onResponderRelease',\n    dependencies: endDependencies,\n  },\n  responderTerminationRequest: {\n    registrationName: 'onResponderTerminationRequest',\n    dependencies: [],\n  },\n  responderGrant: {\n    registrationName: 'onResponderGrant',\n    dependencies: [],\n  },\n  responderReject: {\n    registrationName: 'onResponderReject',\n    dependencies: [],\n  },\n  responderTerminate: {\n    registrationName: 'onResponderTerminate',\n    dependencies: [],\n  },\n};\n\n// Start of inline: the below functions were inlined from\n// EventPropagator.js, as they deviated from ReactDOM's newer\n// implementations.\n\nfunction getParent(inst) {\n  do {\n    inst = inst.return;\n    // TODO: If this is a HostRoot we might want to bail out.\n    // That is depending on if we want nested subtrees (layers) to bubble\n    // events to their parent. We could also go through parentNode on the\n    // host node but that wouldn't work for React Native and doesn't let us\n    // do the portal feature.\n  } while (inst && inst.tag !== HostComponent);\n  if (inst) {\n    return inst;\n  }\n  return null;\n}\n\n/**\n * Return the lowest common ancestor of A and B, or null if they are in\n * different trees.\n */\nexport function getLowestCommonAncestor(instA, instB) {\n  let depthA = 0;\n  for (let tempA = instA; tempA; tempA = getParent(tempA)) {\n    depthA++;\n  }\n  let depthB = 0;\n  for (let tempB = instB; tempB; tempB = getParent(tempB)) {\n    depthB++;\n  }\n\n  // If A is deeper, crawl up.\n  while (depthA - depthB > 0) {\n    instA = getParent(instA);\n    depthA--;\n  }\n\n  // If B is deeper, crawl up.\n  while (depthB - depthA > 0) {\n    instB = getParent(instB);\n    depthB--;\n  }\n\n  // Walk in lockstep until we find a match.\n  let depth = depthA;\n  while (depth--) {\n    if (instA === instB || instA === instB.alternate) {\n      return instA;\n    }\n    instA = getParent(instA);\n    instB = getParent(instB);\n  }\n  return null;\n}\n\n/**\n * Return if A is an ancestor of B.\n */\nfunction isAncestor(instA, instB) {\n  while (instB) {\n    if (instA === instB || instA === instB.alternate) {\n      return true;\n    }\n    instB = getParent(instB);\n  }\n  return false;\n}\n\n/**\n * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n */\nfunction traverseTwoPhase(inst, fn, arg) {\n  const path = [];\n  while (inst) {\n    path.push(inst);\n    inst = getParent(inst);\n  }\n  let i;\n  for (i = path.length; i-- > 0; ) {\n    fn(path[i], 'captured', arg);\n  }\n  for (i = 0; i < path.length; i++) {\n    fn(path[i], 'bubbled', arg);\n  }\n}\n\nfunction getListener(inst, registrationName) {\n  const stateNode = inst.stateNode;\n  if (stateNode === null) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n  const props = getFiberCurrentPropsFromNode(stateNode);\n  if (props === null) {\n    // Work in progress.\n    return null;\n  }\n  const listener = props[registrationName];\n\n  if (listener && typeof listener !== 'function') {\n    throw new Error(\n      `Expected \\`${registrationName}\\` listener to be a function, instead got a value of \\`${typeof listener}\\` type.`,\n    );\n  }\n\n  return listener;\n}\n\nfunction listenerAtPhase(inst, event, propagationPhase: PropagationPhases) {\n  const registrationName =\n    event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(inst, registrationName);\n}\n\nfunction accumulateDirectionalDispatches(inst, phase, event) {\n  if (__DEV__) {\n    if (!inst) {\n      console.error('Dispatching inst must not be null');\n    }\n  }\n  const listener = listenerAtPhase(inst, event, phase);\n  if (listener) {\n    event._dispatchListeners = accumulateInto(\n      event._dispatchListeners,\n      listener,\n    );\n    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n  }\n}\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(\n  inst: Object,\n  ignoredDirection: ?boolean,\n  event: Object,\n): void {\n  if (inst && event && event.dispatchConfig.registrationName) {\n    const registrationName = event.dispatchConfig.registrationName;\n    const listener = getListener(inst, registrationName);\n    if (listener) {\n      event._dispatchListeners = accumulateInto(\n        event._dispatchListeners,\n        listener,\n      );\n      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event: Object) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event._targetInst, null, event);\n  }\n}\n\nfunction accumulateDirectDispatches(events: ?(Array<Object> | Object)) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    const targetInst = event._targetInst;\n    const parentInst = targetInst ? getParent(targetInst) : null;\n    traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n}\n\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n// End of inline\n\n/**\n *\n * Responder System:\n * ----------------\n *\n * - A global, solitary \"interaction lock\" on a view.\n * - If a node becomes the responder, it should convey visual feedback\n *   immediately to indicate so, either by highlighting or moving accordingly.\n * - To be the responder means, that touches are exclusively important to that\n *   responder view, and no other view.\n * - While touches are still occurring, the responder lock can be transferred to\n *   a new view, but only to increasingly \"higher\" views (meaning ancestors of\n *   the current responder).\n *\n * Responder being granted:\n * ------------------------\n *\n * - Touch starts, moves, and scrolls can cause an ID to become the responder.\n * - We capture/bubble `startShouldSetResponder`/`moveShouldSetResponder` to\n *   the \"appropriate place\".\n * - If nothing is currently the responder, the \"appropriate place\" is the\n *   initiating event's `targetID`.\n * - If something *is* already the responder, the \"appropriate place\" is the\n *   first common ancestor of the event target and the current `responderInst`.\n * - Some negotiation happens: See the timing diagram below.\n * - Scrolled views automatically become responder. The reasoning is that a\n *   platform scroll view that isn't built on top of the responder system has\n *   began scrolling, and the active responder must now be notified that the\n *   interaction is no longer locked to it - the system has taken over.\n *\n * - Responder being released:\n *   As soon as no more touches that *started* inside of descendants of the\n *   *current* responderInst, an `onResponderRelease` event is dispatched to the\n *   current responder, and the responder lock is released.\n *\n * TODO:\n * - on \"end\", a callback hook for `onResponderEndShouldRemainResponder` that\n *   determines if the responder lock should remain.\n * - If a view shouldn't \"remain\" the responder, any active touches should by\n *   default be considered \"dead\" and do not influence future negotiations or\n *   bubble paths. It should be as if those touches do not exist.\n * -- For multitouch: Usually a translate-z will choose to \"remain\" responder\n *  after one out of many touches ended. For translate-y, usually the view\n *  doesn't wish to \"remain\" responder after one of many touches end.\n * - Consider building this on top of a `stopPropagation` model similar to\n *   `W3C` events.\n * - Ensure that `onResponderTerminate` is called on touch cancels, whether or\n *   not `onResponderTerminationRequest` returns `true` or `false`.\n *\n */\n\n/*                                             Negotiation Performed\n                                             +-----------------------+\n                                            /                         \\\nProcess low level events to    +     Current Responder      +   wantsResponderID\ndetermine who to perform negot-|   (if any exists at all)   |\niation/transition              | Otherwise just pass through|\n-------------------------------+----------------------------+------------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchStart|           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onStartShouldSetResponder|----->|onResponderStart (cur)  |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderStart|\n                               |                            | +----------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchMove |           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onMoveShouldSetResponder |----->|onResponderMove (cur)   |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderRejec|\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderMove |\n                               |                            | +----------------+\n                               |                            |\n                               |                            |\n      Some active touch started|                            |\n      inside current responder | +------------------------+ |\n      +------------------------->|      onResponderEnd    | |\n      |                        | +------------------------+ |\n  +---+---------+              |                            |\n  | onTouchEnd  |              |                            |\n  +---+---------+              |                            |\n      |                        | +------------------------+ |\n      +------------------------->|     onResponderEnd     | |\n      No active touches started| +-----------+------------+ |\n      inside current responder |             |              |\n                               |             v              |\n                               | +------------------------+ |\n                               | |    onResponderRelease  | |\n                               | +------------------------+ |\n                               |                            |\n                               +                            + */\n\n/**\n * A note about event ordering in the `EventPluginRegistry`.\n *\n * Suppose plugins are injected in the following order:\n *\n * `[R, S, C]`\n *\n * To help illustrate the example, assume `S` is `SimpleEventPlugin` (for\n * `onClick` etc) and `R` is `ResponderEventPlugin`.\n *\n * \"Deferred-Dispatched Events\":\n *\n * - The current event plugin system will traverse the list of injected plugins,\n *   in order, and extract events by collecting the plugin's return value of\n *   `extractEvents()`.\n * - These events that are returned from `extractEvents` are \"deferred\n *   dispatched events\".\n * - When returned from `extractEvents`, deferred-dispatched events contain an\n *   \"accumulation\" of deferred dispatches.\n * - These deferred dispatches are accumulated/collected before they are\n *   returned, but processed at a later time by the `EventPluginRegistry` (hence the\n *   name deferred).\n *\n * In the process of returning their deferred-dispatched events, event plugins\n * themselves can dispatch events on-demand without returning them from\n * `extractEvents`. Plugins might want to do this, so that they can use event\n * dispatching as a tool that helps them decide which events should be extracted\n * in the first place.\n *\n * \"On-Demand-Dispatched Events\":\n *\n * - On-demand-dispatched events are not returned from `extractEvents`.\n * - On-demand-dispatched events are dispatched during the process of returning\n *   the deferred-dispatched events.\n * - They should not have side effects.\n * - They should be avoided, and/or eventually be replaced with another\n *   abstraction that allows event plugins to perform multiple \"rounds\" of event\n *   extraction.\n *\n * Therefore, the sequence of event dispatches becomes:\n *\n * - `R`s on-demand events (if any)   (dispatched by `R` on-demand)\n * - `S`s on-demand events (if any)   (dispatched by `S` on-demand)\n * - `C`s on-demand events (if any)   (dispatched by `C` on-demand)\n * - `R`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n * - `S`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n * - `C`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n *\n * In the case of `ResponderEventPlugin`: If the `startShouldSetResponder`\n * on-demand dispatch returns `true` (and some other details are satisfied) the\n * `onResponderGrant` deferred dispatched event is returned from\n * `extractEvents`. The sequence of dispatch executions in this case\n * will appear as follows:\n *\n * - `startShouldSetResponder` (`ResponderEventPlugin` dispatches on-demand)\n * - `touchStartCapture`       (`EventPluginRegistry` dispatches as usual)\n * - `touchStart`              (`EventPluginRegistry` dispatches as usual)\n * - `responderGrant/Reject`   (`EventPluginRegistry` dispatches as usual)\n */\n\nfunction setResponderAndExtractTransfer(\n  topLevelType,\n  targetInst,\n  nativeEvent,\n  nativeEventTarget,\n) {\n  const shouldSetEventType = isStartish(topLevelType)\n    ? eventTypes.startShouldSetResponder\n    : isMoveish(topLevelType)\n    ? eventTypes.moveShouldSetResponder\n    : topLevelType === TOP_SELECTION_CHANGE\n    ? eventTypes.selectionChangeShouldSetResponder\n    : eventTypes.scrollShouldSetResponder;\n\n  // TODO: stop one short of the current responder.\n  const bubbleShouldSetFrom = !responderInst\n    ? targetInst\n    : getLowestCommonAncestor(responderInst, targetInst);\n\n  // When capturing/bubbling the \"shouldSet\" event, we want to skip the target\n  // (deepest ID) if it happens to be the current responder. The reasoning:\n  // It's strange to get an `onMoveShouldSetResponder` when you're *already*\n  // the responder.\n  const skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;\n  const shouldSetEvent = ResponderSyntheticEvent.getPooled(\n    shouldSetEventType,\n    bubbleShouldSetFrom,\n    nativeEvent,\n    nativeEventTarget,\n  );\n  shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n  if (skipOverBubbleShouldSetFrom) {\n    accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);\n  } else {\n    accumulateTwoPhaseDispatches(shouldSetEvent);\n  }\n  const wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);\n  if (!shouldSetEvent.isPersistent()) {\n    shouldSetEvent.constructor.release(shouldSetEvent);\n  }\n\n  if (!wantsResponderInst || wantsResponderInst === responderInst) {\n    return null;\n  }\n  let extracted;\n  const grantEvent = ResponderSyntheticEvent.getPooled(\n    eventTypes.responderGrant,\n    wantsResponderInst,\n    nativeEvent,\n    nativeEventTarget,\n  );\n  grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n\n  accumulateDirectDispatches(grantEvent);\n  const blockHostResponder = executeDirectDispatch(grantEvent) === true;\n  if (responderInst) {\n    const terminationRequestEvent = ResponderSyntheticEvent.getPooled(\n      eventTypes.responderTerminationRequest,\n      responderInst,\n      nativeEvent,\n      nativeEventTarget,\n    );\n    terminationRequestEvent.touchHistory =\n      ResponderTouchHistoryStore.touchHistory;\n    accumulateDirectDispatches(terminationRequestEvent);\n    const shouldSwitch =\n      !hasDispatches(terminationRequestEvent) ||\n      executeDirectDispatch(terminationRequestEvent);\n    if (!terminationRequestEvent.isPersistent()) {\n      terminationRequestEvent.constructor.release(terminationRequestEvent);\n    }\n\n    if (shouldSwitch) {\n      const terminateEvent = ResponderSyntheticEvent.getPooled(\n        eventTypes.responderTerminate,\n        responderInst,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches(terminateEvent);\n      extracted = accumulate(extracted, [grantEvent, terminateEvent]);\n      changeResponder(wantsResponderInst, blockHostResponder);\n    } else {\n      const rejectEvent = ResponderSyntheticEvent.getPooled(\n        eventTypes.responderReject,\n        wantsResponderInst,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches(rejectEvent);\n      extracted = accumulate(extracted, rejectEvent);\n    }\n  } else {\n    extracted = accumulate(extracted, grantEvent);\n    changeResponder(wantsResponderInst, blockHostResponder);\n  }\n  return extracted;\n}\n\n/**\n * A transfer is a negotiation between a currently set responder and the next\n * element to claim responder status. Any start event could trigger a transfer\n * of responderInst. Any move event could trigger a transfer.\n *\n * @param {string} topLevelType Record from `BrowserEventConstants`.\n * @return {boolean} True if a transfer of responder could possibly occur.\n */\nfunction canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {\n  return (\n    topLevelInst &&\n    // responderIgnoreScroll: We are trying to migrate away from specifically\n    // tracking native scroll events here and responderIgnoreScroll indicates we\n    // will send topTouchCancel to handle canceling touch events instead\n    ((topLevelType === TOP_SCROLL && !nativeEvent.responderIgnoreScroll) ||\n      (trackedTouchCount > 0 && topLevelType === TOP_SELECTION_CHANGE) ||\n      isStartish(topLevelType) ||\n      isMoveish(topLevelType))\n  );\n}\n\n/**\n * Returns whether or not this touch end event makes it such that there are no\n * longer any touches that started inside of the current `responderInst`.\n *\n * @param {NativeEvent} nativeEvent Native touch end event.\n * @return {boolean} Whether or not this touch end event ends the responder.\n */\nfunction noResponderTouches(nativeEvent) {\n  const touches = nativeEvent.touches;\n  if (!touches || touches.length === 0) {\n    return true;\n  }\n  for (let i = 0; i < touches.length; i++) {\n    const activeTouch = touches[i];\n    const target = activeTouch.target;\n    if (target !== null && target !== undefined && target !== 0) {\n      // Is the original touch location inside of the current responder?\n      const targetInst = getInstanceFromNode(target);\n      if (isAncestor(responderInst, targetInst)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nconst ResponderEventPlugin = {\n  /* For unit testing only */\n  _getResponder: function() {\n    return responderInst;\n  },\n\n  eventTypes: eventTypes,\n\n  /**\n   * We must be resilient to `targetInst` being `null` on `touchMove` or\n   * `touchEnd`. On certain platforms, this means that a native scroll has\n   * assumed control and the original touch targets are destroyed.\n   */\n  extractEvents: function(\n    topLevelType,\n    targetInst,\n    nativeEvent,\n    nativeEventTarget,\n    eventSystemFlags,\n  ) {\n    if (isStartish(topLevelType)) {\n      trackedTouchCount += 1;\n    } else if (isEndish(topLevelType)) {\n      if (trackedTouchCount >= 0) {\n        trackedTouchCount -= 1;\n      } else {\n        if (__DEV__) {\n          console.warn(\n            'Ended a touch event which was not counted in `trackedTouchCount`.',\n          );\n        }\n        return null;\n      }\n    }\n\n    ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);\n\n    let extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent)\n      ? setResponderAndExtractTransfer(\n          topLevelType,\n          targetInst,\n          nativeEvent,\n          nativeEventTarget,\n        )\n      : null;\n    // Responder may or may not have transferred on a new touch start/move.\n    // Regardless, whoever is the responder after any potential transfer, we\n    // direct all touch start/move/ends to them in the form of\n    // `onResponderMove/Start/End`. These will be called for *every* additional\n    // finger that move/start/end, dispatched directly to whoever is the\n    // current responder at that moment, until the responder is \"released\".\n    //\n    // These multiple individual change touch events are are always bookended\n    // by `onResponderGrant`, and one of\n    // (`onResponderRelease/onResponderTerminate`).\n    const isResponderTouchStart = responderInst && isStartish(topLevelType);\n    const isResponderTouchMove = responderInst && isMoveish(topLevelType);\n    const isResponderTouchEnd = responderInst && isEndish(topLevelType);\n    const incrementalTouch = isResponderTouchStart\n      ? eventTypes.responderStart\n      : isResponderTouchMove\n      ? eventTypes.responderMove\n      : isResponderTouchEnd\n      ? eventTypes.responderEnd\n      : null;\n\n    if (incrementalTouch) {\n      const gesture = ResponderSyntheticEvent.getPooled(\n        incrementalTouch,\n        responderInst,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches(gesture);\n      extracted = accumulate(extracted, gesture);\n    }\n\n    const isResponderTerminate =\n      responderInst && topLevelType === TOP_TOUCH_CANCEL;\n    const isResponderRelease =\n      responderInst &&\n      !isResponderTerminate &&\n      isEndish(topLevelType) &&\n      noResponderTouches(nativeEvent);\n    const finalTouch = isResponderTerminate\n      ? eventTypes.responderTerminate\n      : isResponderRelease\n      ? eventTypes.responderRelease\n      : null;\n    if (finalTouch) {\n      const finalEvent = ResponderSyntheticEvent.getPooled(\n        finalTouch,\n        responderInst,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches(finalEvent);\n      extracted = accumulate(extracted, finalEvent);\n      changeResponder(null);\n    }\n\n    return extracted;\n  },\n\n  GlobalResponderHandler: null,\n\n  injection: {\n    /**\n     * @param {{onChange: (ReactID, ReactID) => void} GlobalResponderHandler\n     * Object that handles any change in responder. Use this to inject\n     * integration with an existing touch handling system etc.\n     */\n    injectGlobalResponderHandler(GlobalResponderHandler) {\n      ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;\n    },\n  },\n};\n\nexport default ResponderEventPlugin;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {DispatchConfig} from './ReactSyntheticEventType';\nimport type {\n  AnyNativeEvent,\n  PluginName,\n  LegacyPluginModule,\n} from './PluginModuleType';\n\ntype NamesToPlugins = {\n  [key: PluginName]: LegacyPluginModule<AnyNativeEvent>,\n  ...,\n};\ntype EventPluginOrder = null | Array<PluginName>;\n\n/**\n * Injectable ordering of event plugins.\n */\nlet eventPluginOrder: EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nconst namesToPlugins: NamesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering(): void {\n  if (!eventPluginOrder) {\n    // Wait until an `eventPluginOrder` is injected.\n    return;\n  }\n  for (const pluginName in namesToPlugins) {\n    const pluginModule = namesToPlugins[pluginName];\n    const pluginIndex = eventPluginOrder.indexOf(pluginName);\n\n    if (pluginIndex <= -1) {\n      throw new Error(\n        'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +\n          `the plugin ordering, \\`${pluginName}\\`.`,\n      );\n    }\n\n    if (plugins[pluginIndex]) {\n      continue;\n    }\n\n    if (!pluginModule.extractEvents) {\n      throw new Error(\n        'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +\n          `method, but \\`${pluginName}\\` does not.`,\n      );\n    }\n\n    plugins[pluginIndex] = pluginModule;\n    const publishedEvents = pluginModule.eventTypes;\n    for (const eventName in publishedEvents) {\n      if (\n        !publishEventForPlugin(\n          publishedEvents[eventName],\n          pluginModule,\n          eventName,\n        )\n      ) {\n        throw new Error(\n          `EventPluginRegistry: Failed to publish event \\`${eventName}\\` for plugin \\`${pluginName}\\`.`,\n        );\n      }\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(\n  dispatchConfig: DispatchConfig,\n  pluginModule: LegacyPluginModule<AnyNativeEvent>,\n  eventName: string,\n): boolean {\n  if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n    throw new Error(\n      'EventPluginRegistry: More than one plugin attempted to publish the same ' +\n        `event name, \\`${eventName}\\`.`,\n    );\n  }\n\n  eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  const phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (const phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        const phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(\n          phasedRegistrationName,\n          pluginModule,\n          eventName,\n        );\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(\n      dispatchConfig.registrationName,\n      pluginModule,\n      eventName,\n    );\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(\n  registrationName: string,\n  pluginModule: LegacyPluginModule<AnyNativeEvent>,\n  eventName: string,\n): void {\n  if (registrationNameModules[registrationName]) {\n    throw new Error(\n      'EventPluginRegistry: More than one plugin attempted to publish the same ' +\n        `registration name, \\`${registrationName}\\`.`,\n    );\n  }\n\n  registrationNameModules[registrationName] = pluginModule;\n  registrationNameDependencies[registrationName] =\n    pluginModule.eventTypes[eventName].dependencies;\n\n  if (__DEV__) {\n    const lowerCasedName = registrationName.toLowerCase();\n    possibleRegistrationNames[lowerCasedName] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n */\n\n/**\n * Ordered list of injected plugins.\n */\nexport const plugins = [];\n\n/**\n * Mapping from event name to dispatch config\n */\nexport const eventNameDispatchConfigs = {};\n\n/**\n * Mapping from registration name to plugin module\n */\nexport const registrationNameModules = {};\n\n/**\n * Mapping from registration name to event name\n */\nexport const registrationNameDependencies = {};\n\n/**\n * Mapping from lowercase registration names to the properly cased version,\n * used to warn in the case of missing event handlers. Available\n * only in __DEV__.\n * @type {Object}\n */\nexport const possibleRegistrationNames = __DEV__ ? {} : (null: any);\n// Trust the developer to only use possibleRegistrationNames in __DEV__\n\n/**\n * Injects an ordering of plugins (by plugin name). This allows the ordering\n * to be decoupled from injection of the actual plugins so that ordering is\n * always deterministic regardless of packaging, on-the-fly injection, etc.\n *\n * @param {array} InjectedEventPluginOrder\n * @internal\n */\nexport function injectEventPluginOrder(\n  injectedEventPluginOrder: EventPluginOrder,\n): void {\n  if (eventPluginOrder) {\n    throw new Error(\n      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +\n        'once. You are likely trying to load more than one copy of React.',\n    );\n  }\n\n  // Clone the ordering so it cannot be dynamically mutated.\n  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n  recomputePluginOrdering();\n}\n\n/**\n * Injects plugins to be used by plugin event system. The plugin names must be\n * in the ordering injected by `injectEventPluginOrder`.\n *\n * Plugins can be injected as part of page initialization or on-the-fly.\n *\n * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n * @internal\n */\nexport function injectEventPluginsByName(\n  injectedNamesToPlugins: NamesToPlugins,\n): void {\n  let isOrderingDirty = false;\n  for (const pluginName in injectedNamesToPlugins) {\n    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n      continue;\n    }\n    const pluginModule = injectedNamesToPlugins[pluginName];\n    if (\n      !namesToPlugins.hasOwnProperty(pluginName) ||\n      namesToPlugins[pluginName] !== pluginModule\n    ) {\n      if (namesToPlugins[pluginName]) {\n        throw new Error(\n          'EventPluginRegistry: Cannot inject two different event plugins ' +\n            `using the same name, \\`${pluginName}\\`.`,\n        );\n      }\n\n      namesToPlugins[pluginName] = pluginModule;\n      isOrderingDirty = true;\n    }\n  }\n  if (isOrderingDirty) {\n    recomputePluginOrdering();\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {PropagationPhases} from './legacy-events/PropagationPhases';\n\nimport {getFiberCurrentPropsFromNode} from './legacy-events/EventPluginUtils';\nimport {CustomEvent} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\n\n/**\n * Get a list of listeners for a specific event, in-order.\n * For React Native we treat the props-based function handlers\n * as the first-class citizens, and they are always executed first\n * for both capture and bubbling phase.\n *\n * We need \"phase\" propagated to this point to support the HostComponent\n * EventEmitter API, which does not mutate the name of the handler based\n * on phase (whereas prop handlers are registered as `onMyEvent` and `onMyEvent_Capture`).\n *\n * Native system events emitted into React Native\n * will be emitted both to the prop handler function and to imperative event\n * listeners.\n *\n * This will either return null, a single Function without an array, or\n * an array of 2+ items.\n */\nexport default function getListeners(\n  inst: Fiber,\n  registrationName: string,\n  phase: PropagationPhases,\n  dispatchToImperativeListeners: boolean,\n): null | Function | Array<Function> {\n  const stateNode = inst.stateNode;\n\n  if (stateNode === null) {\n    return null;\n  }\n\n  // If null: Work in progress (ex: onload events in incremental mode).\n  const props = getFiberCurrentPropsFromNode(stateNode);\n  if (props === null) {\n    // Work in progress.\n    return null;\n  }\n\n  const listener = props[registrationName];\n\n  if (listener && typeof listener !== 'function') {\n    throw new Error(\n      `Expected \\`${registrationName}\\` listener to be a function, instead got a value of \\`${typeof listener}\\` type.`,\n    );\n  }\n\n  // If there are no imperative listeners, early exit.\n  if (\n    !(\n      dispatchToImperativeListeners &&\n      stateNode.canonical &&\n      stateNode.canonical._eventListeners\n    )\n  ) {\n    return listener;\n  }\n\n  // Below this is the de-optimized path.\n  // If you are using _eventListeners, we do not (yet)\n  // expect this to be as performant as the props-only path.\n  // If/when this becomes a bottleneck, it can be refactored\n  // to avoid unnecessary closures and array allocations.\n  //\n  // Previously, there was only one possible listener for an event:\n  // the onEventName property in props.\n  // Now, it is also possible to have N listeners\n  // for a specific event on a node. Thus, we accumulate all of the listeners,\n  // including the props listener, and return a function that calls them all in\n  // order, starting with the handler prop and then the listeners in order.\n  // We return either a non-empty array or null.\n  const listeners = [];\n  if (listener) {\n    listeners.push(listener);\n  }\n\n  // TODO: for now, all of these events get an `rn:` prefix to enforce\n  // that the user knows they're only getting non-W3C-compliant events\n  // through this imperative event API.\n  // Events might not necessarily be noncompliant, but we currently have\n  // no verification that /any/ events are compliant.\n  // Thus, we prefix to ensure no collision with W3C event names.\n  const requestedPhaseIsCapture = phase === 'captured';\n  const mangledImperativeRegistrationName = requestedPhaseIsCapture\n    ? 'rn:' + registrationName.replace(/Capture$/, '')\n    : 'rn:' + registrationName;\n\n  // Get imperative event listeners for this event\n  if (\n    stateNode.canonical._eventListeners[mangledImperativeRegistrationName] &&\n    stateNode.canonical._eventListeners[mangledImperativeRegistrationName]\n      .length > 0\n  ) {\n    const eventListeners =\n      stateNode.canonical._eventListeners[mangledImperativeRegistrationName];\n\n    eventListeners.forEach(listenerObj => {\n      // Make sure phase of listener matches requested phase\n      const isCaptureEvent =\n        listenerObj.options.capture != null && listenerObj.options.capture;\n      if (isCaptureEvent !== requestedPhaseIsCapture) {\n        return;\n      }\n\n      // For now (this is an area of future optimization) we must wrap\n      // all imperative event listeners in a function to unwrap the SyntheticEvent\n      // and pass them an Event.\n      // When this API is more stable and used more frequently, we can revisit.\n      const listenerFnWrapper = function(syntheticEvent, ...args) {\n        const eventInst = new CustomEvent(mangledImperativeRegistrationName, {\n          detail: syntheticEvent.nativeEvent,\n        });\n        eventInst.isTrusted = true;\n        // setSyntheticEvent is present on the React Native Event shim.\n        // It is used to forward method calls on Event to the underlying SyntheticEvent.\n        // $FlowFixMe\n        eventInst.setSyntheticEvent(syntheticEvent);\n\n        listenerObj.listener(eventInst, ...args);\n      };\n\n      // Only call once?\n      // If so, we ensure that it's only called once by setting a flag\n      // and by removing it from eventListeners once it is called (but only\n      // when it's actually been executed).\n      if (listenerObj.options.once) {\n        listeners.push(function(...args) {\n          // Remove from the event listener once it's been called\n          stateNode.canonical.removeEventListener_unstable(\n            mangledImperativeRegistrationName,\n            listenerObj.listener,\n            listenerObj.capture,\n          );\n\n          // Guard against function being called more than once in\n          // case there are somehow multiple in-flight references to\n          // it being processed\n          if (!listenerObj.invalidated) {\n            listenerObj.invalidated = true;\n            listenerObj.listener(...args);\n          }\n        });\n      } else {\n        listeners.push(listenerFnWrapper);\n      }\n    });\n  }\n\n  if (listeners.length === 0) {\n    return null;\n  }\n  if (listeners.length === 1) {\n    return listeners[0];\n  }\n\n  return listeners;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {AnyNativeEvent} from './legacy-events/PluginModuleType';\nimport type {TopLevelType} from './legacy-events/TopLevelEventTypes';\nimport SyntheticEvent from './legacy-events/SyntheticEvent';\nimport type {PropagationPhases} from './legacy-events/PropagationPhases';\n\n// Module provided by RN:\nimport {ReactNativeViewConfigRegistry} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\nimport accumulateInto from './legacy-events/accumulateInto';\nimport getListeners from './ReactNativeGetListeners';\nimport forEachAccumulated from './legacy-events/forEachAccumulated';\nimport {HostComponent} from 'react-reconciler/src/ReactWorkTags';\nimport isArray from 'shared/isArray';\n\nconst {\n  customBubblingEventTypes,\n  customDirectEventTypes,\n} = ReactNativeViewConfigRegistry;\n\n// Start of inline: the below functions were inlined from\n// EventPropagator.js, as they deviated from ReactDOM's newer\n// implementations.\nfunction listenersAtPhase(inst, event, propagationPhase: PropagationPhases) {\n  const registrationName =\n    event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListeners(inst, registrationName, propagationPhase, true);\n}\n\nfunction accumulateListenersAndInstances(inst, event, listeners) {\n  const listenersLength = listeners\n    ? isArray(listeners)\n      ? listeners.length\n      : 1\n    : 0;\n  if (listenersLength > 0) {\n    event._dispatchListeners = accumulateInto(\n      event._dispatchListeners,\n      listeners,\n    );\n\n    // Avoid allocating additional arrays here\n    if (event._dispatchInstances == null && listenersLength === 1) {\n      event._dispatchInstances = inst;\n    } else {\n      event._dispatchInstances = event._dispatchInstances || [];\n      if (!isArray(event._dispatchInstances)) {\n        event._dispatchInstances = [event._dispatchInstances];\n      }\n      for (let i = 0; i < listenersLength; i++) {\n        event._dispatchInstances.push(inst);\n      }\n    }\n  }\n}\n\nfunction accumulateDirectionalDispatches(inst, phase, event) {\n  if (__DEV__) {\n    if (!inst) {\n      console.error('Dispatching inst must not be null');\n    }\n  }\n  const listeners = listenersAtPhase(inst, event, phase);\n  accumulateListenersAndInstances(inst, event, listeners);\n}\n\nfunction getParent(inst) {\n  do {\n    inst = inst.return;\n    // TODO: If this is a HostRoot we might want to bail out.\n    // That is depending on if we want nested subtrees (layers) to bubble\n    // events to their parent. We could also go through parentNode on the\n    // host node but that wouldn't work for React Native and doesn't let us\n    // do the portal feature.\n  } while (inst && inst.tag !== HostComponent);\n  if (inst) {\n    return inst;\n  }\n  return null;\n}\n\n/**\n * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n */\nexport function traverseTwoPhase(\n  inst: Object,\n  fn: Function,\n  arg: Function,\n  skipBubbling: boolean,\n) {\n  const path = [];\n  while (inst) {\n    path.push(inst);\n    inst = getParent(inst);\n  }\n  let i;\n  for (i = path.length; i-- > 0; ) {\n    fn(path[i], 'captured', arg);\n  }\n  if (skipBubbling) {\n    // Dispatch on target only\n    fn(path[0], 'bubbled', arg);\n  } else {\n    for (i = 0; i < path.length; i++) {\n      fn(path[i], 'bubbled', arg);\n    }\n  }\n}\n\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    traverseTwoPhase(\n      event._targetInst,\n      accumulateDirectionalDispatches,\n      event,\n      false,\n    );\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateCapturePhaseDispatches(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    traverseTwoPhase(\n      event._targetInst,\n      accumulateDirectionalDispatches,\n      event,\n      true,\n    );\n  }\n}\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(\n  inst: Object,\n  ignoredDirection: ?boolean,\n  event: Object,\n): void {\n  if (inst && event && event.dispatchConfig.registrationName) {\n    const registrationName = event.dispatchConfig.registrationName;\n    const listeners = getListeners(inst, registrationName, 'bubbled', false);\n    accumulateListenersAndInstances(inst, event, listeners);\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event: Object) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event._targetInst, null, event);\n  }\n}\n\nfunction accumulateDirectDispatches(events: ?(Array<Object> | Object)) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n// End of inline\n\nconst ReactNativeBridgeEventPlugin = {\n  eventTypes: {},\n\n  extractEvents: function(\n    topLevelType: TopLevelType,\n    targetInst: null | Object,\n    nativeEvent: AnyNativeEvent,\n    nativeEventTarget: null | Object,\n  ): ?Object {\n    if (targetInst == null) {\n      // Probably a node belonging to another renderer's tree.\n      return null;\n    }\n    const bubbleDispatchConfig = customBubblingEventTypes[topLevelType];\n    const directDispatchConfig = customDirectEventTypes[topLevelType];\n\n    if (!bubbleDispatchConfig && !directDispatchConfig) {\n      throw new Error(\n        // $FlowFixMe - Flow doesn't like this string coercion because DOMTopLevelEventType is opaque\n        `Unsupported top level event type \"${topLevelType}\" dispatched`,\n      );\n    }\n\n    const event = SyntheticEvent.getPooled(\n      bubbleDispatchConfig || directDispatchConfig,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget,\n    );\n    if (bubbleDispatchConfig) {\n      const skipBubbling =\n        event != null &&\n        event.dispatchConfig.phasedRegistrationNames != null &&\n        event.dispatchConfig.phasedRegistrationNames.skipBubbling;\n      if (skipBubbling) {\n        accumulateCapturePhaseDispatches(event);\n      } else {\n        accumulateTwoPhaseDispatches(event);\n      }\n    } else if (directDispatchConfig) {\n      accumulateDirectDispatches(event);\n    } else {\n      return null;\n    }\n    return event;\n  },\n};\n\nexport default ReactNativeBridgeEventPlugin;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst ReactNativeEventPluginOrder = [\n  'ResponderEventPlugin',\n  'ReactNativeBridgeEventPlugin',\n];\n\nexport default ReactNativeEventPluginOrder;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * Make sure essential globals are available and are patched correctly. Please don't remove this\n * line. Bundles created by react-packager `require` it before executing any application code. This\n * ensures it exists in the dependency graph and can be `require`d.\n * TODO: require this in packager, not in React #10932517\n */\n// Module provided by RN:\nimport 'react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore';\n\nimport ResponderEventPlugin from './legacy-events/ResponderEventPlugin';\nimport {\n  injectEventPluginOrder,\n  injectEventPluginsByName,\n} from './legacy-events/EventPluginRegistry';\n\nimport ReactNativeBridgeEventPlugin from './ReactNativeBridgeEventPlugin';\nimport ReactNativeEventPluginOrder from './ReactNativeEventPluginOrder';\n\n/**\n * Inject module for resolving DOM hierarchy and plugin ordering.\n */\ninjectEventPluginOrder(ReactNativeEventPluginOrder);\n\n/**\n * Some important event plugins included by default (without having to require\n * them).\n */\ninjectEventPluginsByName({\n  ResponderEventPlugin: ResponderEventPlugin,\n  ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,\n});\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction getInstanceFromInstance(instanceHandle) {\n  return instanceHandle;\n}\n\nfunction getTagFromInstance(inst) {\n  const nativeInstance = inst.stateNode.canonical;\n\n  if (!nativeInstance._nativeTag) {\n    throw new Error('All native instances should have a tag.');\n  }\n\n  return nativeInstance;\n}\n\nexport {\n  getInstanceFromInstance as getClosestInstanceFromNode,\n  getInstanceFromInstance as getInstanceFromNode,\n  getTagFromInstance as getNodeFromInstance,\n};\n\nexport function getFiberCurrentPropsFromNode(inst) {\n  return inst.canonical.currentProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Module provided by RN:\nimport {UIManager} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\n\nconst ReactFabricGlobalResponderHandler = {\n  onChange: function(from: any, to: any, blockNativeResponder: boolean) {\n    const fromOrTo = from || to;\n    const fromOrToStateNode = fromOrTo && fromOrTo.stateNode;\n    const isFabric = !!(\n      fromOrToStateNode && fromOrToStateNode.canonical._internalInstanceHandle\n    );\n\n    if (isFabric) {\n      if (from) {\n        // equivalent to clearJSResponder\n        nativeFabricUIManager.setIsJSResponder(\n          from.stateNode.node,\n          false,\n          blockNativeResponder || false,\n        );\n      }\n\n      if (to) {\n        // equivalent to setJSResponder\n        nativeFabricUIManager.setIsJSResponder(\n          to.stateNode.node,\n          true,\n          blockNativeResponder || false,\n        );\n      }\n    } else {\n      if (to !== null) {\n        const tag = to.stateNode.canonical._nativeTag;\n        UIManager.setJSResponder(tag, blockNativeResponder);\n      } else {\n        UIManager.clearJSResponder();\n      }\n    }\n  },\n};\n\nexport default ReactFabricGlobalResponderHandler;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport './ReactNativeInjectionShared';\n\nimport {\n  getFiberCurrentPropsFromNode,\n  getInstanceFromNode,\n  getNodeFromInstance,\n} from './ReactFabricComponentTree';\nimport {setComponentTree} from './legacy-events/EventPluginUtils';\nimport ReactFabricGlobalResponderHandler from './ReactFabricGlobalResponderHandler';\nimport ResponderEventPlugin from './legacy-events/ResponderEventPlugin';\n\nsetComponentTree(\n  getFiberCurrentPropsFromNode,\n  getInstanceFromNode,\n  getNodeFromInstance,\n);\n\nResponderEventPlugin.injection.injectGlobalResponderHandler(\n  ReactFabricGlobalResponderHandler,\n);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\nimport typeof * as ExportsType from './ReactFeatureFlags.native-oss';\n\nexport const debugRenderPhaseSideEffectsForStrictMode = false;\nexport const enableDebugTracing = false;\nexport const enableSchedulingProfiler = false;\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = __DEV__;\nexport const warnAboutDeprecatedLifecycles = true;\nexport const enableProfilerTimer = __PROFILE__;\nexport const enableProfilerCommitHooks = __PROFILE__;\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\nexport const enableProfilerNestedUpdateScheduledHook = false;\nexport const enableUpdaterTracking = __PROFILE__;\nexport const enableCache = false;\nexport const enableCacheElement = false;\nexport const disableJavaScriptURLs = false;\nexport const disableCommentsAsDOMContainers = true;\nexport const disableInputAttributeSyncing = false;\nexport const enableSchedulerDebugging = false;\nexport const enableScopeAPI = false;\nexport const enableCreateEventHandleAPI = false;\nexport const enableSuspenseCallback = false;\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\nexport const warnAboutStringRefs = false;\nexport const disableLegacyContext = false;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\nexport const enableTrustedTypesIntegration = false;\nexport const disableTextareaChildren = false;\nexport const disableModulePatternComponents = false;\nexport const warnAboutSpreadingKeyToJSX = false;\nexport const enableSuspenseAvoidThisFallback = false;\nexport const enableSuspenseAvoidThisFallbackFizz = false;\nexport const enableCPUSuspense = false;\nexport const enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay = true;\nexport const enableClientRenderFallbackOnTextMismatch = true;\nexport const enableComponentStackLocations = false;\nexport const enableLegacyFBSupport = false;\nexport const enableFilterEmptyStringAttributesDOM = false;\nexport const disableNativeComponentFrames = false;\nexport const skipUnmountedBoundaries = false;\nexport const deletedTreeCleanUpLevel = 3;\nexport const enableGetInspectorDataForInstanceInProduction = false;\nexport const enableNewReconciler = false;\nexport const deferRenderPhaseUpdateToNextBatch = false;\n\nexport const enableStrictEffects = false;\nexport const createRootStrictEffectsByDefault = false;\nexport const enableUseRefAccessWarning = false;\n\nexport const disableSchedulerTimeoutInWorkLoop = false;\nexport const enableLazyContextPropagation = false;\nexport const enableLegacyHidden = false;\nexport const enableSyncDefaultUpdates = true;\nexport const allowConcurrentByDefault = false;\nexport const enableCustomElementPropertySupport = false;\n\nexport const consoleManagedByDevToolsDuringStrictMode = false;\nexport const enableServerContext = false;\nexport const enableUseMutableSource = false;\n\nexport const enableTransitionTracing = false;\nexport const enableSymbolFallbackForWWW = false;\n\n// Flow magic to verify the exports of this file match the original version.\n// eslint-disable-next-line no-unused-vars\ntype Check<_X, Y: _X, X: Y = _X> = null;\n// eslint-disable-next-line no-unused-expressions\n(null: Check<ExportsType, FeatureFlagsType>);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types.\nexport const REACT_ELEMENT_TYPE = Symbol.for('react.element');\nexport const REACT_PORTAL_TYPE = Symbol.for('react.portal');\nexport const REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nexport const REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nexport const REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nexport const REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nexport const REACT_CONTEXT_TYPE = Symbol.for('react.context');\nexport const REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');\nexport const REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nexport const REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nexport const REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nexport const REACT_MEMO_TYPE = Symbol.for('react.memo');\nexport const REACT_LAZY_TYPE = Symbol.for('react.lazy');\nexport const REACT_SCOPE_TYPE = Symbol.for('react.scope');\nexport const REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\n  'react.debug_trace_mode',\n);\nexport const REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nexport const REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nexport const REACT_CACHE_TYPE = Symbol.for('react.cache');\nexport const REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nexport const REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\n  'react.default_value',\n);\n\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n  REACT_SERVER_CONTEXT_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {\n  enableServerContext,\n  enableTransitionTracing,\n  enableCache,\n} from './ReactFeatureFlags';\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const displayName = (outerType: any).displayName;\n  if (displayName) {\n    return displayName;\n  }\n  const functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName;\n}\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\n// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\nexport default function getComponentNameFromType(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentNameFromType(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n    case REACT_CACHE_TYPE:\n      if (enableCache) {\n        return 'Cache';\n      }\n    // eslint-disable-next-line no-fallthrough\n    case REACT_TRACING_MARKER_TYPE:\n      if (enableTransitionTracing) {\n        return 'TracingMarker';\n      }\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        const outerName = (type: any).displayName || null;\n        if (outerName !== null) {\n          return outerName;\n        }\n        return getComponentNameFromType(type.type) || 'Memo';\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentNameFromType(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n      case REACT_SERVER_CONTEXT_TYPE:\n        if (enableServerContext) {\n          const context2 = ((type: any): ReactContext<any>);\n          return (context2.displayName || context2._globalName) + '.Provider';\n        }\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {enableLegacyHidden} from 'shared/ReactFeatureFlags';\n\nimport {\n  FunctionComponent,\n  ClassComponent,\n  IndeterminateComponent,\n  HostRoot,\n  HostPortal,\n  HostComponent,\n  HostText,\n  Fragment,\n  Mode,\n  ContextConsumer,\n  ContextProvider,\n  ForwardRef,\n  Profiler,\n  SuspenseComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  DehydratedFragment,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nexport default function getComponentNameFromFiber(fiber: Fiber): string | null {\n  const {tag, type} = fiber;\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n    case ContextConsumer:\n      const context: ReactContext<any> = (type: any);\n      return getContextName(context) + '.Consumer';\n    case ContextProvider:\n      const provider: ReactProviderType<any> = (type: any);\n      return getContextName(provider._context) + '.Provider';\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n    case Fragment:\n      return 'Fragment';\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n    case HostPortal:\n      return 'Portal';\n    case HostRoot:\n      return 'Root';\n    case HostText:\n      return 'Text';\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n      return 'Mode';\n    case OffscreenComponent:\n      return 'Offscreen';\n    case Profiler:\n      return 'Profiler';\n    case ScopeComponent:\n      return 'Scope';\n    case SuspenseComponent:\n      return 'Suspense';\n    case SuspenseListComponent:\n      return 'SuspenseList';\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    // The display name for this tags come from the user-provided type:\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return (type: any).displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      break;\n    case LegacyHiddenComponent:\n      if (enableLegacyHidden) {\n        return 'LegacyHidden';\n      }\n  }\n\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b00000000000000000000000000;\nexport const PerformedWork = /*                */ 0b00000000000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b00000000000000000000000010;\nexport const Update = /*                       */ 0b00000000000000000000000100;\nexport const Deletion = /*                     */ 0b00000000000000000000001000;\nexport const ChildDeletion = /*                */ 0b00000000000000000000010000;\nexport const ContentReset = /*                 */ 0b00000000000000000000100000;\nexport const Callback = /*                     */ 0b00000000000000000001000000;\nexport const DidCapture = /*                   */ 0b00000000000000000010000000;\nexport const ForceClientRender = /*            */ 0b00000000000000000100000000;\nexport const Ref = /*                          */ 0b00000000000000001000000000;\nexport const Snapshot = /*                     */ 0b00000000000000010000000000;\nexport const Passive = /*                      */ 0b00000000000000100000000000;\nexport const Hydrating = /*                    */ 0b00000000000001000000000000;\nexport const Visibility = /*                   */ 0b00000000000010000000000000;\nexport const StoreConsistency = /*             */ 0b00000000000100000000000000;\n\nexport const LifecycleEffectMask =\n  Passive | Update | Callback | Ref | Snapshot | StoreConsistency;\n\n// Union of all commit flags (flags with the lifetime of a particular commit)\nexport const HostEffectMask = /*               */ 0b00000000000111111111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b00000000001000000000000000;\nexport const ShouldCapture = /*                */ 0b00000000010000000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b00000000100000000000000000;\nexport const DidPropagateContext = /*          */ 0b00000001000000000000000000;\nexport const NeedsPropagation = /*             */ 0b00000010000000000000000000;\nexport const Forked = /*                       */ 0b00000100000000000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const RefStatic = /*                    */ 0b00001000000000000000000000;\nexport const LayoutStatic = /*                 */ 0b00010000000000000000000000;\nexport const PassiveStatic = /*                */ 0b00100000000000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b01000000000000000000000000;\nexport const MountPassiveDev = /*              */ 0b10000000000000000000000000;\n\n// Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nexport const BeforeMutationMask =\n  // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n  // flag logic (see #20043)\n  Update |\n  Snapshot |\n  (enableCreateEventHandleAPI\n    ? // createEventHandle needs to visit deleted and hidden trees to\n      // fire beforeblur\n      // TODO: Only need to visit Deletions during BeforeMutation phase if an\n      // element is focused.\n      ChildDeletion | Visibility\n    : 0);\n\nexport const MutationMask =\n  Placement |\n  Update |\n  ChildDeletion |\n  ContentReset |\n  Ref |\n  Hydrating |\n  Visibility;\nexport const LayoutMask = Update | Callback | Ref | Visibility;\n\n// TODO: Split into PassiveMountMask and PassiveUnmountMask\nexport const PassiveMask = Passive | Visibility | ChildDeletion;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromFiber(ownerFiber) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw new Error(\n            'Child was not found in either parent set. This indicates a bug ' +\n              'in React related to the return pointer. Please file an issue.',\n          );\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw new Error(\n        \"Return fibers should always be each others' alternates. \" +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  if (a.tag !== HostRoot) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    const match = findCurrentHostFiberImpl(child);\n    if (match !== null) {\n      return match;\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberWithNoPortalsImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      const match = findCurrentHostFiberWithNoPortalsImpl(child);\n      if (match !== null) {\n        return match;\n      }\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * In the future, we should cleanup callbacks by cancelling them instead of\n * using this.\n */\nexport function mountSafeCallback_NOT_REALLY_SAFE(\n  context: any,\n  callback: ?Function,\n): any {\n  return function() {\n    if (!callback) {\n      return undefined;\n    }\n    // This protects against createClass() components.\n    // We don't know if there is code depending on it.\n    // We intentionally don't use isMounted() because even accessing\n    // isMounted property on a React ES6 class will trigger a warning.\n    if (typeof context.__isMounted === 'boolean') {\n      if (!context.__isMounted) {\n        return undefined;\n      }\n    }\n\n    // FIXME: there used to be other branches that protected\n    // against unmounted host components. But RN host components don't\n    // define isMounted() anymore, so those checks didn't do anything.\n\n    // They caused false positive warning noise so we removed them:\n    // https://github.com/facebook/react-native/issues/18868#issuecomment-413579095\n\n    // However, this means that the callback is NOT guaranteed to be safe\n    // for host components. The solution we should implement is to make\n    // UIManager.measure() and similar calls truly cancelable. Then we\n    // can change our own code calling them to cancel when something unmounts.\n\n    return callback.apply(context, arguments);\n  };\n}\n\nexport function throwOnStylesProp(component: any, props: any) {\n  if (props.styles !== undefined) {\n    const owner = component._owner || null;\n    const name = component.constructor.displayName;\n    let msg =\n      '`styles` is not a supported property of `' +\n      name +\n      '`, did ' +\n      'you mean `style` (singular)?';\n    if (owner && owner.constructor && owner.constructor.displayName) {\n      msg +=\n        '\\n\\nCheck the `' +\n        owner.constructor.displayName +\n        '` parent ' +\n        ' component.';\n    }\n    throw new Error(msg);\n  }\n}\n\nexport function warnForStyleProps(props: any, validAttributes: any) {\n  if (__DEV__) {\n    for (const key in validAttributes.style) {\n      if (!(validAttributes[key] || props[key] === undefined)) {\n        console.error(\n          'You are setting the style `{ %s' +\n            ': ... }` as a prop. You ' +\n            'should nest it in a style object. ' +\n            'E.g. `{ style: { %s' +\n            ': ... } }`',\n          key,\n          key,\n        );\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Modules provided by RN:\nimport {\n  deepDiffer,\n  flattenStyle,\n} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\nimport isArray from 'shared/isArray';\n\nimport type {AttributeConfiguration} from './ReactNativeTypes';\n\nconst emptyObject = {};\n\n/**\n * Create a payload that contains all the updates between two sets of props.\n *\n * These helpers are all encapsulated into a single module, because they use\n * mutation as a performance optimization which leads to subtle shared\n * dependencies between the code paths. To avoid this mutable state leaking\n * across modules, I've kept them isolated to this module.\n */\n\ntype NestedNode = Array<NestedNode> | Object;\n\n// Tracks removed keys\nlet removedKeys = null;\nlet removedKeyCount = 0;\n\nconst deepDifferOptions = {\n  unsafelyIgnoreFunctions: true,\n};\n\nfunction defaultDiffer(prevProp: mixed, nextProp: mixed): boolean {\n  if (typeof nextProp !== 'object' || nextProp === null) {\n    // Scalars have already been checked for equality\n    return true;\n  } else {\n    // For objects and arrays, the default diffing algorithm is a deep compare\n    return deepDiffer(prevProp, nextProp, deepDifferOptions);\n  }\n}\n\nfunction restoreDeletedValuesInNestedArray(\n  updatePayload: Object,\n  node: NestedNode,\n  validAttributes: AttributeConfiguration,\n) {\n  if (isArray(node)) {\n    let i = node.length;\n    while (i-- && removedKeyCount > 0) {\n      restoreDeletedValuesInNestedArray(\n        updatePayload,\n        node[i],\n        validAttributes,\n      );\n    }\n  } else if (node && removedKeyCount > 0) {\n    const obj = node;\n    for (const propKey in removedKeys) {\n      if (!removedKeys[propKey]) {\n        continue;\n      }\n      let nextProp = obj[propKey];\n      if (nextProp === undefined) {\n        continue;\n      }\n\n      const attributeConfig = validAttributes[propKey];\n      if (!attributeConfig) {\n        continue; // not a valid native prop\n      }\n\n      if (typeof nextProp === 'function') {\n        nextProp = true;\n      }\n      if (typeof nextProp === 'undefined') {\n        nextProp = null;\n      }\n\n      if (typeof attributeConfig !== 'object') {\n        // case: !Object is the default case\n        updatePayload[propKey] = nextProp;\n      } else if (\n        typeof attributeConfig.diff === 'function' ||\n        typeof attributeConfig.process === 'function'\n      ) {\n        // case: CustomAttributeConfiguration\n        const nextValue =\n          typeof attributeConfig.process === 'function'\n            ? attributeConfig.process(nextProp)\n            : nextProp;\n        updatePayload[propKey] = nextValue;\n      }\n      removedKeys[propKey] = false;\n      removedKeyCount--;\n    }\n  }\n}\n\nfunction diffNestedArrayProperty(\n  updatePayload: null | Object,\n  prevArray: Array<NestedNode>,\n  nextArray: Array<NestedNode>,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  const minLength =\n    prevArray.length < nextArray.length ? prevArray.length : nextArray.length;\n  let i;\n  for (i = 0; i < minLength; i++) {\n    // Diff any items in the array in the forward direction. Repeated keys\n    // will be overwritten by later values.\n    updatePayload = diffNestedProperty(\n      updatePayload,\n      prevArray[i],\n      nextArray[i],\n      validAttributes,\n    );\n  }\n  for (; i < prevArray.length; i++) {\n    // Clear out all remaining properties.\n    updatePayload = clearNestedProperty(\n      updatePayload,\n      prevArray[i],\n      validAttributes,\n    );\n  }\n  for (; i < nextArray.length; i++) {\n    // Add all remaining properties.\n    updatePayload = addNestedProperty(\n      updatePayload,\n      nextArray[i],\n      validAttributes,\n    );\n  }\n  return updatePayload;\n}\n\nfunction diffNestedProperty(\n  updatePayload: null | Object,\n  prevProp: NestedNode,\n  nextProp: NestedNode,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  if (!updatePayload && prevProp === nextProp) {\n    // If no properties have been added, then we can bail out quickly on object\n    // equality.\n    return updatePayload;\n  }\n\n  if (!prevProp || !nextProp) {\n    if (nextProp) {\n      return addNestedProperty(updatePayload, nextProp, validAttributes);\n    }\n    if (prevProp) {\n      return clearNestedProperty(updatePayload, prevProp, validAttributes);\n    }\n    return updatePayload;\n  }\n\n  if (!isArray(prevProp) && !isArray(nextProp)) {\n    // Both are leaves, we can diff the leaves.\n    return diffProperties(updatePayload, prevProp, nextProp, validAttributes);\n  }\n\n  if (isArray(prevProp) && isArray(nextProp)) {\n    // Both are arrays, we can diff the arrays.\n    return diffNestedArrayProperty(\n      updatePayload,\n      prevProp,\n      nextProp,\n      validAttributes,\n    );\n  }\n\n  if (isArray(prevProp)) {\n    return diffProperties(\n      updatePayload,\n      // $FlowFixMe - We know that this is always an object when the input is.\n      flattenStyle(prevProp),\n      // $FlowFixMe - We know that this isn't an array because of above flow.\n      nextProp,\n      validAttributes,\n    );\n  }\n\n  return diffProperties(\n    updatePayload,\n    prevProp,\n    // $FlowFixMe - We know that this is always an object when the input is.\n    flattenStyle(nextProp),\n    validAttributes,\n  );\n}\n\n/**\n * addNestedProperty takes a single set of props and valid attribute\n * attribute configurations. It processes each prop and adds it to the\n * updatePayload.\n */\nfunction addNestedProperty(\n  updatePayload: null | Object,\n  nextProp: NestedNode,\n  validAttributes: AttributeConfiguration,\n) {\n  if (!nextProp) {\n    return updatePayload;\n  }\n\n  if (!isArray(nextProp)) {\n    // Add each property of the leaf.\n    return addProperties(updatePayload, nextProp, validAttributes);\n  }\n\n  for (let i = 0; i < nextProp.length; i++) {\n    // Add all the properties of the array.\n    updatePayload = addNestedProperty(\n      updatePayload,\n      nextProp[i],\n      validAttributes,\n    );\n  }\n\n  return updatePayload;\n}\n\n/**\n * clearNestedProperty takes a single set of props and valid attributes. It\n * adds a null sentinel to the updatePayload, for each prop key.\n */\nfunction clearNestedProperty(\n  updatePayload: null | Object,\n  prevProp: NestedNode,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  if (!prevProp) {\n    return updatePayload;\n  }\n\n  if (!isArray(prevProp)) {\n    // Add each property of the leaf.\n    return clearProperties(updatePayload, prevProp, validAttributes);\n  }\n\n  for (let i = 0; i < prevProp.length; i++) {\n    // Add all the properties of the array.\n    updatePayload = clearNestedProperty(\n      updatePayload,\n      prevProp[i],\n      validAttributes,\n    );\n  }\n  return updatePayload;\n}\n\n/**\n * diffProperties takes two sets of props and a set of valid attributes\n * and write to updatePayload the values that changed or were deleted.\n * If no updatePayload is provided, a new one is created and returned if\n * anything changed.\n */\nfunction diffProperties(\n  updatePayload: null | Object,\n  prevProps: Object,\n  nextProps: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  let attributeConfig;\n  let nextProp;\n  let prevProp;\n\n  for (const propKey in nextProps) {\n    attributeConfig = validAttributes[propKey];\n    if (!attributeConfig) {\n      continue; // not a valid native prop\n    }\n\n    prevProp = prevProps[propKey];\n    nextProp = nextProps[propKey];\n\n    // functions are converted to booleans as markers that the associated\n    // events should be sent from native.\n    if (typeof nextProp === 'function') {\n      nextProp = (true: any);\n      // If nextProp is not a function, then don't bother changing prevProp\n      // since nextProp will win and go into the updatePayload regardless.\n      if (typeof prevProp === 'function') {\n        prevProp = (true: any);\n      }\n    }\n\n    // An explicit value of undefined is treated as a null because it overrides\n    // any other preceding value.\n    if (typeof nextProp === 'undefined') {\n      nextProp = (null: any);\n      if (typeof prevProp === 'undefined') {\n        prevProp = (null: any);\n      }\n    }\n\n    if (removedKeys) {\n      removedKeys[propKey] = false;\n    }\n\n    if (updatePayload && updatePayload[propKey] !== undefined) {\n      // Something else already triggered an update to this key because another\n      // value diffed. Since we're now later in the nested arrays our value is\n      // more important so we need to calculate it and override the existing\n      // value. It doesn't matter if nothing changed, we'll set it anyway.\n\n      // Pattern match on: attributeConfig\n      if (typeof attributeConfig !== 'object') {\n        // case: !Object is the default case\n        updatePayload[propKey] = nextProp;\n      } else if (\n        typeof attributeConfig.diff === 'function' ||\n        typeof attributeConfig.process === 'function'\n      ) {\n        // case: CustomAttributeConfiguration\n        const nextValue =\n          typeof attributeConfig.process === 'function'\n            ? attributeConfig.process(nextProp)\n            : nextProp;\n        updatePayload[propKey] = nextValue;\n      }\n      continue;\n    }\n\n    if (prevProp === nextProp) {\n      continue; // nothing changed\n    }\n\n    // Pattern match on: attributeConfig\n    if (typeof attributeConfig !== 'object') {\n      // case: !Object is the default case\n      if (defaultDiffer(prevProp, nextProp)) {\n        // a normal leaf has changed\n        (updatePayload || (updatePayload = {}))[propKey] = nextProp;\n      }\n    } else if (\n      typeof attributeConfig.diff === 'function' ||\n      typeof attributeConfig.process === 'function'\n    ) {\n      // case: CustomAttributeConfiguration\n      const shouldUpdate =\n        prevProp === undefined ||\n        (typeof attributeConfig.diff === 'function'\n          ? attributeConfig.diff(prevProp, nextProp)\n          : defaultDiffer(prevProp, nextProp));\n      if (shouldUpdate) {\n        const nextValue =\n          typeof attributeConfig.process === 'function'\n            ? attributeConfig.process(nextProp)\n            : nextProp;\n        (updatePayload || (updatePayload = {}))[propKey] = nextValue;\n      }\n    } else {\n      // default: fallthrough case when nested properties are defined\n      removedKeys = null;\n      removedKeyCount = 0;\n      // We think that attributeConfig is not CustomAttributeConfiguration at\n      // this point so we assume it must be AttributeConfiguration.\n      updatePayload = diffNestedProperty(\n        updatePayload,\n        prevProp,\n        nextProp,\n        ((attributeConfig: any): AttributeConfiguration),\n      );\n      if (removedKeyCount > 0 && updatePayload) {\n        restoreDeletedValuesInNestedArray(\n          updatePayload,\n          nextProp,\n          ((attributeConfig: any): AttributeConfiguration),\n        );\n        removedKeys = null;\n      }\n    }\n  }\n\n  // Also iterate through all the previous props to catch any that have been\n  // removed and make sure native gets the signal so it can reset them to the\n  // default.\n  for (const propKey in prevProps) {\n    if (nextProps[propKey] !== undefined) {\n      continue; // we've already covered this key in the previous pass\n    }\n    attributeConfig = validAttributes[propKey];\n    if (!attributeConfig) {\n      continue; // not a valid native prop\n    }\n\n    if (updatePayload && updatePayload[propKey] !== undefined) {\n      // This was already updated to a diff result earlier.\n      continue;\n    }\n\n    prevProp = prevProps[propKey];\n    if (prevProp === undefined) {\n      continue; // was already empty anyway\n    }\n    // Pattern match on: attributeConfig\n    if (\n      typeof attributeConfig !== 'object' ||\n      typeof attributeConfig.diff === 'function' ||\n      typeof attributeConfig.process === 'function'\n    ) {\n      // case: CustomAttributeConfiguration | !Object\n      // Flag the leaf property for removal by sending a sentinel.\n      (updatePayload || (updatePayload = {}))[propKey] = null;\n      if (!removedKeys) {\n        removedKeys = {};\n      }\n      if (!removedKeys[propKey]) {\n        removedKeys[propKey] = true;\n        removedKeyCount++;\n      }\n    } else {\n      // default:\n      // This is a nested attribute configuration where all the properties\n      // were removed so we need to go through and clear out all of them.\n      updatePayload = clearNestedProperty(\n        updatePayload,\n        prevProp,\n        ((attributeConfig: any): AttributeConfiguration),\n      );\n    }\n  }\n  return updatePayload;\n}\n\n/**\n * addProperties adds all the valid props to the payload after being processed.\n */\nfunction addProperties(\n  updatePayload: null | Object,\n  props: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  // TODO: Fast path\n  return diffProperties(updatePayload, emptyObject, props, validAttributes);\n}\n\n/**\n * clearProperties clears all the previous props by adding a null sentinel\n * to the payload for each valid key.\n */\nfunction clearProperties(\n  updatePayload: null | Object,\n  prevProps: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  // TODO: Fast path\n  return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);\n}\n\nexport function create(\n  props: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  return addProperties(\n    null, // updatePayload\n    props,\n    validAttributes,\n  );\n}\n\nexport function diff(\n  prevProps: Object,\n  nextProps: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  return diffProperties(\n    null, // updatePayload\n    prevProps,\n    nextProps,\n    validAttributes,\n  );\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// Used as a way to call batchedUpdates when we don't have a reference to\n// the renderer. Such as when we're dispatching events or if third party\n// libraries need to call batchedUpdates. Eventually, this API will go away when\n// everything is batched by default. We'll then have a similar API to opt-out of\n// scheduled work and instead do synchronous work.\n\n// Defaults\nlet batchedUpdatesImpl = function(fn, bookkeeping) {\n  return fn(bookkeeping);\n};\nlet discreteUpdatesImpl = function(fn, a, b, c, d) {\n  return fn(a, b, c, d);\n};\n\nlet isInsideEventHandler = false;\n\nexport function batchedUpdates(fn, bookkeeping) {\n  if (isInsideEventHandler) {\n    // If we are currently inside another batch, we need to wait until it\n    // fully completes before restoring state.\n    return fn(bookkeeping);\n  }\n  isInsideEventHandler = true;\n  try {\n    return batchedUpdatesImpl(fn, bookkeeping);\n  } finally {\n    isInsideEventHandler = false;\n  }\n}\n\nexport function discreteUpdates(fn, a, b, c, d) {\n  const prevIsInsideEventHandler = isInsideEventHandler;\n  isInsideEventHandler = true;\n  try {\n    return discreteUpdatesImpl(fn, a, b, c, d);\n  } finally {\n    isInsideEventHandler = prevIsInsideEventHandler;\n  }\n}\n\nexport function setBatchingImplementation(\n  _batchedUpdatesImpl,\n  _discreteUpdatesImpl,\n) {\n  batchedUpdatesImpl = _batchedUpdatesImpl;\n  discreteUpdatesImpl = _discreteUpdatesImpl;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * @flow\n */\n\nimport {rethrowCaughtError} from 'shared/ReactErrorUtils';\n\nimport type {ReactSyntheticEvent} from './ReactSyntheticEventType';\nimport accumulateInto from './accumulateInto';\nimport forEachAccumulated from './forEachAccumulated';\nimport {executeDispatchesInOrder} from './EventPluginUtils';\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nlet eventQueue: ?(Array<ReactSyntheticEvent> | ReactSyntheticEvent) = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\nconst executeDispatchesAndRelease = function(event: ReactSyntheticEvent) {\n  if (event) {\n    executeDispatchesInOrder(event);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nconst executeDispatchesAndReleaseTopLevel = function(e) {\n  return executeDispatchesAndRelease(e);\n};\n\nexport function runEventsInBatch(\n  events: Array<ReactSyntheticEvent> | ReactSyntheticEvent | null,\n) {\n  if (events !== null) {\n    eventQueue = accumulateInto(eventQueue, events);\n  }\n\n  // Set `eventQueue` to null before processing it so that we can tell if more\n  // events get enqueued while processing.\n  const processingEventQueue = eventQueue;\n  eventQueue = null;\n\n  if (!processingEventQueue) {\n    return;\n  }\n\n  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n\n  if (eventQueue) {\n    throw new Error(\n      'processEventQueue(): Additional events were enqueued while processing ' +\n        'an event queue. Support for this has not yet been implemented.',\n    );\n  }\n\n  // This would be a good time to rethrow if any of the event handlers threw.\n  rethrowCaughtError();\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {AnyNativeEvent} from './legacy-events/PluginModuleType';\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {LegacyPluginModule} from './legacy-events/PluginModuleType';\nimport type {ReactSyntheticEvent} from './legacy-events/ReactSyntheticEventType';\nimport type {TopLevelType} from './legacy-events/TopLevelEventTypes';\n\nimport {registrationNameModules} from './legacy-events/EventPluginRegistry';\nimport {batchedUpdates} from './legacy-events/ReactGenericBatching';\nimport accumulateInto from './legacy-events/accumulateInto';\n\nimport {plugins} from './legacy-events/EventPluginRegistry';\nimport getListeners from './ReactNativeGetListeners';\nimport {runEventsInBatch} from './legacy-events/EventBatching';\n\nimport {RawEventEmitter} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\n\nexport {getListeners, registrationNameModules as registrationNames};\n\n/**\n * Allows registered plugins an opportunity to extract events from top-level\n * native browser events.\n *\n * @return {*} An accumulation of synthetic events.\n * @internal\n */\nfunction extractPluginEvents(\n  topLevelType: TopLevelType,\n  targetInst: null | Fiber,\n  nativeEvent: AnyNativeEvent,\n  nativeEventTarget: null | EventTarget,\n): Array<ReactSyntheticEvent> | ReactSyntheticEvent | null {\n  let events = null;\n  const legacyPlugins = ((plugins: any): Array<LegacyPluginModule<Event>>);\n  for (let i = 0; i < legacyPlugins.length; i++) {\n    // Not every plugin in the ordering may be loaded at runtime.\n    const possiblePlugin: LegacyPluginModule<AnyNativeEvent> = legacyPlugins[i];\n    if (possiblePlugin) {\n      const extractedEvents = possiblePlugin.extractEvents(\n        topLevelType,\n        targetInst,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      if (extractedEvents) {\n        events = accumulateInto(events, extractedEvents);\n      }\n    }\n  }\n  return events;\n}\n\nfunction runExtractedPluginEventsInBatch(\n  topLevelType: TopLevelType,\n  targetInst: null | Fiber,\n  nativeEvent: AnyNativeEvent,\n  nativeEventTarget: null | EventTarget,\n) {\n  const events = extractPluginEvents(\n    topLevelType,\n    targetInst,\n    nativeEvent,\n    nativeEventTarget,\n  );\n  runEventsInBatch(events);\n}\n\nexport function dispatchEvent(\n  target: null | Object,\n  topLevelType: RNTopLevelEventType,\n  nativeEvent: AnyNativeEvent,\n) {\n  const targetFiber = (target: null | Fiber);\n\n  let eventTarget = null;\n  if (targetFiber != null) {\n    const stateNode = targetFiber.stateNode;\n    // Guard against Fiber being unmounted\n    if (stateNode != null) {\n      eventTarget = stateNode.canonical;\n    }\n  }\n\n  batchedUpdates(function() {\n    // Emit event to the RawEventEmitter. This is an unused-by-default EventEmitter\n    // that can be used to instrument event performance monitoring (primarily - could be useful\n    // for other things too).\n    //\n    // NOTE: this merely emits events into the EventEmitter below.\n    // If *you* do not add listeners to the `RawEventEmitter`,\n    // then all of these emitted events will just blackhole and are no-ops.\n    // It is available (although not officially supported... yet) if you want to collect\n    // perf data on event latency in your application, and could also be useful for debugging\n    // low-level events issues.\n    //\n    // If you do not have any event perf monitoring and are extremely concerned about event perf,\n    // it is safe to disable these \"emit\" statements; it will prevent checking the size of\n    // an empty array twice and prevent two no-ops. Practically the overhead is so low that\n    // we don't think it's worth thinking about in prod; your perf issues probably lie elsewhere.\n    //\n    // We emit two events here: one for listeners to this specific event,\n    // and one for the catchall listener '*', for any listeners that want\n    // to be notified for all events.\n    // Note that extracted events are *not* emitted,\n    // only events that have a 1:1 mapping with a native event, at least for now.\n    const event = {eventName: topLevelType, nativeEvent};\n    RawEventEmitter.emit(topLevelType, event);\n    RawEventEmitter.emit('*', event);\n\n    // Heritage plugin event system\n    runExtractedPluginEventsInBatch(\n      topLevelType,\n      targetFiber,\n      nativeEvent,\n      eventTarget,\n    );\n  });\n  // React Native doesn't use ReactControlledComponent but if it did, here's\n  // where it would do it.\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// This module only exists as an ESM wrapper around the external CommonJS\n// Scheduler dependency. Notice that we're intentionally not using named imports\n// because Rollup would use dynamic dispatch for CommonJS interop named imports.\n// When we switch to ESM, we can delete this module.\nimport * as Scheduler from 'scheduler';\n\nexport const scheduleCallback = Scheduler.unstable_scheduleCallback;\nexport const cancelCallback = Scheduler.unstable_cancelCallback;\nexport const shouldYield = Scheduler.unstable_shouldYield;\nexport const requestPaint = Scheduler.unstable_requestPaint;\nexport const now = Scheduler.unstable_now;\nexport const getCurrentPriorityLevel =\n  Scheduler.unstable_getCurrentPriorityLevel;\nexport const ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nexport const UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nexport const NormalPriority = Scheduler.unstable_NormalPriority;\nexport const LowPriority = Scheduler.unstable_LowPriority;\nexport const IdlePriority = Scheduler.unstable_IdlePriority;\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nexport const unstable_yieldValue = Scheduler.unstable_yieldValue;\nexport const unstable_setDisableYieldValue =\n  Scheduler.unstable_setDisableYieldValue;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {EventPriority} from './ReactEventPriorities.old';\n// import type {DevToolsProfilingHooks} from 'react-devtools-shared/src/backend/types';\n// TODO: This import doesn't work because the DevTools depend on the DOM version of React\n// and to properly type check against DOM React we can't also type check again non-DOM\n// React which this hook might be in.\ntype DevToolsProfilingHooks = any;\n\nimport {\n  getLabelForLane,\n  TotalLanes,\n} from 'react-reconciler/src/ReactFiberLane.old';\nimport {DidCapture} from './ReactFiberFlags';\nimport {\n  consoleManagedByDevToolsDuringStrictMode,\n  enableProfilerTimer,\n  enableSchedulingProfiler,\n} from 'shared/ReactFeatureFlags';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n} from './ReactEventPriorities.old';\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n  unstable_yieldValue,\n  unstable_setDisableYieldValue,\n} from './Scheduler';\nimport {setSuppressWarning} from 'shared/consoleWithStackDev';\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet injectedProfilingHooks: DevToolsProfilingHooks | null = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    if (enableSchedulingProfiler) {\n      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n      // This gives DevTools a way to feature detect that isn't tied to version number\n      // (since profiling and timeline are controlled by different feature flags).\n      internals = {\n        ...internals,\n        getLaneLabelMap,\n        injectProfilingHooks,\n      };\n    }\n\n    rendererID = hook.inject(internals);\n\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(root: FiberRoot, eventPriority: EventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        let schedulerPriority;\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediateSchedulerPriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingSchedulerPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriority = IdleSchedulerPriority;\n            break;\n          default:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n        }\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          schedulerPriority,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onPostCommitRoot(root: FiberRoot) {\n  if (\n    injectedHook &&\n    typeof injectedHook.onPostCommitFiberRoot === 'function'\n  ) {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function setIsStrictModeForDevtools(newIsStrictMode: boolean) {\n  if (consoleManagedByDevToolsDuringStrictMode) {\n    if (typeof unstable_yieldValue === 'function') {\n      // We're in a test because Scheduler.unstable_yieldValue only exists\n      // in SchedulerMock. To reduce the noise in strict mode tests,\n      // suppress warnings and disable scheduler yielding during the double render\n      unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n\n    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n      try {\n        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n      } catch (err) {\n        if (__DEV__) {\n          if (!hasLoggedError) {\n            hasLoggedError = true;\n            console.error(\n              'React instrumentation encountered an error: %s',\n              err,\n            );\n          }\n        }\n      }\n    }\n  } else {\n    if (newIsStrictMode) {\n      disableLogs();\n    } else {\n      reenableLogs();\n    }\n  }\n}\n\n// Profiler API hooks\n\nfunction injectProfilingHooks(profilingHooks: DevToolsProfilingHooks): void {\n  injectedProfilingHooks = profilingHooks;\n}\n\nfunction getLaneLabelMap(): Map<Lane, string> | null {\n  if (enableSchedulingProfiler) {\n    const map: Map<Lane, string> = new Map();\n\n    let lane = 1;\n    for (let index = 0; index < TotalLanes; index++) {\n      const label = ((getLabelForLane(lane): any): string);\n      map.set(lane, label);\n      lane *= 2;\n    }\n\n    return map;\n  } else {\n    return null;\n  }\n}\n\nexport function markCommitStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStarted === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStarted(lanes);\n    }\n  }\n}\n\nexport function markCommitStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStopped === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStopped();\n    }\n  }\n}\n\nexport function markComponentRenderStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentErrored(\n  fiber: Fiber,\n  thrownValue: mixed,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentErrored === 'function'\n    ) {\n      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n    }\n  }\n}\n\nexport function markComponentSuspended(\n  fiber: Fiber,\n  wakeable: Wakeable,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentSuspended === 'function'\n    ) {\n      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStopped();\n    }\n  }\n}\n\nexport function markPassiveEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markPassiveEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStopped();\n    }\n  }\n}\n\nexport function markRenderStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStarted(lanes);\n    }\n  }\n}\n\nexport function markRenderYielded(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderYielded === 'function'\n    ) {\n      injectedProfilingHooks.markRenderYielded();\n    }\n  }\n}\n\nexport function markRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStopped();\n    }\n  }\n}\n\nexport function markRenderScheduled(lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markRenderScheduled(lane);\n    }\n  }\n}\n\nexport function markForceUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markForceUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n    }\n  }\n}\n\nexport function markStateUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markStateUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = /*                         */ 0b000000;\n// TODO: Remove ConcurrentMode by reading from the root tag instead\nexport const ConcurrentMode = /*                 */ 0b000001;\nexport const ProfileMode = /*                    */ 0b000010;\nexport const DebugTracingMode = /*               */ 0b000100;\nexport const StrictLegacyMode = /*               */ 0b001000;\nexport const StrictEffectsMode = /*              */ 0b010000;\nexport const ConcurrentUpdatesByDefaultMode = /* */ 0b100000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\n\nexport const clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(x: number): number {\n  const asUint = x >>> 0;\n  if (asUint === 0) {\n    return 32;\n  }\n  return (31 - ((log(asUint) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\nimport type {ConcurrentUpdate} from './ReactFiberConcurrentUpdates.old';\n\n// TODO: Ideally these types would be opaque but that doesn't work well with\n// our reconciler fork infra, since these leak into non-reconciler packages.\n\nexport type Lanes = number;\nexport type Lane = number;\nexport type LaneMap<T> = Array<T>;\n\nimport {\n  enableSchedulingProfiler,\n  enableUpdaterTracking,\n  allowConcurrentByDefault,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {ConcurrentUpdatesByDefaultMode, NoMode} from './ReactTypeOfMode';\nimport {clz32} from './clz32';\n\n// Lane values below should be kept in sync with getLabelForLane(), used by react-devtools-timeline.\n// If those values are changed that package should be rebuilt and redeployed.\n\nexport const TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\n\nexport const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000010;\nexport const InputContinuousLane: Lane = /*             */ 0b0000000000000000000000000000100;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000001000;\nexport const DefaultLane: Lane = /*                     */ 0b0000000000000000000000000010000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000000100000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111111000000;\nconst TransitionLane1: Lane = /*                        */ 0b0000000000000000000000001000000;\nconst TransitionLane2: Lane = /*                        */ 0b0000000000000000000000010000000;\nconst TransitionLane3: Lane = /*                        */ 0b0000000000000000000000100000000;\nconst TransitionLane4: Lane = /*                        */ 0b0000000000000000000001000000000;\nconst TransitionLane5: Lane = /*                        */ 0b0000000000000000000010000000000;\nconst TransitionLane6: Lane = /*                        */ 0b0000000000000000000100000000000;\nconst TransitionLane7: Lane = /*                        */ 0b0000000000000000001000000000000;\nconst TransitionLane8: Lane = /*                        */ 0b0000000000000000010000000000000;\nconst TransitionLane9: Lane = /*                        */ 0b0000000000000000100000000000000;\nconst TransitionLane10: Lane = /*                       */ 0b0000000000000001000000000000000;\nconst TransitionLane11: Lane = /*                       */ 0b0000000000000010000000000000000;\nconst TransitionLane12: Lane = /*                       */ 0b0000000000000100000000000000000;\nconst TransitionLane13: Lane = /*                       */ 0b0000000000001000000000000000000;\nconst TransitionLane14: Lane = /*                       */ 0b0000000000010000000000000000000;\nconst TransitionLane15: Lane = /*                       */ 0b0000000000100000000000000000000;\nconst TransitionLane16: Lane = /*                       */ 0b0000000001000000000000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000111110000000000000000000000;\nconst RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;\nconst RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;\nconst RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;\nconst RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;\nconst RetryLane5: Lane = /*                             */ 0b0000100000000000000000000000000;\n\nexport const SomeRetryLane: Lane = RetryLane1;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0001000000000000000000000000000;\n\nconst NonIdleLanes: Lanes = /*                          */ 0b0001111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0010000000000000000000000000000;\nexport const IdleLane: Lane = /*                        */ 0b0100000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\n// This function is used for the experimental timeline (react-devtools-timeline)\n// It should be kept in sync with the Lanes values above.\nexport function getLabelForLane(lane: Lane): string | void {\n  if (enableSchedulingProfiler) {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\n\nexport const NoTimestamp = -1;\n\nlet nextTransitionLane: Lane = TransitionLane1;\nlet nextRetryLane: Lane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n    case InputContinuousLane:\n      return InputContinuousLane;\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n    case DefaultLane:\n      return DefaultLane;\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n    case IdleLane:\n      return IdleLane;\n    case OffscreenLane:\n      return OffscreenLane;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n      return lanes;\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n  const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n  if (nonIdlePendingLanes !== NoLanes) {\n    const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    const unblockedLanes = pendingLanes & ~suspendedLanes;\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    const nextLane = getHighestPriorityLane(nextLanes);\n    const wipLane = getHighestPriorityLane(wipLanes);\n    if (\n      // Tests whether the next lane is equal or lower priority than the wip\n      // one. This works because the bits decrease in priority as you go left.\n      nextLane >= wipLane ||\n      // Default priority updates should not interrupt transition updates. The\n      // only difference between default updates and transition updates is that\n      // default updates do not support refresh transitions.\n      (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\n    ) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Do nothing, use the lanes as they were assigned.\n  } else if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function includesSyncLane(lanes: Lanes) {\n  return (lanes & SyncLane) !== NoLanes;\n}\n\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyNonUrgentLanes(lanes: Lanes) {\n  const UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n  return (lanes & UrgentLanes) === NoLanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\nexport function includesBlockingLane(root: FiberRoot, lanes: Lanes) {\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Concurrent updates by default always use time slicing.\n    return false;\n  }\n  const SyncDefaultLanes =\n    InputContinuousHydrationLane |\n    InputContinuousLane |\n    DefaultHydrationLane |\n    DefaultLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\n\nexport function includesExpiredLane(root: FiberRoot, lanes: Lanes) {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\n\nexport function isTransitionLane(lane: Lane) {\n  return (lane & TransitionLanes) !== NoLanes;\n}\n\nexport function claimNextTransitionLane(): Lane {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  const lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n    nextTransitionLane = TransitionLane1;\n  }\n  return lane;\n}\n\nexport function claimNextRetryLane(): Lane {\n  const lane = nextRetryLane;\n  nextRetryLane <<= 1;\n  if ((nextRetryLane & RetryLanes) === NoLanes) {\n    nextRetryLane = RetryLane1;\n  }\n  return lane;\n}\n\nexport function getHighestPriorityLane(lanes: Lanes): Lane {\n  return lanes & -lanes;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\nexport function intersectLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a & b;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n  return laneMap;\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = NoLanes;\n  root.pingedLanes = NoLanes;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n  const hiddenUpdates = root.hiddenUpdates;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    const hiddenUpdatesForLane = hiddenUpdates[index];\n    if (hiddenUpdatesForLane !== null) {\n      hiddenUpdates[index] = null;\n      // \"Hidden\" updates are updates that were made to a hidden component. They\n      // have special logic associated with them because they may be entangled\n      // with updates that occur outside that tree. But once the outer tree\n      // commits, they behave like regular updates.\n      for (let i = 0; i < hiddenUpdatesForLane.length; i++) {\n        const update = hiddenUpdatesForLane[i];\n        if (update !== null) {\n          update.lane &= ~OffscreenLane;\n        }\n      }\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n\n  const rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n  const entanglements = root.entanglements;\n  let lanes = rootEntangledLanes;\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    if (\n      // Is this one of the newly entangled lanes?\n      (lane & entangledLanes) |\n      // Is this lane transitively entangled with the newly entangled lanes?\n      (entanglements[index] & entangledLanes)\n    ) {\n      entanglements[index] |= entangledLanes;\n    }\n    lanes &= ~lane;\n  }\n}\n\nexport function markHiddenUpdate(\n  root: FiberRoot,\n  update: ConcurrentUpdate,\n  lane: Lane,\n) {\n  const index = laneToIndex(lane);\n  const hiddenUpdates = root.hiddenUpdates;\n  const hiddenUpdatesForLane = hiddenUpdates[index];\n  if (hiddenUpdatesForLane === null) {\n    hiddenUpdates[index] = [update];\n  } else {\n    hiddenUpdatesForLane.push(update);\n  }\n  update.lane = lane | OffscreenLane;\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  const renderLane = getHighestPriorityLane(renderLanes);\n\n  let lane;\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nexport function addFiberToLanesMap(\n  root: FiberRoot,\n  fiber: Fiber,\n  lanes: Lanes | Lane,\n) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n\n    lanes &= ~lane;\n  }\n}\n\nexport function movePendingFibersToMemoized(root: FiberRoot, lanes: Lanes) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  const memoizedUpdaters = root.memoizedUpdaters;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    if (updaters.size > 0) {\n      updaters.forEach(fiber => {\n        const alternate = fiber.alternate;\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nexport function addTransitionToLanesMap(\n  root: FiberRoot,\n  transition: Transition,\n  lane: Lane,\n) {\n  if (enableTransitionTracing) {\n    const transitionLanesMap = root.transitionLanes;\n    const index = laneToIndex(lane);\n    let transitions = transitionLanesMap[index];\n    if (transitions === null) {\n      transitions = new Set();\n    }\n    transitions.add(transition);\n\n    transitionLanesMap[index] = transitions;\n  }\n}\n\nexport function getTransitionsForLanes(\n  root: FiberRoot,\n  lanes: Lane | Lanes,\n): Array<Transition> | null {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  const transitionsForLanes = [];\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      transitions.forEach(transition => {\n        transitionsForLanes.push(transition);\n      });\n    }\n\n    lanes &= ~lane;\n  }\n\n  if (transitionsForLanes.length === 0) {\n    return null;\n  }\n\n  return transitionsForLanes;\n}\n\nexport function clearTransitionsForLanes(root: FiberRoot, lanes: Lane | Lanes) {\n  if (!enableTransitionTracing) {\n    return;\n  }\n\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      root.transitionLanes[index] = null;\n    }\n\n    lanes &= ~lane;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  SyncLane,\n  InputContinuousLane,\n  DefaultLane,\n  IdleLane,\n  getHighestPriorityLane,\n  includesNonIdleWork,\n} from './ReactFiberLane.old';\n\nexport opaque type EventPriority = Lane;\n\nexport const DiscreteEventPriority: EventPriority = SyncLane;\nexport const ContinuousEventPriority: EventPriority = InputContinuousLane;\nexport const DefaultEventPriority: EventPriority = DefaultLane;\nexport const IdleEventPriority: EventPriority = IdleLane;\n\nlet currentUpdatePriority: EventPriority = NoLane;\n\nexport function getCurrentUpdatePriority(): EventPriority {\n  return currentUpdatePriority;\n}\n\nexport function setCurrentUpdatePriority(newPriority: EventPriority) {\n  currentUpdatePriority = newPriority;\n}\n\nexport function runWithPriority<T>(priority: EventPriority, fn: () => T): T {\n  const previousPriority = currentUpdatePriority;\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\n\nexport function higherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a !== 0 && a < b ? a : b;\n}\n\nexport function lowerEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a === 0 || a > b ? a : b;\n}\n\nexport function isHigherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): boolean {\n  return a !== 0 && a < b;\n}\n\nexport function lanesToEventPriority(lanes: Lanes): EventPriority {\n  const lane = getHighestPriorityLane(lanes);\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n  return IdleEventPriority;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Renderers that don't support mutation\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  throw new Error(\n    'The current renderer does not support mutation. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Mutation (when unsupported)\nexport const supportsMutation = false;\nexport const appendChild = shim;\nexport const appendChildToContainer = shim;\nexport const commitTextUpdate = shim;\nexport const commitMount = shim;\nexport const commitUpdate = shim;\nexport const insertBefore = shim;\nexport const insertInContainerBefore = shim;\nexport const removeChild = shim;\nexport const removeChildFromContainer = shim;\nexport const resetTextContent = shim;\nexport const hideInstance = shim;\nexport const hideTextInstance = shim;\nexport const unhideInstance = shim;\nexport const unhideTextInstance = shim;\nexport const clearContainer = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  throw new Error(\n    'The current renderer does not support hydration. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Hydration (when unsupported)\nexport type SuspenseInstance = mixed;\nexport const supportsHydration = false;\nexport const canHydrateInstance = shim;\nexport const canHydrateTextInstance = shim;\nexport const canHydrateSuspenseInstance = shim;\nexport const isSuspenseInstancePending = shim;\nexport const isSuspenseInstanceFallback = shim;\nexport const getSuspenseInstanceFallbackErrorDetails = shim;\nexport const registerSuspenseInstanceRetry = shim;\nexport const getNextHydratableSibling = shim;\nexport const getFirstHydratableChild = shim;\nexport const getFirstHydratableChildWithinContainer = shim;\nexport const getFirstHydratableChildWithinSuspenseInstance = shim;\nexport const hydrateInstance = shim;\nexport const hydrateTextInstance = shim;\nexport const hydrateSuspenseInstance = shim;\nexport const getNextHydratableInstanceAfterSuspenseInstance = shim;\nexport const commitHydratedContainer = shim;\nexport const commitHydratedSuspenseInstance = shim;\nexport const clearSuspenseBoundary = shim;\nexport const clearSuspenseBoundaryFromContainer = shim;\nexport const shouldDeleteUnhydratedTailInstances = shim;\nexport const didNotMatchHydratedContainerTextInstance = shim;\nexport const didNotMatchHydratedTextInstance = shim;\nexport const didNotHydrateInstanceWithinContainer = shim;\nexport const didNotHydrateInstanceWithinSuspenseInstance = shim;\nexport const didNotHydrateInstance = shim;\nexport const didNotFindHydratableInstanceWithinContainer = shim;\nexport const didNotFindHydratableTextInstanceWithinContainer = shim;\nexport const didNotFindHydratableSuspenseInstanceWithinContainer = shim;\nexport const didNotFindHydratableInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableTextInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableInstance = shim;\nexport const didNotFindHydratableTextInstance = shim;\nexport const didNotFindHydratableSuspenseInstance = shim;\nexport const errorHydratingContainer = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ElementRef} from 'react';\nimport type {\n  HostComponent,\n  MeasureInWindowOnSuccessCallback,\n  MeasureLayoutOnSuccessCallback,\n  MeasureOnSuccessCallback,\n  NativeMethods,\n  ViewConfig,\n  TouchedViewDataAtPoint,\n} from './ReactNativeTypes';\n\nimport {mountSafeCallback_NOT_REALLY_SAFE} from './NativeMethodsMixinUtils';\nimport {create, diff} from './ReactNativeAttributePayload';\n\nimport {dispatchEvent} from './ReactFabricEventEmitter';\n\nimport {\n  DefaultEventPriority,\n  DiscreteEventPriority,\n} from 'react-reconciler/src/ReactEventPriorities';\n\n// Modules provided by RN:\nimport {\n  ReactNativeViewConfigRegistry,\n  TextInputState,\n  deepFreezeAndThrowOnMutationInDev,\n} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\n\nconst {\n  createNode,\n  cloneNode,\n  cloneNodeWithNewChildren,\n  cloneNodeWithNewChildrenAndProps,\n  cloneNodeWithNewProps,\n  createChildSet: createChildNodeSet,\n  appendChild: appendChildNode,\n  appendChildToSet: appendChildNodeToSet,\n  completeRoot,\n  registerEventHandler,\n  measure: fabricMeasure,\n  measureInWindow: fabricMeasureInWindow,\n  measureLayout: fabricMeasureLayout,\n  unstable_DefaultEventPriority: FabricDefaultPriority,\n  unstable_DiscreteEventPriority: FabricDiscretePriority,\n  unstable_getCurrentEventPriority: fabricGetCurrentEventPriority,\n} = nativeFabricUIManager;\n\nconst {get: getViewConfigForType} = ReactNativeViewConfigRegistry;\n\n// Counter for uniquely identifying views.\n// % 10 === 1 means it is a rootTag.\n// % 2 === 0 means it is a Fabric tag.\n// This means that they never overlap.\nlet nextReactTag = 2;\n\ntype Node = Object;\nexport type Type = string;\nexport type Props = Object;\nexport type Instance = {\n  node: Node,\n  canonical: ReactFabricHostComponent,\n  ...\n};\nexport type TextInstance = {node: Node, ...};\nexport type HydratableInstance = Instance | TextInstance;\nexport type PublicInstance = ReactFabricHostComponent;\nexport type Container = number;\nexport type ChildSet = Object;\nexport type HostContext = $ReadOnly<{|\n  isInAParentText: boolean,\n|}>;\nexport type UpdatePayload = Object;\n\nexport type TimeoutHandle = TimeoutID;\nexport type NoTimeout = -1;\n\nexport type RendererInspectionConfig = $ReadOnly<{|\n  // Deprecated. Replaced with getInspectorDataForViewAtPoint.\n  getInspectorDataForViewTag?: (tag: number) => Object,\n  getInspectorDataForViewAtPoint?: (\n    inspectedView: Object,\n    locationX: number,\n    locationY: number,\n    callback: (viewData: TouchedViewDataAtPoint) => mixed,\n  ) => void,\n|}>;\n\n// TODO?: find a better place for this type to live\nexport type EventListenerOptions = $ReadOnly<{|\n  capture?: boolean,\n  once?: boolean,\n  passive?: boolean,\n  signal: mixed, // not yet implemented\n|}>;\nexport type EventListenerRemoveOptions = $ReadOnly<{|\n  capture?: boolean,\n|}>;\n\n// TODO?: this will be changed in the future to be w3c-compatible and allow \"EventListener\" objects as well as functions.\nexport type EventListener = Function;\n\ntype InternalEventListeners = {\n  [string]: {|\n    listener: EventListener,\n    options: EventListenerOptions,\n    invalidated: boolean,\n  |}[],\n};\n\n// TODO: Remove this conditional once all changes have propagated.\nif (registerEventHandler) {\n  /**\n   * Register the event emitter with the native bridge\n   */\n  registerEventHandler(dispatchEvent);\n}\n\n/**\n * This is used for refs on host components.\n */\nclass ReactFabricHostComponent {\n  _nativeTag: number;\n  viewConfig: ViewConfig;\n  currentProps: Props;\n  _internalInstanceHandle: Object;\n  _eventListeners: ?InternalEventListeners;\n\n  constructor(\n    tag: number,\n    viewConfig: ViewConfig,\n    props: Props,\n    internalInstanceHandle: Object,\n  ) {\n    this._nativeTag = tag;\n    this.viewConfig = viewConfig;\n    this.currentProps = props;\n    this._internalInstanceHandle = internalInstanceHandle;\n  }\n\n  blur() {\n    TextInputState.blurTextInput(this);\n  }\n\n  focus() {\n    TextInputState.focusTextInput(this);\n  }\n\n  measure(callback: MeasureOnSuccessCallback) {\n    const {stateNode} = this._internalInstanceHandle;\n    if (stateNode != null) {\n      fabricMeasure(\n        stateNode.node,\n        mountSafeCallback_NOT_REALLY_SAFE(this, callback),\n      );\n    }\n  }\n\n  measureInWindow(callback: MeasureInWindowOnSuccessCallback) {\n    const {stateNode} = this._internalInstanceHandle;\n    if (stateNode != null) {\n      fabricMeasureInWindow(\n        stateNode.node,\n        mountSafeCallback_NOT_REALLY_SAFE(this, callback),\n      );\n    }\n  }\n\n  measureLayout(\n    relativeToNativeNode: number | ElementRef<HostComponent<mixed>>,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n    onFail?: () => void /* currently unused */,\n  ) {\n    if (\n      typeof relativeToNativeNode === 'number' ||\n      !(relativeToNativeNode instanceof ReactFabricHostComponent)\n    ) {\n      if (__DEV__) {\n        console.error(\n          'Warning: ref.measureLayout must be called with a ref to a native component.',\n        );\n      }\n\n      return;\n    }\n\n    const toStateNode = this._internalInstanceHandle.stateNode;\n    const fromStateNode =\n      relativeToNativeNode._internalInstanceHandle.stateNode;\n\n    if (toStateNode != null && fromStateNode != null) {\n      fabricMeasureLayout(\n        toStateNode.node,\n        fromStateNode.node,\n        mountSafeCallback_NOT_REALLY_SAFE(this, onFail),\n        mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess),\n      );\n    }\n  }\n\n  setNativeProps(nativeProps: Object) {\n    if (__DEV__) {\n      console.error(\n        'Warning: setNativeProps is not currently supported in Fabric',\n      );\n    }\n\n    return;\n  }\n\n  // This API (addEventListener, removeEventListener) attempts to adhere to the\n  // w3 Level2 Events spec as much as possible, treating HostComponent as a DOM node.\n  //\n  // Unless otherwise noted, these methods should \"just work\" and adhere to the W3 specs.\n  // If they deviate in a way that is not explicitly noted here, you've found a bug!\n  //\n  // See:\n  // * https://www.w3.org/TR/DOM-Level-2-Events/events.html\n  // * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n  // * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n  //\n  // And notably, not implemented (yet?):\n  // * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent\n  //\n  //\n  // Deviations from spec/TODOs:\n  // (1) listener must currently be a function, we do not support EventListener objects yet.\n  // (2) we do not support the `signal` option / AbortSignal yet\n  addEventListener_unstable(\n    eventType: string,\n    listener: EventListener,\n    options: EventListenerOptions | boolean,\n  ) {\n    if (typeof eventType !== 'string') {\n      throw new Error('addEventListener_unstable eventType must be a string');\n    }\n    if (typeof listener !== 'function') {\n      throw new Error('addEventListener_unstable listener must be a function');\n    }\n\n    // The third argument is either boolean indicating \"captures\" or an object.\n    const optionsObj =\n      typeof options === 'object' && options !== null ? options : {};\n    const capture =\n      (typeof options === 'boolean' ? options : optionsObj.capture) || false;\n    const once = optionsObj.once || false;\n    const passive = optionsObj.passive || false;\n    const signal = null; // TODO: implement signal/AbortSignal\n\n    const eventListeners: InternalEventListeners = this._eventListeners || {};\n    if (this._eventListeners == null) {\n      this._eventListeners = eventListeners;\n    }\n\n    const namedEventListeners = eventListeners[eventType] || [];\n    if (eventListeners[eventType] == null) {\n      eventListeners[eventType] = namedEventListeners;\n    }\n\n    namedEventListeners.push({\n      listener: listener,\n      invalidated: false,\n      options: {\n        capture: capture,\n        once: once,\n        passive: passive,\n        signal: signal,\n      },\n    });\n  }\n\n  // See https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n  removeEventListener_unstable(\n    eventType: string,\n    listener: EventListener,\n    options: EventListenerRemoveOptions | boolean,\n  ) {\n    // eventType and listener must be referentially equal to be removed from the listeners\n    // data structure, but in \"options\" we only check the `capture` flag, according to spec.\n    // That means if you add the same function as a listener with capture set to true and false,\n    // you must also call removeEventListener twice with capture set to true/false.\n    const optionsObj =\n      typeof options === 'object' && options !== null ? options : {};\n    const capture =\n      (typeof options === 'boolean' ? options : optionsObj.capture) || false;\n\n    // If there are no event listeners or named event listeners, we can bail early - our\n    // job is already done.\n    const eventListeners = this._eventListeners;\n    if (!eventListeners) {\n      return;\n    }\n    const namedEventListeners = eventListeners[eventType];\n    if (!namedEventListeners) {\n      return;\n    }\n\n    // TODO: optimize this path to make remove cheaper\n    eventListeners[eventType] = namedEventListeners.filter(listenerObj => {\n      return !(\n        listenerObj.listener === listener &&\n        listenerObj.options.capture === capture\n      );\n    });\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\n(ReactFabricHostComponent.prototype: $ReadOnly<{...NativeMethods, ...}>);\n\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoMutation';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoHydration';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoScopes';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoMicrotasks';\n\nexport function appendInitialChild(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n): void {\n  appendChildNode(parentInstance.node, child.node);\n}\n\nexport function createInstance(\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n  internalInstanceHandle: Object,\n): Instance {\n  const tag = nextReactTag;\n  nextReactTag += 2;\n\n  const viewConfig = getViewConfigForType(type);\n\n  if (__DEV__) {\n    for (const key in viewConfig.validAttributes) {\n      if (props.hasOwnProperty(key)) {\n        deepFreezeAndThrowOnMutationInDev(props[key]);\n      }\n    }\n  }\n\n  const updatePayload = create(props, viewConfig.validAttributes);\n\n  const node = createNode(\n    tag, // reactTag\n    viewConfig.uiViewClassName, // viewName\n    rootContainerInstance, // rootTag\n    updatePayload, // props\n    internalInstanceHandle, // internalInstanceHandle\n  );\n\n  const component = new ReactFabricHostComponent(\n    tag,\n    viewConfig,\n    props,\n    internalInstanceHandle,\n  );\n\n  return {\n    node: node,\n    canonical: component,\n  };\n}\n\nexport function createTextInstance(\n  text: string,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n  internalInstanceHandle: Object,\n): TextInstance {\n  if (__DEV__) {\n    if (!hostContext.isInAParentText) {\n      console.error('Text strings must be rendered within a <Text> component.');\n    }\n  }\n\n  const tag = nextReactTag;\n  nextReactTag += 2;\n\n  const node = createNode(\n    tag, // reactTag\n    'RCTRawText', // viewName\n    rootContainerInstance, // rootTag\n    {text: text}, // props\n    internalInstanceHandle, // instance handle\n  );\n\n  return {\n    node: node,\n  };\n}\n\nexport function finalizeInitialChildren(\n  parentInstance: Instance,\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  return false;\n}\n\nexport function getRootHostContext(\n  rootContainerInstance: Container,\n): HostContext {\n  return {isInAParentText: false};\n}\n\nexport function getChildHostContext(\n  parentHostContext: HostContext,\n  type: string,\n  rootContainerInstance: Container,\n): HostContext {\n  const prevIsInAParentText = parentHostContext.isInAParentText;\n  const isInAParentText =\n    type === 'AndroidTextInput' || // Android\n    type === 'RCTMultilineTextInputView' || // iOS\n    type === 'RCTSinglelineTextInputView' || // iOS\n    type === 'RCTText' ||\n    type === 'RCTVirtualText';\n\n  // TODO: If this is an offscreen host container, we should reuse the\n  // parent context.\n\n  if (prevIsInAParentText !== isInAParentText) {\n    return {isInAParentText};\n  } else {\n    return parentHostContext;\n  }\n}\n\nexport function getPublicInstance(instance: Instance): * {\n  return instance.canonical;\n}\n\nexport function prepareForCommit(containerInfo: Container): null | Object {\n  // Noop\n  return null;\n}\n\nexport function prepareUpdate(\n  instance: Instance,\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): null | Object {\n  const viewConfig = instance.canonical.viewConfig;\n  const updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);\n  // TODO: If the event handlers have changed, we need to update the current props\n  // in the commit phase but there is no host config hook to do it yet.\n  // So instead we hack it by updating it in the render phase.\n  instance.canonical.currentProps = newProps;\n  return updatePayload;\n}\n\nexport function resetAfterCommit(containerInfo: Container): void {\n  // Noop\n}\n\nexport function shouldSetTextContent(type: string, props: Props): boolean {\n  // TODO (bvaughn) Revisit this decision.\n  // Always returning false simplifies the createInstance() implementation,\n  // But creates an additional child Fiber for raw text children.\n  // No additional native views are created though.\n  // It's not clear to me which is better so I'm deferring for now.\n  // More context @ github.com/facebook/react/pull/8560#discussion_r92111303\n  return false;\n}\n\nexport function getCurrentEventPriority(): * {\n  const currentEventPriority = fabricGetCurrentEventPriority\n    ? fabricGetCurrentEventPriority()\n    : null;\n\n  if (currentEventPriority != null) {\n    switch (currentEventPriority) {\n      case FabricDiscretePriority:\n        return DiscreteEventPriority;\n      case FabricDefaultPriority:\n      default:\n        return DefaultEventPriority;\n    }\n  }\n\n  return DefaultEventPriority;\n}\n\n// The Fabric renderer is secondary to the existing React Native renderer.\nexport const isPrimaryRenderer = false;\n\n// The Fabric renderer shouldn't trigger missing act() warnings\nexport const warnsIfNotActing = false;\n\nexport const scheduleTimeout = setTimeout;\nexport const cancelTimeout = clearTimeout;\nexport const noTimeout = -1;\n\n// -------------------\n//     Persistence\n// -------------------\n\nexport const supportsPersistence = true;\n\nexport function cloneInstance(\n  instance: Instance,\n  updatePayload: null | Object,\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  internalInstanceHandle: Object,\n  keepChildren: boolean,\n  recyclableInstance: null | Instance,\n): Instance {\n  const node = instance.node;\n  let clone;\n  if (keepChildren) {\n    if (updatePayload !== null) {\n      clone = cloneNodeWithNewProps(node, updatePayload);\n    } else {\n      clone = cloneNode(node);\n    }\n  } else {\n    if (updatePayload !== null) {\n      clone = cloneNodeWithNewChildrenAndProps(node, updatePayload);\n    } else {\n      clone = cloneNodeWithNewChildren(node);\n    }\n  }\n  return {\n    node: clone,\n    canonical: instance.canonical,\n  };\n}\n\nexport function cloneHiddenInstance(\n  instance: Instance,\n  type: string,\n  props: Props,\n  internalInstanceHandle: Object,\n): Instance {\n  const viewConfig = instance.canonical.viewConfig;\n  const node = instance.node;\n  const updatePayload = create(\n    {style: {display: 'none'}},\n    viewConfig.validAttributes,\n  );\n  return {\n    node: cloneNodeWithNewProps(node, updatePayload),\n    canonical: instance.canonical,\n  };\n}\n\nexport function cloneHiddenTextInstance(\n  instance: Instance,\n  text: string,\n  internalInstanceHandle: Object,\n): TextInstance {\n  throw new Error('Not yet implemented.');\n}\n\nexport function createContainerChildSet(container: Container): ChildSet {\n  return createChildNodeSet(container);\n}\n\nexport function appendChildToContainerChildSet(\n  childSet: ChildSet,\n  child: Instance | TextInstance,\n): void {\n  appendChildNodeToSet(childSet, child.node);\n}\n\nexport function finalizeContainerChildren(\n  container: Container,\n  newChildren: ChildSet,\n): void {\n  completeRoot(container, newChildren);\n}\n\nexport function replaceContainerChildren(\n  container: Container,\n  newChildren: ChildSet,\n): void {}\n\nexport function getInstanceFromNode(node: any) {\n  throw new Error('Not yet implemented.');\n}\n\nexport function beforeActiveInstanceBlur(internalInstanceHandle: Object) {\n  // noop\n}\n\nexport function afterActiveInstanceBlur() {\n  // noop\n}\n\nexport function preparePortalMount(portalInstance: Instance): void {\n  // noop\n}\n\nexport function detachDeletedInstance(node: Instance): void {\n  // noop\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  enableComponentStackLocations,\n  disableNativeComponentFrames,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (disableNativeComponentFrames || !fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      // TODO(luna): This will currently only throw if the function component\n      // tries to access React/ReactDOM/props. We should probably make this throw\n      // in simple components too\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                let frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n                if (fn.displayName && frame.includes('<anonymous>')) {\n                  frame = frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw new Error(\n        'Unexpected context found on stack. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error(\n          `${getComponentNameFromFiber(fiber) ||\n            'Unknown'}.getChildContext(): key \"${contextKey}\" is not defined in childContextTypes.`,\n        );\n      }\n    }\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw new Error(\n        'Expected to have an instance by this point. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n      throw new Error(\n        'Expected subtree parent to be a mounted class component. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n\n    throw new Error(\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1;\n\nexport const LegacyRoot = 0;\nexport const ConcurrentRoot = 1;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, OffscreenMode, Wakeable} from 'shared/ReactTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SpawnedCachePool} from './ReactFiberCacheComponent.new';\nimport type {\n  Transition,\n  TracingMarkerInstance,\n} from './ReactFiberTracingMarkerComponent.new';\n\nexport type OffscreenProps = {|\n  // TODO: Pick an API before exposing the Offscreen type. I've chosen an enum\n  // for now, since we might have multiple variants. For example, hiding the\n  // content without changing the layout.\n  //\n  // Default mode is visible. Kind of a weird default for a component\n  // called \"Offscreen.\" Possible alt: <Visibility />?\n  mode?: OffscreenMode | null | void,\n  children?: ReactNodeList,\n|};\n\n// We use the existence of the state object as an indicator that the component\n// is hidden.\nexport type OffscreenState = {|\n  // TODO: This doesn't do anything, yet. It's always NoLanes. But eventually it\n  // will represent the pending work that must be included in the render in\n  // order to unhide the component.\n  baseLanes: Lanes,\n  cachePool: SpawnedCachePool | null,\n|};\n\nexport type OffscreenQueue = {|\n  transitions: Array<Transition> | null,\n  markerInstances: Array<TracingMarkerInstance> | null,\n  wakeables: Set<Wakeable> | null,\n|};\n\ntype OffscreenVisibility = number;\n\nexport const OffscreenVisible = /*                     */ 0b01;\nexport const OffscreenPassiveEffectsConnected = /*     */ 0b10;\n\nexport type OffscreenInstance = {|\n  visibility: OffscreenVisibility,\n  pendingMarkers: Set<TracingMarkerInstance> | null,\n  transitions: Set<Transition> | null,\n  retryCache: WeakSet<Wakeable> | Set<Wakeable> | null,\n|};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {SchedulerCallback} from './Scheduler';\n\nimport {\n  DiscreteEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n} from './ReactEventPriorities.old';\nimport {ImmediatePriority, scheduleCallback} from './Scheduler';\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet includesLegacySyncCallbacks: boolean = false;\nlet isFlushingSyncQueue: boolean = false;\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\n\nexport function scheduleLegacySyncCallback(callback: SchedulerCallback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\n\nexport function flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\n\nexport function flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    const previousUpdatePriority = getCurrentUpdatePriority();\n    try {\n      const isSync = true;\n      const queue = syncQueue;\n      // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n      setCurrentUpdatePriority(DiscreteEventPriority);\n      for (; i < queue.length; i++) {\n        let callback = queue[i];\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      }\n      // Resume flushing in the next tick\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootState} from './ReactFiberRoot.new';\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nexport function isRootDehydrated(root: FiberRoot) {\n  const currentState: RootState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Ids are base 32 strings whose binary representation corresponds to the\n// position of a node in a tree.\n\n// Every time the tree forks into multiple children, we add additional bits to\n// the left of the sequence that represent the position of the child within the\n// current level of children.\n//\n//      00101       00010001011010101\n//      ╰─┬─╯       ╰───────┬───────╯\n//   Fork 5 of 20       Parent id\n//\n// The leading 0s are important. In the above example, you only need 3 bits to\n// represent slot 5. However, you need 5 bits to represent all the forks at\n// the current level, so we must account for the empty bits at the end.\n//\n// For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n// the zeroth id at a level would be indistinguishable from its parent.\n//\n// If a node has only one child, and does not materialize an id (i.e. does not\n// contain a useId hook), then we don't need to allocate any space in the\n// sequence. It's treated as a transparent indirection. For example, these two\n// trees produce the same ids:\n//\n// <>                          <>\n//   <Indirection>               <A />\n//     <A />                     <B />\n//   </Indirection>            </>\n//   <B />\n// </>\n//\n// However, we cannot skip any node that materializes an id. Otherwise, a parent\n// id that does not fork would be indistinguishable from its child id. For\n// example, this tree does not fork, but the parent and child must have\n// different ids.\n//\n// <Parent>\n//   <Child />\n// </Parent>\n//\n// To handle this scenario, every time we materialize an id, we allocate a\n// new level with a single slot. You can think of this as a fork with only one\n// prong, or an array of children with length 1.\n//\n// It's possible for the size of the sequence to exceed 32 bits, the max\n// size for bitwise operations. When this happens, we make more room by\n// converting the right part of the id to a string and storing it in an overflow\n// variable. We use a base 32 string representation, because 32 is the largest\n// power of 2 that is supported by toString(). We want the base to be large so\n// that the resulting ids are compact, and we want the base to be a power of 2\n// because every log2(base) bits corresponds to a single character, i.e. every\n// log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n// affecting the final result.\n\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {clz32} from './clz32';\nimport {Forked, NoFlags} from './ReactFiberFlags';\n\nexport type TreeContext = {\n  id: number,\n  overflow: string,\n};\n\n// TODO: Use the unified fiber stack module instead of this local one?\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\nconst forkStack: Array<any> = [];\nlet forkStackIndex: number = 0;\nlet treeForkProvider: Fiber | null = null;\nlet treeForkCount: number = 0;\n\nconst idStack: Array<any> = [];\nlet idStackIndex: number = 0;\nlet treeContextProvider: Fiber | null = null;\nlet treeContextId: number = 1;\nlet treeContextOverflow: string = '';\n\nexport function isForkedChild(workInProgress: Fiber): boolean {\n  warnIfNotHydrating();\n  return (workInProgress.flags & Forked) !== NoFlags;\n}\n\nexport function getForksAtLevel(workInProgress: Fiber): number {\n  warnIfNotHydrating();\n  return treeForkCount;\n}\n\nexport function getTreeId(): string {\n  const overflow = treeContextOverflow;\n  const idWithLeadingBit = treeContextId;\n  const id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\n\nexport function pushTreeFork(\n  workInProgress: Fiber,\n  totalChildren: number,\n): void {\n  // This is called right after we reconcile an array (or iterator) of child\n  // fibers, because that's the only place where we know how many children in\n  // the whole set without doing extra work later, or storing addtional\n  // information on the fiber.\n  //\n  // That's why this function is separate from pushTreeId — it's called during\n  // the render phase of the fork parent, not the child, which is where we push\n  // the other context values.\n  //\n  // In the Fizz implementation this is much simpler because the child is\n  // rendered in the same callstack as the parent.\n  //\n  // It might be better to just add a `forks` field to the Fiber type. It would\n  // make this module simpler.\n\n  warnIfNotHydrating();\n\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\n\nexport function pushTreeId(\n  workInProgress: Fiber,\n  totalChildren: number,\n  index: number,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextProvider = workInProgress;\n\n  const baseIdWithLeadingBit = treeContextId;\n  const baseOverflow = treeContextOverflow;\n\n  // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n  const baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  const baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n\n  const slot = index + 1;\n  const length = getBitLength(totalChildren) + baseLength;\n\n  // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    const numberOfOverflowBits = baseLength - (baseLength % 5);\n\n    // Then create a bitmask that selects only those bits.\n    const newOverflowBits = (1 << numberOfOverflowBits) - 1;\n\n    // Select the bits, and convert them to a base 32 string.\n    const newOverflow = (baseId & newOverflowBits).toString(32);\n\n    // Now we can remove those bits from the base id.\n    const restOfBaseId = baseId >> numberOfOverflowBits;\n    const restOfBaseLength = baseLength - numberOfOverflowBits;\n\n    // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n    const restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    const restOfNewBits = slot << restOfBaseLength;\n    const id = restOfNewBits | restOfBaseId;\n    const overflow = newOverflow + baseOverflow;\n\n    treeContextId = (1 << restOfLength) | id;\n    treeContextOverflow = overflow;\n  } else {\n    // Normal path\n    const newBits = slot << baseLength;\n    const id = newBits | baseId;\n    const overflow = baseOverflow;\n\n    treeContextId = (1 << length) | id;\n    treeContextOverflow = overflow;\n  }\n}\n\nexport function pushMaterializedTreeId(workInProgress: Fiber) {\n  warnIfNotHydrating();\n\n  // This component materialized an id. This will affect any ids that appear\n  // in its children.\n  const returnFiber = workInProgress.return;\n  if (returnFiber !== null) {\n    const numberOfForks = 1;\n    const slotIndex = 0;\n    pushTreeFork(workInProgress, numberOfForks);\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\n  }\n}\n\nfunction getBitLength(number: number): number {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id: number) {\n  return 1 << (getBitLength(id) - 1);\n}\n\nexport function popTreeContext(workInProgress: Fiber) {\n  // Restore the previous values.\n\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\n\nexport function getSuspendedTreeContext(): TreeContext | null {\n  warnIfNotHydrating();\n  if (treeContextProvider !== null) {\n    return {\n      id: treeContextId,\n      overflow: treeContextOverflow,\n    };\n  } else {\n    return null;\n  }\n}\n\nexport function restoreSuspendedTreeContext(\n  workInProgress: Fiber,\n  suspendedContext: TreeContext,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextId = suspendedContext.id;\n  treeContextOverflow = suspendedContext.overflow;\n  treeContextProvider = workInProgress;\n}\n\nfunction warnIfNotHydrating() {\n  if (__DEV__) {\n    if (!getIsHydrating()) {\n      console.error(\n        'Expected to be hydrating. This is a bug in React. Please file ' +\n          'an issue.',\n      );\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport {NoMode, ConcurrentMode} from './ReactTypeOfMode';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {TreeContext} from './ReactFiberTreeContext.old';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {\n  ChildDeletion,\n  Placement,\n  Hydrating,\n  NoFlags,\n  DidCapture,\n} from './ReactFiberFlags';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  getFirstHydratableChildWithinContainer,\n  getFirstHydratableChildWithinSuspenseInstance,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  shouldDeleteUnhydratedTailInstances,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateInstanceWithinContainer,\n  didNotHydrateInstanceWithinSuspenseInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableInstanceWithinContainer,\n  didNotFindHydratableTextInstanceWithinContainer,\n  didNotFindHydratableSuspenseInstanceWithinContainer,\n  didNotFindHydratableInstanceWithinSuspenseInstance,\n  didNotFindHydratableTextInstanceWithinSuspenseInstance,\n  didNotFindHydratableSuspenseInstanceWithinSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {OffscreenLane} from './ReactFiberLane.old';\nimport {\n  getSuspendedTreeContext,\n  restoreSuspendedTreeContext,\n} from './ReactFiberTreeContext.old';\nimport {queueRecoverableErrors} from './ReactFiberWorkLoop.old';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\n// This flag allows for warning supression when we expect there to be mismatches\n// due to earlier mismatches or a suspended fiber.\nlet didSuspendOrErrorDEV: boolean = false;\n\n// Hydration errors that were thrown inside this boundary\nlet hydrationErrors: Array<CapturedValue<mixed>> | null = null;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nexport function markDidThrowWhileHydratingDEV() {\n  if (__DEV__) {\n    didSuspendOrErrorDEV = true;\n  }\n}\n\nexport function didSuspendOrErrorWhileHydratingDEV() {\n  if (__DEV__) {\n    return didSuspendOrErrorDEV;\n  }\n  return false;\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance: Container = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChildWithinContainer(\n    parentInstance,\n  );\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n  treeContext: TreeContext | null,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(\n    suspenseInstance,\n  );\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n  return true;\n}\n\nfunction warnUnhydratedInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        didNotHydrateInstanceWithinContainer(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      }\n      case HostComponent: {\n        const isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n          // TODO: Delete this argument when we remove the legacy root API.\n          isConcurrentMode,\n        );\n        break;\n      }\n      case SuspenseComponent: {\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\n        if (suspenseState.dehydrated !== null)\n          didNotHydrateInstanceWithinSuspenseInstance(\n            suspenseState.dehydrated,\n            instance,\n          );\n        break;\n      }\n    }\n  }\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  warnUnhydratedInstance(returnFiber, instance);\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n\n  const deletions = returnFiber.deletions;\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction warnNonhydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  if (__DEV__) {\n    if (didSuspendOrErrorDEV) {\n      // Inside a boundary that already suspended. We're currently rendering the\n      // siblings of a suspended node. The mismatch may be due to the missing\n      // data, so it's probably a false positive.\n      return;\n    }\n\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstanceWithinContainer(\n              parentContainer,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstanceWithinContainer(\n              parentContainer,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstanceWithinContainer(\n              parentContainer,\n            );\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent: {\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            const isConcurrentMode =\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n              // TODO: Delete this argument when we remove the legacy root API.\n              isConcurrentMode,\n            );\n            break;\n          }\n          case HostText: {\n            const text = fiber.pendingProps;\n            const isConcurrentMode =\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n              // TODO: Delete this argument when we remove the legacy root API.\n              isConcurrentMode,\n            );\n            break;\n          }\n          case SuspenseComponent: {\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n          }\n        }\n        break;\n      }\n      case SuspenseComponent: {\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\n        const parentInstance = suspenseState.dehydrated;\n        if (parentInstance !== null)\n          switch (fiber.tag) {\n            case HostComponent:\n              const type = fiber.type;\n              const props = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinSuspenseInstance(\n                parentInstance,\n                type,\n                props,\n              );\n              break;\n            case HostText:\n              const text = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinSuspenseInstance(\n                parentInstance,\n                text,\n              );\n              break;\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(\n                parentInstance,\n              );\n              break;\n          }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  warnNonhydratedInstance(returnFiber, fiber);\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        hydrationParentFiber = fiber;\n        nextHydratableInstance = getFirstHydratableChild(instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        hydrationParentFiber = fiber;\n        // Text Instances don't have children so there's nothing to hydrate.\n        nextHydratableInstance = null;\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n        nextInstance,\n      );\n      if (suspenseInstance !== null) {\n        const suspenseState: SuspenseState = {\n          dehydrated: suspenseInstance,\n          treeContext: getSuspendedTreeContext(),\n          retryLane: OffscreenLane,\n        };\n        fiber.memoizedState = suspenseState;\n        // Store the dehydrated fragment as a child fiber.\n        // This simplifies the code for getHostSibling and deleting nodes,\n        // since it doesn't have to consider all Suspense boundaries and\n        // check if they're dehydrated ones or not.\n        const dehydratedFragment = createFiberFromDehydratedFragment(\n          suspenseInstance,\n        );\n        dehydratedFragment.return = fiber;\n        fiber.child = dehydratedFragment;\n        hydrationParentFiber = fiber;\n        // While a Suspense Instance does have children, we won't step into\n        // it during the first pass. Instead, we'll reenter it later.\n        nextHydratableInstance = null;\n        return true;\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction shouldClientRenderOnMismatch(fiber: Fiber) {\n  return (\n    (fiber.mode & ConcurrentMode) !== NoMode &&\n    (fiber.flags & DidCapture) === NoFlags\n  );\n}\n\nfunction throwOnHydrationMismatch(fiber: Fiber) {\n  throw new Error(\n    'Hydration failed because the initial UI does not match what was ' +\n      'rendered on the server.',\n  );\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\n      throwOnHydrationMismatch(fiber);\n    }\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\n      throwOnHydrationMismatch(fiber);\n    }\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    const prevHydrationParentFiber: Fiber = (hydrationParentFiber: any);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n  }\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n    shouldWarnIfMismatchDev,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  const shouldUpdate = hydrateTextInstance(\n    textInstance,\n    textContent,\n    fiber,\n    shouldWarnIfMismatchDev,\n  );\n  if (shouldUpdate) {\n    // We assume that prepareToHydrateHostTextInstance is called in a context where the\n    // hydration parent is the parent host component of this host text.\n    const returnFiber = hydrationParentFiber;\n    if (returnFiber !== null) {\n      switch (returnFiber.tag) {\n        case HostRoot: {\n          const parentContainer = returnFiber.stateNode.containerInfo;\n          const isConcurrentMode =\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotMatchHydratedContainerTextInstance(\n            parentContainer,\n            textInstance,\n            textContent,\n            // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode,\n            shouldWarnIfMismatchDev,\n          );\n          break;\n        }\n        case HostComponent: {\n          const parentType = returnFiber.type;\n          const parentProps = returnFiber.memoizedProps;\n          const parentInstance = returnFiber.stateNode;\n          const isConcurrentMode =\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotMatchHydratedTextInstance(\n            parentType,\n            parentProps,\n            parentInstance,\n            textInstance,\n            textContent,\n            // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode,\n            shouldWarnIfMismatchDev,\n          );\n          break;\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n  if (\n    fiber.tag !== HostRoot &&\n    (fiber.tag !== HostComponent ||\n      (shouldDeleteUnhydratedTailInstances(fiber.type) &&\n        !shouldSetTextContent(fiber.type, fiber.memoizedProps)))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    if (nextInstance) {\n      if (shouldClientRenderOnMismatch(fiber)) {\n        warnIfUnhydratedTailNodes(fiber);\n        throwOnHydrationMismatch(fiber);\n      } else {\n        while (nextInstance) {\n          deleteHydratableInstance(fiber, nextInstance);\n          nextInstance = getNextHydratableSibling(nextInstance);\n        }\n      }\n    }\n  }\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction hasUnhydratedTailNodes() {\n  return isHydrating && nextHydratableInstance !== null;\n}\n\nfunction warnIfUnhydratedTailNodes(fiber: Fiber) {\n  let nextInstance = nextHydratableInstance;\n  while (nextInstance) {\n    warnUnhydratedInstance(fiber, nextInstance);\n    nextInstance = getNextHydratableSibling(nextInstance);\n  }\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n  didSuspendOrErrorDEV = false;\n}\n\nexport function upgradeHydrationErrorsToRecoverable(): void {\n  if (hydrationErrors !== null) {\n    // Successfully completed a forced client render. The errors that occurred\n    // during the hydration attempt are now recovered. We will log them in\n    // commit phase, once the entire tree has finished.\n    queueRecoverableErrors(hydrationErrors);\n    hydrationErrors = null;\n  }\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport function queueHydrationError(error: CapturedValue<mixed>): void {\n  if (hydrationErrors === null) {\n    hydrationErrors = [error];\n  } else {\n    hydrationErrors.push(error);\n  }\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  hasUnhydratedTailNodes,\n  warnIfUnhydratedTailNodes,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.new';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = null;\n\nexport function requestCurrentTransition(): Transition | null {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\nimport hasOwnProperty from './hasOwnProperty';\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    const currentKey = keysA[i];\n    if (\n      !hasOwnProperty.call(objB, currentKey) ||\n      !is(objA[currentKey], objB[currentKey])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber | null) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack =\n      fiber === null ? null : getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function getCurrentFiber(): Fiber | null {\n  if (__DEV__) {\n    return current;\n  }\n  return null;\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport assign from 'shared/assign';\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\nimport type {\n  Fiber,\n  ContextDependency,\n  Dependencies,\n} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SharedQueue} from './ReactFiberClassUpdateQueue.old';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  NoFlags,\n  DidPropagateContext,\n  NeedsPropagation,\n} from './ReactFiberFlags';\n\nimport is from 'shared/objectIs';\nimport {createUpdate, ForceUpdate} from './ReactFiberClassUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  enableLazyContextPropagation,\n  enableServerContext,\n} from 'shared/ReactFeatureFlags';\nimport {REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED} from 'shared/ReactSymbols';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastFullyObservedContext: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(\n  providerFiber: Fiber,\n  context: ReactContext<T>,\n  nextValue: T,\n): void {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(\n  context: ReactContext<any>,\n  providerFiber: Fiber,\n): void {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n  if (isPrimaryRenderer) {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue = context._defaultValue;\n    } else {\n      context._currentValue = currentValue;\n    }\n  } else {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue2 = context._defaultValue;\n    } else {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\n\nexport function scheduleContextWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n  propagationRoot: Fiber,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated.\n      // Normally, this would mean that the rest of the\n      // ancestor path already has sufficient priority.\n      // However, this is not necessarily true inside offscreen\n      // or fallback trees because childLanes may be inconsistent\n      // with the surroundings. This is why we continue the loop.\n    }\n    if (node === propagationRoot) {\n      break;\n    }\n    node = node.return;\n  }\n  if (__DEV__) {\n    if (node !== propagationRoot) {\n      console.error(\n        'Expected to find the propagation root when scheduling context work. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n\nexport function propagateContextChange<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  if (enableLazyContextPropagation) {\n    // TODO: This path is only used by Cache components. Update\n    // lazilyPropagateParentContextChanges to look for Cache components so they\n    // can take advantage of lazy propagation.\n    const forcePropagateEntireTree = true;\n    propagateContextChanges(\n      workInProgress,\n      [context],\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  } else {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  // Only used by eager implementation\n  if (enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n\n            // Inlined `enqueueUpdate` to remove interleaved update check\n            const updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n              // Only occurs if the fiber has been unmounted.\n            } else {\n              const sharedQueue: SharedQueue<any> = (updateQueue: any).shared;\n              const pending = sharedQueue.pending;\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleContextWorkOnParentPath(\n            fiber.return,\n            renderLanes,\n            workInProgress,\n          );\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nfunction propagateContextChanges<T>(\n  workInProgress: Fiber,\n  contexts: Array<any>,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n): void {\n  // Only used by lazy implementation\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dep = list.firstContext;\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context: ReactContext<T> = contexts[i];\n          // Check if the context matches.\n          // TODO: Compare selected values to bail out early.\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleContextWorkOnParentPath(\n              consumer.return,\n              renderLanes,\n              workInProgress,\n            );\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            }\n\n            // Since we already found a match, we can stop traversing the\n            // dependency list.\n            break findChangedDep;\n          }\n        }\n        dep = dependency.next;\n      }\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\nexport function propagateParentContextChangesToDeferredTree(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\nfunction propagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n) {\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n\n  // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n  let contexts = null;\n  let parent = workInProgress;\n  let isInsidePropagationBailout = false;\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n\n      if (currentParent === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      const oldProps = currentParent.memoizedProps;\n      if (oldProps !== null) {\n        const providerType: ReactProviderType<any> = parent.type;\n        const context: ReactContext<any> = providerType._context;\n\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    }\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(\n      workInProgress,\n      contexts,\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  }\n\n  // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them —\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred — that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(currentDependencies: Dependencies) {\n  if (!enableLazyContextPropagation) {\n    return false;\n  }\n  // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n  let dependency = currentDependencies.firstContext;\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer\n      ? context._currentValue\n      : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n    dependency = dependency.next;\n  }\n  return false;\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    if (enableLazyContextPropagation) {\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    } else {\n      const firstContext = dependencies.firstContext;\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        }\n        // Reset the work-in-progress list\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\n\nexport function readContext<T>(context: ReactContext<T>): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  const value = isPrimaryRenderer\n    ? context._currentValue\n    : context._currentValue2;\n\n  if (lastFullyObservedContext === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else {\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      memoizedValue: value,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error(\n          'Context can only be read while React is rendering. ' +\n            'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n            'In function components, you can read it directly in the function body, but not ' +\n            'inside Hooks like useReducer() or useMemo().',\n        );\n      }\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n      };\n      if (enableLazyContextPropagation) {\n        currentlyRenderingFiber.flags |= NeedsPropagation;\n      }\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  UpdateQueue as HookQueue,\n  Update as HookUpdate,\n} from './ReactFiberHooks.old';\nimport type {\n  SharedQueue as ClassQueue,\n  Update as ClassUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {OffscreenInstance} from './ReactFiberOffscreenComponent';\n\nimport {\n  warnAboutUpdateOnNotYetMountedFiberInDEV,\n  throwIfInfiniteUpdateLoopDetected,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoLane,\n  NoLanes,\n  mergeLanes,\n  markHiddenUpdate,\n} from './ReactFiberLane.old';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\nimport {HostRoot, OffscreenComponent} from './ReactWorkTags';\nimport {OffscreenVisible} from './ReactFiberOffscreenComponent';\n\nexport type ConcurrentUpdate = {\n  next: ConcurrentUpdate,\n  lane: Lane,\n};\n\ntype ConcurrentQueue = {\n  pending: ConcurrentUpdate | null,\n};\n\n// If a render is in progress, and we receive an update from a concurrent event,\n// we wait until the current render is over (either finished or interrupted)\n// before adding it to the fiber/hook queue. Push to this array so we can\n// access the queue, fiber, update, et al later.\nconst concurrentQueues: Array<any> = [];\nlet concurrentQueuesIndex = 0;\n\nlet concurrentlyUpdatedLanes: Lanes = NoLanes;\n\nexport function finishQueueingConcurrentUpdates(): void {\n  const endIndex = concurrentQueuesIndex;\n  concurrentQueuesIndex = 0;\n\n  concurrentlyUpdatedLanes = NoLanes;\n\n  let i = 0;\n  while (i < endIndex) {\n    const fiber: Fiber = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const queue: ConcurrentQueue = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const update: ConcurrentUpdate = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const lane: Lane = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n\n    if (queue !== null && update !== null) {\n      const pending = queue.pending;\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n      queue.pending = update;\n    }\n\n    if (lane !== NoLane) {\n      markUpdateLaneFromFiberToRoot(fiber, update, lane);\n    }\n  }\n}\n\nexport function getConcurrentlyUpdatedLanes(): Lanes {\n  return concurrentlyUpdatedLanes;\n}\n\nfunction enqueueUpdate(\n  fiber: Fiber,\n  queue: ConcurrentQueue | null,\n  update: ConcurrentUpdate | null,\n  lane: Lane,\n) {\n  // Don't update the `childLanes` on the return path yet. If we already in\n  // the middle of rendering, wait until after it has completed.\n  concurrentQueues[concurrentQueuesIndex++] = fiber;\n  concurrentQueues[concurrentQueuesIndex++] = queue;\n  concurrentQueues[concurrentQueuesIndex++] = update;\n  concurrentQueues[concurrentQueuesIndex++] = lane;\n\n  concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane);\n\n  // The fiber's `lane` field is used in some places to check if any work is\n  // scheduled, to perform an eager bailout, so we need to update it immediately.\n  // TODO: We should probably move this to the \"shared\" queue instead.\n  fiber.lanes = mergeLanes(fiber.lanes, lane);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n}\n\nexport function enqueueConcurrentHookUpdate<S, A>(\n  fiber: Fiber,\n  queue: HookQueue<S, A>,\n  update: HookUpdate<S, A>,\n  lane: Lane,\n): FiberRoot | null {\n  const concurrentQueue: ConcurrentQueue = (queue: any);\n  const concurrentUpdate: ConcurrentUpdate = (update: any);\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\n  return getRootForUpdatedFiber(fiber);\n}\n\nexport function enqueueConcurrentHookUpdateAndEagerlyBailout<S, A>(\n  fiber: Fiber,\n  queue: HookQueue<S, A>,\n  update: HookUpdate<S, A>,\n): void {\n  // This function is used to queue an update that doesn't need a rerender. The\n  // only reason we queue it is in case there's a subsequent higher priority\n  // update that causes it to be rebased.\n  const lane = NoLane;\n  const concurrentQueue: ConcurrentQueue = (queue: any);\n  const concurrentUpdate: ConcurrentUpdate = (update: any);\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\n}\n\nexport function enqueueConcurrentClassUpdate<State>(\n  fiber: Fiber,\n  queue: ClassQueue<State>,\n  update: ClassUpdate<State>,\n  lane: Lane,\n): FiberRoot | null {\n  const concurrentQueue: ConcurrentQueue = (queue: any);\n  const concurrentUpdate: ConcurrentUpdate = (update: any);\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\n  return getRootForUpdatedFiber(fiber);\n}\n\nexport function enqueueConcurrentRenderForLane(\n  fiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  enqueueUpdate(fiber, null, null, lane);\n  return getRootForUpdatedFiber(fiber);\n}\n\n// Calling this function outside this module should only be done for backwards\n// compatibility and should always be accompanied by a warning.\nexport function unsafe_markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // NOTE: For Hyrum's Law reasons, if an infinite update loop is detected, it\n  // should throw before `markUpdateLaneFromFiberToRoot` is called. But this is\n  // undefined behavior and we can change it if we need to; it just so happens\n  // that, at the time of this writing, there's an internal product test that\n  // happens to rely on this.\n  const root = getRootForUpdatedFiber(sourceFiber);\n  markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);\n  return root;\n}\n\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  update: ConcurrentUpdate | null,\n  lane: Lane,\n): void {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  // Walk the parent path to the root and update the child lanes.\n  let isHidden = false;\n  let parent = sourceFiber.return;\n  let node = sourceFiber;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    }\n\n    if (parent.tag === OffscreenComponent) {\n      // Check if this offscreen boundary is currently hidden.\n      //\n      // The instance may be null if the Offscreen parent was unmounted. Usually\n      // the parent wouldn't be reachable in that case because we disconnect\n      // fibers from the tree when they are deleted. However, there's a weird\n      // edge case where setState is called on a fiber that was interrupted\n      // before it ever mounted. Because it never mounts, it also never gets\n      // deleted. Because it never gets deleted, its return pointer never gets\n      // disconnected. Which means it may be attached to a deleted Offscreen\n      // parent node. (This discovery suggests it may be better for memory usage\n      // if we don't attach the `return` pointer until the commit phase, though\n      // in order to do that we'd need some other way to track the return\n      // pointer during the initial render, like on the stack.)\n      //\n      // This case is always accompanied by a warning, but we still need to\n      // account for it. (There may be other cases that we haven't discovered,\n      // too.)\n      const offscreenInstance: OffscreenInstance | null = parent.stateNode;\n      if (\n        offscreenInstance !== null &&\n        !(offscreenInstance.visibility & OffscreenVisible)\n      ) {\n        isHidden = true;\n      }\n    }\n\n    node = parent;\n    parent = parent.return;\n  }\n\n  if (isHidden && update !== null && node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    markHiddenUpdate(root, update, lane);\n  }\n}\n\nfunction getRootForUpdatedFiber(sourceFiber: Fiber): FiberRoot | null {\n  // TODO: We will detect and infinite update loop and throw even if this fiber\n  // has already unmounted. This isn't really necessary but it happens to be the\n  // current behavior we've used for several release cycles. Consider not\n  // performing this check if the updated fiber already unmounted, since it's\n  // not possible for that to cause an infinite update loop.\n  throwIfInfiniteUpdateLoopDetected();\n\n  // When a setState happens, we must ensure the root is scheduled. Because\n  // update queues do not have a backpointer to the root, the only way to do\n  // this currently is to walk up the return path. This used to not be a big\n  // deal because we would have to walk up the return path to set\n  // the `childLanes`, anyway, but now those two traversals happen at\n  // different times.\n  // TODO: Consider adding a `root` backpointer on the update queue.\n  detectUpdateOnUnmountedFiber(sourceFiber, sourceFiber);\n  let node = sourceFiber;\n  let parent = node.return;\n  while (parent !== null) {\n    detectUpdateOnUnmountedFiber(sourceFiber, node);\n    node = parent;\n    parent = node.return;\n  }\n  return node.tag === HostRoot ? (node.stateNode: FiberRoot) : null;\n}\n\nfunction detectUpdateOnUnmountedFiber(sourceFiber: Fiber, parent: Fiber) {\n  if (__DEV__) {\n    const alternate = parent.alternate;\n    if (\n      alternate === null &&\n      (parent.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  NoLanes,\n  OffscreenLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  isTransitionLane,\n  intersectLanes,\n  markRootEntangled,\n} from './ReactFiberLane.old';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {\n  Callback,\n  Visibility,\n  ShouldCapture,\n  DidCapture,\n} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  markSkippedUpdateLanes,\n  isUnsafeClassRenderPhaseUpdate,\n  getWorkInProgressRootRenderLanes,\n} from './ReactFiberWorkLoop.old';\nimport {\n  enqueueConcurrentClassUpdate,\n  unsafe_markUpdateLaneFromFiberToRoot,\n} from './ReactFiberConcurrentUpdates.old';\nimport {setIsStrictModeForDevtools} from './ReactFiberDevToolsHook.old';\n\nimport assign from 'shared/assign';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\nexport type SharedQueue<State> = {|\n  pending: Update<State> | null,\n  lanes: Lanes,\n  hiddenCallbacks: Array<() => mixed> | null,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  callbacks: Array<() => mixed> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      lanes: NoLanes,\n      hiddenCallbacks: null,\n    },\n    callbacks: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      callbacks: null,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(\n  fiber: Fiber,\n  update: Update<State>,\n  lane: Lane,\n): FiberRoot | null {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return null;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n\n  if (isUnsafeClassRenderPhaseUpdate(fiber)) {\n    // This is an unsafe render phase update. Add directly to the update\n    // queue so we can process it immediately during the current render.\n    const pending = sharedQueue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    sharedQueue.pending = update;\n\n    // Update the childLanes even though we're most likely already rendering\n    // this fiber. This is for backwards compatibility in the case where you\n    // update a different component during render phase than the one that is\n    // currently renderings (a pattern that is accompanied by a warning).\n    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n  } else {\n    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n  }\n}\n\nexport function entangleTransitions(root: FiberRoot, fiber: Fiber, lane: Lane) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<mixed> = (updateQueue: any).shared;\n  if (isTransitionLane(lane)) {\n    let queueLanes = sharedQueue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            // When this update is rebased, we should not fire its\n            // callback again.\n            callback: null,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        callbacks: currentQueue.callbacks,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      // TODO: Don't need this field anymore\n      const updateEventTime = update.eventTime;\n\n      // An extra OffscreenLane bit is added to updates that were made to\n      // a hidden tree, so that we can distinguish them from updates that were\n      // already there when the tree was hidden.\n      const updateLane = removeLanes(update.lane, OffscreenLane);\n      const isHiddenUpdate = updateLane !== update.lane;\n\n      // Check if this update was made while the tree was hidden. If so, then\n      // it's not a \"base\" update and we should disregard the extra base lanes\n      // that were added to renderLanes when we entered the Offscreen tree.\n      const shouldSkipUpdate = isHiddenUpdate\n        ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\n        : !isSubsetOfLanes(renderLanes, updateLane);\n\n      if (shouldSkipUpdate) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n\n            // When this update is rebased, we should not fire its\n            // callback again.\n            callback: null,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (callback !== null) {\n          workInProgress.flags |= Callback;\n          if (isHiddenUpdate) {\n            workInProgress.flags |= Visibility;\n          }\n          const callbacks = queue.callbacks;\n          if (callbacks === null) {\n            queue.callbacks = [callback];\n          } else {\n            callbacks.push(callback);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    }\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (typeof callback !== 'function') {\n    throw new Error(\n      'Invalid argument passed as callback. Expected a function. Instead ' +\n        `received: ${callback}`,\n    );\n  }\n\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function deferHiddenCallbacks<State>(\n  updateQueue: UpdateQueue<State>,\n): void {\n  // When an update finishes on a hidden component, its callback should not\n  // be fired until/unless the component is made visible again. Stash the\n  // callback on the shared queue object so it can be fired later.\n  const newHiddenCallbacks = updateQueue.callbacks;\n  if (newHiddenCallbacks !== null) {\n    const existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n    if (existingHiddenCallbacks === null) {\n      updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;\n    } else {\n      updateQueue.shared.hiddenCallbacks = existingHiddenCallbacks.concat(\n        newHiddenCallbacks,\n      );\n    }\n  }\n}\n\nexport function commitHiddenCallbacks<State>(\n  updateQueue: UpdateQueue<State>,\n  context: any,\n): void {\n  // This component is switching from hidden -> visible. Commit any callbacks\n  // that were previously deferred.\n  const hiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n  if (hiddenCallbacks !== null) {\n    updateQueue.shared.hiddenCallbacks = null;\n    for (let i = 0; i < hiddenCallbacks.length; i++) {\n      const callback = hiddenCallbacks[i];\n      callCallback(callback, context);\n    }\n  }\n}\n\nexport function commitCallbacks<State>(\n  updateQueue: UpdateQueue<State>,\n  context: any,\n): void {\n  const callbacks = updateQueue.callbacks;\n  if (callbacks !== null) {\n    updateQueue.callbacks = null;\n    for (let i = 0; i < callbacks.length; i++) {\n      const callback = callbacks[i];\n      callCallback(callback, context);\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport * as React from 'react';\nimport {\n  LayoutStatic,\n  MountLayoutDev,\n  Update,\n  Snapshot,\n} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport assign from 'shared/assign';\nimport isArray from 'shared/isArray';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  DebugTracingMode,\n  NoMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  entangleTransitions,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactFiberClassUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook.old';\n\nconst fakeInternalInstance = {};\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentNameFromType(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      throw new Error(\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n  let partialState = getDerivedStateFromProps(nextProps, prevState);\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    let shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(\n            newProps,\n            newState,\n            nextContext,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentNameFromType(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentNameFromType(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentNameFromType(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentNameFromType(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentNameFromType(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  let instance = new ctor(props, context);\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentNameFromType(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentNameFromFiber(workInProgress) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentNameFromFiber(workInProgress) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    let fiberFlags: Flags = Update | LayoutStatic;\n    if (\n      __DEV__ &&\n      enableStrictEffects &&\n      (workInProgress.mode & StrictEffectsMode) !== NoMode\n    ) {\n      fiberFlags |= MountLayoutDev;\n    }\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update | LayoutStatic;\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update | LayoutStatic;\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update | LayoutStatic;\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing() &&\n    !(\n      enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies)\n    )\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    ) ||\n    // TODO: In some cases, we'll end up checking if context has changed twice,\n    // both before and after `shouldComponentUpdate` has been called. Not ideal,\n    // but I'm loath to refactor this function. This only happens for memoized\n    // components so it's not that common.\n    (enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies));\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {Placement, ChildDeletion, Forked} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\nimport {ClassComponent, HostText, HostPortal, Fragment} from './ReactWorkTags';\nimport isArray from 'shared/isArray';\nimport {warnAboutStringRefs} from 'shared/ReactFeatureFlags';\nimport {checkPropStringCoercion} from 'shared/CheckStringCoercion';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {pushTreeFork} from './ReactFiberTreeContext.old';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n\n    if (typeof child._store !== 'object') {\n      throw new Error(\n        'React Component in warnForMissingKey should have a _store. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    child._store.validated = true;\n\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName =\n          getComponentNameFromFiber(returnFiber) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n\n        if (ownerFiber.tag !== ClassComponent) {\n          throw new Error(\n            'Function components cannot have string refs. ' +\n              'We recommend using useRef() instead. ' +\n              'Learn more about using refs safely here: ' +\n              'https://reactjs.org/link/strict-mode-string-ref',\n          );\n        }\n\n        inst = ownerFiber.stateNode;\n      }\n\n      if (!inst) {\n        throw new Error(\n          `Missing owner for string ref ${mixedRef}. This error is likely caused by a ` +\n            'bug in React. Please file an issue.',\n        );\n      }\n      // Assigning this to a const so Flow knows it won't change in the closure\n      const resolvedInst = inst;\n\n      if (__DEV__) {\n        checkPropStringCoercion(mixedRef, 'ref');\n      }\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = resolvedInst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = resolvedInst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      if (typeof mixedRef !== 'string') {\n        throw new Error(\n          'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n        );\n      }\n\n      if (!element._owner) {\n        throw new Error(\n          `Element ref was specified as a string (${mixedRef}) but no owner was set. This could happen for one of` +\n            ' the following reasons:\\n' +\n            '1. You may be adding a ref to a function component\\n' +\n            \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n            '3. You have multiple copies of React loaded\\n' +\n            'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        );\n      }\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  const childString = Object.prototype.toString.call(newChild);\n\n  throw new Error(\n    `Objects are not valid as a React child (found: ${\n      childString === '[object Object]'\n        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n        : childString\n    }). ` +\n      'If you meant to render a collection of children, use an array ' +\n      'instead.',\n  );\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  const payload = lazyType._payload;\n  const init = lazyType._init;\n  return init(payload);\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const elementType = element.type;\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(\n        returnFiber,\n        current,\n        element.props.children,\n        lanes,\n        element.key,\n      );\n    }\n    if (current !== null) {\n      if (\n        current.elementType === elementType ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__\n          ? isCompatibleFamilyForHotReloading(current, element)\n          : false) ||\n        // Lazy types should reconcile their resolved type.\n        // We need to do this after the Hot Reloading check above,\n        // because hot reloading has different semantics than prod because\n        // it doesn't resuspend. So we can't let the call below suspend.\n        (typeof elementType === 'object' &&\n          elementType !== null &&\n          elementType.$$typeof === REACT_LAZY_TYPE &&\n          resolveLazy(elementType) === current.type)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return createChild(returnFiber, init(payload), lanes);\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return updateFromMap(\n            existingChildren,\n            returnFiber,\n            newIdx,\n            init(payload),\n            lanes,\n          );\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          const payload = child._payload;\n          const init = (child._init: any);\n          warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n          break;\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw new Error(\n        'An object is not an iterable. This error is likely caused by a bug in ' +\n          'React. Please file an issue.',\n      );\n    }\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        const elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        } else {\n          if (\n            child.elementType === elementType ||\n            // Keep this check inline so it only runs on the false path:\n            (__DEV__\n              ? isCompatibleFamilyForHotReloading(child, element)\n              : false) ||\n            // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            (typeof elementType === 'object' &&\n              elementType !== null &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              resolveLazy(elementType) === child.type)\n          ) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props);\n            existing.ref = coerceRef(returnFiber, child, element);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          // TODO: This function is supposed to be non-recursive.\n          return reconcileChildFibers(\n            returnFiber,\n            currentFirstChild,\n            init(payload),\n            lanes,\n          );\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw new Error('Resuming work not yet implemented.');\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  if (c === NO_CONTEXT) {\n    throw new Error(\n      'Expected host context to exist. This error is likely caused by a bug ' +\n        'in React. Please file an issue.',\n    );\n  }\n\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nimport {getRenderLanes, setRenderLanes} from './ReactFiberWorkLoop.old';\nimport {NoLanes, mergeLanes} from './ReactFiberLane.old';\n\n// TODO: Remove `renderLanes` context in favor of hidden context\ntype HiddenContext = {\n  // Represents the lanes that must be included when processing updates in\n  // order to reveal the hidden content.\n  // TODO: Remove `subtreeLanes` context from work loop in favor of this one.\n  baseLanes: number,\n};\n\n// TODO: This isn't being used yet, but it's intended to replace the\n// InvisibleParentContext that is currently managed by SuspenseContext.\nexport const currentTreeHiddenStackCursor: StackCursor<HiddenContext | null> = createCursor(\n  null,\n);\nexport const prevRenderLanesStackCursor: StackCursor<Lanes> = createCursor(\n  NoLanes,\n);\n\nexport function pushHiddenContext(fiber: Fiber, context: HiddenContext): void {\n  const prevRenderLanes = getRenderLanes();\n  push(prevRenderLanesStackCursor, prevRenderLanes, fiber);\n  push(currentTreeHiddenStackCursor, context, fiber);\n\n  // When rendering a subtree that's currently hidden, we must include all\n  // lanes that would have rendered if the hidden subtree hadn't been deferred.\n  // That is, in order to reveal content from hidden -> visible, we must commit\n  // all the updates that we skipped when we originally hid the tree.\n  setRenderLanes(mergeLanes(prevRenderLanes, context.baseLanes));\n}\n\nexport function reuseHiddenContextOnStack(fiber: Fiber): void {\n  // This subtree is not currently hidden, so we don't need to add any lanes\n  // to the render lanes. But we still need to push something to avoid a\n  // context mismatch. Reuse the existing context on the stack.\n  push(prevRenderLanesStackCursor, getRenderLanes(), fiber);\n  push(\n    currentTreeHiddenStackCursor,\n    currentTreeHiddenStackCursor.current,\n    fiber,\n  );\n}\n\nexport function popHiddenContext(fiber: Fiber): void {\n  // Restore the previous render lanes from the stack\n  setRenderLanes(prevRenderLanesStackCursor.current);\n\n  pop(currentTreeHiddenStackCursor, fiber);\n  pop(prevRenderLanesStackCursor, fiber);\n}\n\nexport function isCurrentTreeHidden() {\n  return currentTreeHiddenStackCursor.current !== null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {enableSuspenseAvoidThisFallback} from 'shared/ReactFeatureFlags';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {isCurrentTreeHidden} from './ReactFiberHiddenContext.old';\nimport {SuspenseComponent, OffscreenComponent} from './ReactWorkTags';\n\n// The Suspense handler is the boundary that should capture if something\n// suspends, i.e. it's the nearest `catch` block on the stack.\nconst suspenseHandlerStackCursor: StackCursor<Fiber | null> = createCursor(\n  null,\n);\n\nfunction shouldAvoidedBoundaryCapture(\n  workInProgress: Fiber,\n  handlerOnStack: Fiber,\n  props: any,\n): boolean {\n  if (enableSuspenseAvoidThisFallback) {\n    // If the parent is already showing content, and we're not inside a hidden\n    // tree, then we should show the avoided fallback.\n    if (handlerOnStack.alternate !== null && !isCurrentTreeHidden()) {\n      return true;\n    }\n\n    // If the handler on the stack is also an avoided boundary, then we should\n    // favor this inner one.\n    if (\n      handlerOnStack.tag === SuspenseComponent &&\n      handlerOnStack.memoizedProps.unstable_avoidThisFallback === true\n    ) {\n      return true;\n    }\n\n    // If this avoided boundary is dehydrated, then it should capture.\n    const suspenseState: SuspenseState | null = workInProgress.memoizedState;\n    if (suspenseState !== null && suspenseState.dehydrated !== null) {\n      return true;\n    }\n  }\n\n  // If none of those cases apply, then we should avoid this fallback and show\n  // the outer one instead.\n  return false;\n}\n\nexport function pushPrimaryTreeSuspenseHandler(handler: Fiber): void {\n  const props = handler.pendingProps;\n  const handlerOnStack = suspenseHandlerStackCursor.current;\n  if (\n    enableSuspenseAvoidThisFallback &&\n    props.unstable_avoidThisFallback === true &&\n    handlerOnStack !== null &&\n    !shouldAvoidedBoundaryCapture(handler, handlerOnStack, props)\n  ) {\n    // This boundary should not capture if something suspends. Reuse the\n    // existing handler on the stack.\n    push(suspenseHandlerStackCursor, handlerOnStack, handler);\n  } else {\n    // Push this handler onto the stack.\n    push(suspenseHandlerStackCursor, handler, handler);\n  }\n}\n\nexport function pushFallbackTreeSuspenseHandler(fiber: Fiber): void {\n  // We're about to render the fallback. If something in the fallback suspends,\n  // it's akin to throwing inside of a `catch` block. This boundary should not\n  // capture. Reuse the existing handler on the stack.\n  reuseSuspenseHandlerOnStack(fiber);\n}\n\nexport function pushOffscreenSuspenseHandler(fiber: Fiber): void {\n  if (fiber.tag === OffscreenComponent) {\n    push(suspenseHandlerStackCursor, fiber, fiber);\n  } else {\n    // This is a LegacyHidden component.\n    reuseSuspenseHandlerOnStack(fiber);\n  }\n}\n\nexport function reuseSuspenseHandlerOnStack(fiber: Fiber) {\n  push(suspenseHandlerStackCursor, getSuspenseHandler(), fiber);\n}\n\nexport function getSuspenseHandler(): Fiber | null {\n  return suspenseHandlerStackCursor.current;\n}\n\nexport function popSuspenseHandler(fiber: Fiber): void {\n  pop(suspenseHandlerStackCursor, fiber);\n}\n\n// SuspenseList context\n// TODO: Move to a separate module? We may change the SuspenseList\n// implementation to hide/show in the commit phase, anyway.\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseListContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseListContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseListContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function pushSuspenseListContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseListContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {TreeContext} from './ReactFiberTreeContext.old';\n\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n  unstable_name?: string,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  treeContext: null | TreeContext,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n|};\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*   */ 0b0000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b0001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Insertion = /*  */ 0b0010;\nexport const Layout = /*    */ 0b0100;\nexport const Passive = /*   */ 0b1000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n  StartTransitionOptions,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher, HookType} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  enableCache,\n  enableUseRefAccessWarning,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableUseMutableSource,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  SyncLane,\n  OffscreenLane,\n  NoLanes,\n  isSubsetOfLanes,\n  includesBlockingLane,\n  includesOnlyNonUrgentLanes,\n  claimNextTransitionLane,\n  mergeLanes,\n  removeLanes,\n  intersectLanes,\n  isTransitionLane,\n  markRootEntangled,\n  markRootMutableRead,\n  NoTimestamp,\n} from './ReactFiberLane.old';\nimport {\n  ContinuousEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  higherEventPriority,\n} from './ReactEventPriorities.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {HostRoot, CacheComponent} from './ReactWorkTags';\nimport {\n  LayoutStatic as LayoutStaticEffect,\n  MountLayoutDev as MountLayoutDevEffect,\n  MountPassiveDev as MountPassiveDevEffect,\n  Passive as PassiveEffect,\n  PassiveStatic as PassiveStaticEffect,\n  StaticMask as StaticMaskEffect,\n  Update as UpdateEffect,\n  StoreConsistency,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n  Insertion as HookInsertion,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  getWorkInProgressRootRenderLanes,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  markSkippedUpdateLanes,\n} from './ReactFiberWorkLoop.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport is from 'shared/objectIs';\nimport isArray from 'shared/isArray';\nimport {\n  markWorkInProgressReceivedUpdate,\n  checkIfWorkInProgressReceivedUpdate,\n} from './ReactFiberBeginWork.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './ReactFiberDevToolsHook.old';\nimport {createCache, CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createUpdate as createLegacyQueueUpdate,\n  enqueueUpdate as enqueueLegacyQueueUpdate,\n  entangleTransitions as entangleLegacyQueueTransitions,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  enqueueConcurrentHookUpdate,\n  enqueueConcurrentHookUpdateAndEagerlyBailout,\n  enqueueConcurrentRenderForLane,\n} from './ReactFiberConcurrentUpdates.old';\nimport {getTreeId} from './ReactFiberTreeContext.old';\nimport {now} from './Scheduler';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport type Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  hasEagerState: boolean,\n  eagerState: S | null,\n  next: Update<S, A>,\n|};\n\nexport type UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  lanes: Lanes,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnUncachedGetSnapshot;\nif (__DEV__) {\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: any,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\ntype StoreInstance<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\ntype StoreConsistencyCheck<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\nexport type FunctionComponentUpdateQueue = {|\n  lastEffect: Effect | null,\n  stores: Array<StoreConsistencyCheck<any>> | null,\n|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n// Counts the number of useId hooks in this component.\nlet localIdCounter: number = 0;\n// Used for ids that are generated completely client-side (i.e. not during\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\nlet globalClientIdCounter: number = 0;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  throw new Error(\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      localIdCounter = 0;\n\n      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n        throw new Error(\n          'Too many re-renders. React limits the number of renders to prevent ' +\n            'an infinite loop.',\n        );\n      }\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n    if (\n      current !== null &&\n      (current.flags & StaticMaskEffect) !==\n        (workInProgress.flags & StaticMaskEffect) &&\n      // Disable this warning in legacy mode, because legacy Suspense is weird\n      // and creates false positives. To make this work in legacy mode, we'd\n      // need to mark fibers that commit in an incomplete state, somehow. For\n      // now I'll disable the warning that most of the bugs that would trigger\n      // it are either exclusive to concurrent mode or exist in both.\n      (current.mode & ConcurrentMode) !== NoMode\n    ) {\n      console.error(\n        'Internal React error: Expected static flag was missing. Please ' +\n          'notify the React team.',\n      );\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n  // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  if (didRenderTooFewHooks) {\n    throw new Error(\n      'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n        'early return statement.',\n    );\n  }\n\n  if (enableLazyContextPropagation) {\n    if (current !== null) {\n      if (!checkIfWorkInProgressReceivedUpdate()) {\n        // If there were no changes to props or state, we need to check if there\n        // was a context change. We didn't already do this because there's no\n        // 1:1 correspondence between dependencies and hooks. Although, because\n        // there almost always is in the common case (`readContext` is an\n        // internal API), we could compare in there. OTOH, we only hit this case\n        // if everything else bails out, so on the whole it might be better to\n        // keep the comparison out of the common path.\n        const currentDependencies = current.dependencies;\n        if (\n          currentDependencies !== null &&\n          checkIfContextChanged(currentDependencies)\n        ) {\n          markWorkInProgressReceivedUpdate();\n        }\n      }\n    }\n  }\n  return children;\n}\n\nexport function checkDidRenderIdHook() {\n  // This should be called immediately after every renderWithHooks call.\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n  // separate function to avoid using an array tuple.\n  const didRenderIdHook = localIdCounter !== 0;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (workInProgress.mode & StrictEffectsMode) !== NoMode\n  ) {\n    workInProgress.flags &= ~(\n      MountPassiveDevEffect |\n      MountLayoutDevEffect |\n      PassiveEffect |\n      UpdateEffect\n    );\n  } else {\n    workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  }\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n  localIdCounter = 0;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    if (nextCurrentHook === null) {\n      throw new Error('Rendered more hooks than during the previous render.');\n    }\n\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n    stores: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, A> = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchReducerAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      // An extra OffscreenLane bit is added to updates that were made to\n      // a hidden tree, so that we can distinguish them from updates that were\n      // already there when the tree was hidden.\n      const updateLane = removeLanes(update.lane, OffscreenLane);\n      const isHiddenUpdate = updateLane !== update.lane;\n\n      // Check if this update was made while the tree was hidden. If so, then\n      // it's not a \"base\" update and we should disregard the extra base lanes\n      // that were added to renderLanes when we entered the Offscreen tree.\n      const shouldSkipUpdate = isHiddenUpdate\n        ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\n        : !isSubsetOfLanes(renderLanes, updateLane);\n\n      if (shouldSkipUpdate) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            hasEagerState: update.hasEagerState,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubscribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    // Intentioally throw an error to force React to retry synchronously. During\n    // the synchronous retry, it will block interleaved mutations, so we should\n    // get a consistent read. Therefore, the following error should never be\n    // visible to the user.\n\n    // We expect this error not to be thrown during the synchronous retry,\n    // because we blocked interleaved mutations.\n    throw new Error(\n      'Cannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n\n  if (root === null) {\n    throw new Error(\n      'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n    );\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubscribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue: UpdateQueue<Snapshot, BasicStateAction<Snapshot>> = {\n      pending: null,\n      lanes: NoLanes,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchSetState.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubscribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const hook = mountWorkInProgressHook();\n\n  let nextSnapshot;\n  const isHydrating = getIsHydrating();\n  if (isHydrating) {\n    if (getServerSnapshot === undefined) {\n      throw new Error(\n        'Missing getServerSnapshot, which is required for ' +\n          'server-rendered content. Will revert to client rendering.',\n      );\n    }\n    nextSnapshot = getServerSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        if (nextSnapshot !== getServerSnapshot()) {\n          console.error(\n            'The result of getServerSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n  } else {\n    nextSnapshot = getSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        const cachedSnapshot = getSnapshot();\n        if (!is(nextSnapshot, cachedSnapshot)) {\n          console.error(\n            'The result of getSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n    const root: FiberRoot | null = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  hook.memoizedState = nextSnapshot;\n  const inst: StoreInstance<T> = {\n    value: nextSnapshot,\n    getSnapshot,\n  };\n  hook.queue = inst;\n\n  // Schedule an effect to subscribe to the store.\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\n\n  // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n  // TODO: We can move this to the passive phase once we add a pre-commit\n  // consistency check. See the next comment.\n  fiber.flags |= PassiveEffect;\n  pushEffect(\n    HookHasEffect | HookPassive,\n    updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n    undefined,\n    null,\n  );\n\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const hook = updateWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  const nextSnapshot = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedSnapshot = getSnapshot();\n      if (!is(nextSnapshot, cachedSnapshot)) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n  const prevSnapshot = hook.memoizedState;\n  const snapshotChanged = !is(prevSnapshot, nextSnapshot);\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n  const inst = hook.queue;\n\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n    subscribe,\n  ]);\n\n  // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n  if (\n    inst.getSnapshot !== getSnapshot ||\n    snapshotChanged ||\n    // Check if the susbcribe function changed. We can save some memory by\n    // checking whether we scheduled a subscription effect above.\n    (workInProgressHook !== null &&\n      workInProgressHook.memoizedState.tag & HookHasEffect)\n  ) {\n    fiber.flags |= PassiveEffect;\n    pushEffect(\n      HookHasEffect | HookPassive,\n      updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n      undefined,\n      null,\n    );\n\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    const root: FiberRoot | null = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck<T>(\n  fiber: Fiber,\n  getSnapshot: () => T,\n  renderedSnapshot: T,\n) {\n  fiber.flags |= StoreConsistency;\n  const check: StoreConsistencyCheck<T> = {\n    getSnapshot,\n    value: renderedSnapshot,\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.stores = [check];\n  } else {\n    const stores = componentUpdateQueue.stores;\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance<T>(\n  fiber: Fiber,\n  inst: StoreInstance<T>,\n  nextSnapshot: T,\n  getSnapshot: () => T,\n) {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot;\n\n  // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  const handleStoreChange = () => {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  };\n  // Subscribe to the store and return a clean-up function.\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n  }\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchSetState.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nlet stackContainsErrorMessage: boolean | null = null;\n\nfunction getCallerStackFrame(): string {\n  // eslint-disable-next-line react-internal/prod-error-codes\n  const stackFrames = new Error('Error message').stack.split('\\n');\n\n  // Some browsers (e.g. Chrome) include the error message in the stack\n  // but others (e.g. Firefox) do not.\n  if (stackContainsErrorMessage === null) {\n    stackContainsErrorMessage = stackFrames[0].includes('Error message');\n  }\n\n  return stackContainsErrorMessage\n    ? stackFrames.slice(3, 4).join('\\n')\n    : stackFrames.slice(2, 3).join('\\n');\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  if (enableUseRefAccessWarning) {\n    if (__DEV__) {\n      // Support lazy initialization pattern shown in docs.\n      // We need to store the caller stack frame so that we don't warn on subsequent renders.\n      let hasBeenInitialized = initialValue != null;\n      let lazyInitGetterStack = null;\n      let didCheckForLazyInit = false;\n\n      // Only warn once per component+hook.\n      let didWarnAboutRead = false;\n      let didWarnAboutWrite = false;\n\n      let current = initialValue;\n      const ref = {\n        get current() {\n          if (!hasBeenInitialized) {\n            didCheckForLazyInit = true;\n            lazyInitGetterStack = getCallerStackFrame();\n          } else if (currentlyRenderingFiber !== null && !didWarnAboutRead) {\n            if (\n              lazyInitGetterStack === null ||\n              lazyInitGetterStack !== getCallerStackFrame()\n            ) {\n              didWarnAboutRead = true;\n              console.warn(\n                '%s: Unsafe read of a mutable value during render.\\n\\n' +\n                  'Reading from a ref during render is only safe if:\\n' +\n                  '1. The ref value has not been updated, or\\n' +\n                  '2. The ref holds a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n          return current;\n        },\n        set current(value) {\n          if (currentlyRenderingFiber !== null && !didWarnAboutWrite) {\n            if (hasBeenInitialized || !didCheckForLazyInit) {\n              didWarnAboutWrite = true;\n              console.warn(\n                '%s: Unsafe write of a mutable value during render.\\n\\n' +\n                  'Writing to a ref during render is only safe if the ref holds ' +\n                  'a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n\n          hasBeenInitialized = true;\n          current = value;\n        },\n      };\n      Object.seal(ref);\n      hook.memoizedState = ref;\n      return ref;\n    } else {\n      const ref = {current: initialValue};\n      hook.memoizedState = ref;\n      return ref;\n    }\n  } else {\n    const ref = {current: initialValue};\n    hook.memoizedState = ref;\n    return ref;\n  }\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    return mountEffectImpl(\n      MountPassiveDevEffect | PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  } else {\n    return mountEffectImpl(\n      PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  }\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(PassiveEffect, HookPassive, create, deps);\n}\n\nfunction mountInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return mountEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction updateInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  let fiberFlags: Flags = UpdateEffect | LayoutStaticEffect;\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(fiberFlags, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  let fiberFlags: Flags = UpdateEffect | LayoutStaticEffect;\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(\n    fiberFlags,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = value;\n  return value;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const hook = updateWorkInProgressHook();\n  const resolvedCurrentHook: Hook = (currentHook: any);\n  const prevValue: T = resolvedCurrentHook.memoizedState;\n  return updateDeferredValueImpl(hook, prevValue, value);\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const hook = updateWorkInProgressHook();\n  if (currentHook === null) {\n    // This is a rerender during a mount.\n    hook.memoizedState = value;\n    return value;\n  } else {\n    // This is a rerender during an update.\n    const prevValue: T = currentHook.memoizedState;\n    return updateDeferredValueImpl(hook, prevValue, value);\n  }\n}\n\nfunction updateDeferredValueImpl<T>(hook: Hook, prevValue: T, value: T): T {\n  const shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n  if (shouldDeferValue) {\n    // This is an urgent update. If the value has changed, keep using the\n    // previous value and spawn a deferred render to update it later.\n\n    if (!is(value, prevValue)) {\n      // Schedule a deferred render\n      const deferredLane = claimNextTransitionLane();\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        deferredLane,\n      );\n      markSkippedUpdateLanes(deferredLane);\n\n      // Set this to true to indicate that the rendered value is inconsistent\n      // from the latest value. The name \"baseState\" doesn't really match how we\n      // use it because we're reusing a state hook field instead of creating a\n      // new one.\n      hook.baseState = true;\n    }\n\n    // Reuse the previous value\n    return prevValue;\n  } else {\n    // This is not an urgent update, so we can use the latest value regardless\n    // of what it is. No need to defer it.\n\n    // However, if we're currently inside a spawned render, then we need to mark\n    // this as an update to prevent the fiber from bailing out.\n    //\n    // `baseState` is true when the current value is different from the rendered\n    // value. The name doesn't really match how we use it because we're reusing\n    // a state hook field instead of creating a new one.\n    if (hook.baseState) {\n      // Flip this back to false.\n      hook.baseState = false;\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = value;\n    return value;\n  }\n}\n\nfunction startTransition(setPending, callback, options) {\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(\n    higherEventPriority(previousPriority, ContinuousEventPriority),\n  );\n\n  setPending(true);\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = {};\n  const currentTransition = ReactCurrentBatchConfig.transition;\n\n  if (enableTransitionTracing) {\n    if (options !== undefined && options.name !== undefined) {\n      ReactCurrentBatchConfig.transition.name = options.name;\n      ReactCurrentBatchConfig.transition.startTime = now();\n    }\n  }\n\n  if (__DEV__) {\n    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n  }\n\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    if (__DEV__) {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        const updatedFibersCount = currentTransition._updatedFibers.size;\n        if (updatedFibersCount > 10) {\n          console.warn(\n            'Detected a large number of updates inside startTransition. ' +\n              'If this is due to a subscription please re-write it to use React provided hooks. ' +\n              'Otherwise concurrent mode guarantees are off the table.',\n          );\n        }\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method never changes.\n  const start = startTransition.bind(null, setPending);\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending] = updateState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending] = rerenderState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction mountId(): string {\n  const hook = mountWorkInProgressHook();\n\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n  const identifierPrefix = root.identifierPrefix;\n\n  let id;\n  if (getIsHydrating()) {\n    const treeId = getTreeId();\n\n    // Use a captial R prefix for server-generated ids.\n    id = ':' + identifierPrefix + 'R' + treeId;\n\n    // Unless this is the first id at this level, append a number at the end\n    // that represents the position of this useId hook among all the useId\n    // hooks for this fiber.\n    const localId = localIdCounter++;\n    if (localId > 0) {\n      id += 'H' + localId.toString(32);\n    }\n\n    id += ':';\n  } else {\n    // Use a lowercase r prefix for client-generated ids.\n    const globalClientId = globalClientIdCounter++;\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId(): string {\n  const hook = updateWorkInProgressHook();\n  const id: string = hook.memoizedState;\n  return id;\n}\n\nfunction mountRefresh() {\n  const hook = mountWorkInProgressHook();\n  const refresh = (hook.memoizedState = refreshCache.bind(\n    null,\n    currentlyRenderingFiber,\n  ));\n  return refresh;\n}\n\nfunction updateRefresh() {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction refreshCache<T>(fiber: Fiber, seedKey: ?() => T, seedValue: T) {\n  if (!enableCache) {\n    return;\n  }\n  // TODO: Does Cache work in legacy mode? Should decide and write a test.\n  // TODO: Consider warning if the refresh is at discrete priority, or if we\n  // otherwise suspect that it wasn't batched properly.\n  let provider = fiber.return;\n  while (provider !== null) {\n    switch (provider.tag) {\n      case CacheComponent:\n      case HostRoot: {\n        // Schedule an update on the cache boundary to trigger a refresh.\n        const lane = requestUpdateLane(provider);\n        const eventTime = requestEventTime();\n        const refreshUpdate = createLegacyQueueUpdate(eventTime, lane);\n        const root = enqueueLegacyQueueUpdate(provider, refreshUpdate, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, provider, lane, eventTime);\n          entangleLegacyQueueTransitions(root, provider, lane);\n        }\n\n        // TODO: If a refresh never commits, the new cache created here must be\n        // released. A simple case is start refreshing a cache boundary, but then\n        // unmount that boundary before the refresh completes.\n        const seededCache = createCache();\n        if (seedKey !== null && seedKey !== undefined && root !== null) {\n          // Seed the cache with the value passed by the caller. This could be\n          // from a server mutation, or it could be a streaming response.\n          seededCache.data.set(seedKey, seedValue);\n        }\n\n        const payload = {\n          cache: seededCache,\n        };\n        refreshUpdate.payload = payload;\n        return;\n      }\n    }\n    provider = provider.return;\n  }\n  // TODO: Warn if unmounted?\n}\n\nfunction dispatchReducerAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      const eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction dispatchSetState<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const alternate = fiber.alternate;\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            // TODO: Do we still need to entangle transitions in this case?\n            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update);\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      const eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction isRenderPhaseUpdate(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  return (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  );\n}\n\nfunction enqueueRenderPhaseUpdate<S, A>(\n  queue: UpdateQueue<S, A>,\n  update: Update<S, A>,\n) {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  const pending = queue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  queue.pending = update;\n}\n\n// TODO: Move to ReactFiberConcurrentUpdates?\nfunction entangleTransitionUpdate<S, A>(\n  root: FiberRoot,\n  queue: UpdateQueue<S, A>,\n  lane: Lane,\n) {\n  if (isTransitionLane(lane)) {\n    let queueLanes = queue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nfunction markUpdateInDevTools(fiber, lane, action) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentNameFromFiber(fiber) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nfunction getCacheSignal(): AbortSignal {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  return cache.controller.signal;\n}\n\nfunction getCacheForType<T>(resourceType: () => T): T {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  let cacheForType: T | void = (cache.data.get(resourceType): any);\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.data.set(resourceType, cacheForType);\n  }\n  return cacheForType;\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (ContextOnlyDispatcher: Dispatcher).getCacheSignal = getCacheSignal;\n  (ContextOnlyDispatcher: Dispatcher).getCacheForType = getCacheForType;\n  (ContextOnlyDispatcher: Dispatcher).useCacheRefresh = throwInvalidHookError;\n}\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useInsertionEffect: mountInsertionEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useSyncExternalStore: mountSyncExternalStore,\n  useId: mountId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnMount: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnMount: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnMount: Dispatcher).useCacheRefresh = mountRefresh;\n}\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnUpdate: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnRerender: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnRerender: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnRerender: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      mountHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {HostRoot, Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  isCurrentUpdateNested(): boolean,\n  markNestedUpdateScheduled(): void,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  syncNestedUpdateFlag(): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\nlet currentUpdateIsNested: boolean = false;\nlet nestedUpdateScheduled: boolean = false;\n\nfunction isCurrentUpdateNested(): boolean {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  isCurrentUpdateNested,\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  resetNestedUpdateFlag,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n  digest: string | null,\n|};\n\nexport function createCapturedValueAtFiber<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n    digest: null,\n  };\n}\n\nexport function createCapturedValue<T>(\n  value: T,\n  digest: ?string,\n  stack: ?string,\n): CapturedValue<T> {\n  return {\n    value,\n    source: null,\n    stack: stack != null ? stack : null,\n    digest: digest != null ? digest : null,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from '../ReactFiber.old';\nimport type {CapturedValue} from '../ReactCapturedValue';\n\nimport {ClassComponent} from '../ReactWorkTags';\n\n// Module provided by RN:\nimport {ReactFiberErrorDialog as RNImpl} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\n\nif (typeof RNImpl.showErrorDialog !== 'function') {\n  throw new Error(\n    'Expected ReactFiberErrorDialog.showErrorDialog to be a function.',\n  );\n}\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  const capturedError = {\n    componentStack: errorInfo.stack !== null ? errorInfo.stack : '',\n    error: errorInfo.value,\n    errorBoundary:\n      boundary !== null && boundary.tag === ClassComponent\n        ? boundary.stateNode\n        : null,\n  };\n  return RNImpl.showErrorDialog(capturedError);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {HostRoot} from 'react-reconciler/src/ReactWorkTags';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentNameFromFiber(source) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        const errorBoundaryName =\n          getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactFiberClassUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {OffscreenQueue} from './ReactFiberOffscreenComponent';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostRoot,\n  IncompleteClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  SuspenseComponent,\n  OffscreenComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n  ForceClientRender,\n} from './ReactFiberFlags';\nimport {NoMode, ConcurrentMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableLazyContextPropagation,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValueAtFiber} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {getSuspenseHandler} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  renderDidSuspendDelayIfPossible,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n  restorePendingUpdaters,\n} from './ReactFiberWorkLoop.old';\nimport {propagateParentContextChangesToDeferredTree} from './ReactFiberNewContext.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n  includesSyncLane,\n} from './ReactFiberLane.old';\nimport {\n  getIsHydrating,\n  markDidThrowWhileHydratingDEV,\n  queueHydrationError,\n} from './ReactFiberHydrationContext.old';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      return getDerivedStateFromError(error);\n    };\n    update.callback = () => {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentNameFromFiber(fiber) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber: Fiber, rootRenderLanes: Lanes) {\n  if (enableLazyContextPropagation) {\n    const currentSourceFiber = sourceFiber.alternate;\n    if (currentSourceFiber !== null) {\n      // Since we never visited the children of the suspended component, we\n      // need to propagate the context change now, to ensure that we visit\n      // them during the retry.\n      //\n      // We don't have to do this for errors because we retry errors without\n      // committing in between. So this is specific to Suspense.\n      propagateParentContextChangesToDeferredTree(\n        currentSourceFiber,\n        sourceFiber,\n        rootRenderLanes,\n      );\n    }\n  }\n\n  // Reset the memoizedState to what it was before we attempted to render it.\n  // A legacy mode Suspense quirk, only relevant to hook components.\n  const tag = sourceFiber.tag;\n  if (\n    (sourceFiber.mode & ConcurrentMode) === NoMode &&\n    (tag === FunctionComponent ||\n      tag === ForwardRef ||\n      tag === SimpleMemoComponent)\n  ) {\n    const currentSource = sourceFiber.alternate;\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction markSuspenseBoundaryShouldCapture(\n  suspenseBoundary: Fiber,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  root: FiberRoot,\n  rootRenderLanes: Lanes,\n): Fiber | null {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n      // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (sourceFiber.tag === ClassComponent) {\n        const currentSourceFiber = sourceFiber.alternate;\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          const update = createUpdate(NoTimestamp, SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update, SyncLane);\n        }\n      }\n\n      // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n    return suspenseBoundary;\n  }\n  // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n  suspenseBoundary.flags |= ShouldCapture;\n  // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    // This is a wakeable. The component suspended.\n    const wakeable: Wakeable = (value: any);\n    resetSuspendedComponent(sourceFiber, rootRenderLanes);\n\n    if (__DEV__) {\n      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n        markDidThrowWhileHydratingDEV();\n      }\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(sourceFiber) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    const suspenseBoundary = getSuspenseHandler();\n    if (suspenseBoundary !== null) {\n      switch (suspenseBoundary.tag) {\n        case SuspenseComponent: {\n          suspenseBoundary.flags &= ~ForceClientRender;\n          markSuspenseBoundaryShouldCapture(\n            suspenseBoundary,\n            returnFiber,\n            sourceFiber,\n            root,\n            rootRenderLanes,\n          );\n          // Retry listener\n          //\n          // If the fallback does commit, we need to attach a different type of\n          // listener. This one schedules an update on the Suspense boundary to\n          // turn the fallback state off.\n          //\n          // Stash the wakeable on the boundary fiber so we can access it in the\n          // commit phase.\n          //\n          // When the wakeable resolves, we'll attempt to render the boundary\n          // again (\"retry\").\n          const wakeables: Set<Wakeable> | null = (suspenseBoundary.updateQueue: any);\n          if (wakeables === null) {\n            suspenseBoundary.updateQueue = new Set([wakeable]);\n          } else {\n            wakeables.add(wakeable);\n          }\n          break;\n        }\n        case OffscreenComponent: {\n          if (suspenseBoundary.mode & ConcurrentMode) {\n            suspenseBoundary.flags |= ShouldCapture;\n            const offscreenQueue: OffscreenQueue | null = (suspenseBoundary.updateQueue: any);\n            if (offscreenQueue === null) {\n              const newOffscreenQueue: OffscreenQueue = {\n                transitions: null,\n                markerInstances: null,\n                wakeables: new Set([wakeable]),\n              };\n              suspenseBoundary.updateQueue = newOffscreenQueue;\n            } else {\n              const wakeables = offscreenQueue.wakeables;\n              if (wakeables === null) {\n                offscreenQueue.wakeables = new Set([wakeable]);\n              } else {\n                wakeables.add(wakeable);\n              }\n            }\n            break;\n          }\n        }\n        // eslint-disable-next-line no-fallthrough\n        default: {\n          throw new Error(\n            `Unexpected Suspense handler tag (${suspenseBoundary.tag}). This ` +\n              'is a bug in React.',\n          );\n        }\n      }\n      // We only attach ping listeners in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n      if (suspenseBoundary.mode & ConcurrentMode) {\n        attachPingListener(root, wakeable, rootRenderLanes);\n      }\n      return;\n    } else {\n      // No boundary was found. Unless this is a sync update, this is OK.\n      // We can suspend and wait for more data to arrive.\n\n      if (!includesSyncLane(rootRenderLanes)) {\n        // This is not a sync update. Suspend. Since we're not activating a\n        // Suspense boundary, this will unwind all the way to the root without\n        // performing a second pass to render a fallback. (This is arguably how\n        // refresh transitions should work, too, since we're not going to commit\n        // the fallbacks anyway.)\n        //\n        // This case also applies to initial hydration.\n        attachPingListener(root, wakeable, rootRenderLanes);\n        renderDidSuspendDelayIfPossible();\n        return;\n      }\n\n      // This is a sync/discrete update. We treat this case like an error\n      // because discrete renders are expected to produce a complete tree\n      // synchronously to maintain consistency with external state.\n      const uncaughtSuspenseError = new Error(\n        'A component suspended while responding to synchronous input. This ' +\n          'will cause the UI to be replaced with a loading indicator. To ' +\n          'fix, updates that suspend should be wrapped ' +\n          'with startTransition.',\n      );\n\n      // If we're outside a transition, fall through to the regular error path.\n      // The error will be caught by the nearest suspense boundary.\n      value = uncaughtSuspenseError;\n    }\n  } else {\n    // This is a regular error, not a Suspense wakeable.\n    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n      markDidThrowWhileHydratingDEV();\n      const suspenseBoundary = getSuspenseHandler();\n      // If the error was thrown during hydration, we may be able to recover by\n      // discarding the dehydrated content and switching to a client render.\n      // Instead of surfacing the error, find the nearest Suspense boundary\n      // and render it again without hydration.\n      if (suspenseBoundary !== null) {\n        if ((suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n          // Set a flag to indicate that we should try rendering the normal\n          // children again, not the fallback.\n          suspenseBoundary.flags |= ForceClientRender;\n        }\n        markSuspenseBoundaryShouldCapture(\n          suspenseBoundary,\n          returnFiber,\n          sourceFiber,\n          root,\n          rootRenderLanes,\n        );\n\n        // Even though the user may not be affected by this error, we should\n        // still log it so it can be fixed.\n        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n        return;\n      }\n    } else {\n      // Otherwise, fall through to the error path.\n    }\n  }\n\n  value = createCapturedValueAtFiber(value, sourceFiber);\n  renderDidError(value);\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\nimport {enableCache, enableTransitionTracing} from 'shared/ReactFeatureFlags';\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  getWorkInProgressRoot,\n  getWorkInProgressTransitions,\n} from './ReactFiberWorkLoop.old';\nimport {\n  createCache,\n  retainCache,\n  CacheContext,\n} from './ReactFiberCacheComponent.old';\n\n// When retrying a Suspense/Offscreen boundary, we restore the cache that was\n// used during the previous render by placing it here, on the stack.\nconst resumedCache: StackCursor<Cache | null> = createCursor(null);\n\n// During the render/synchronous commit phase, we don't actually process the\n// transitions. Therefore, we want to lazily combine transitions. Instead of\n// comparing the arrays of transitions when we combine them and storing them\n// and filtering out the duplicates, we will instead store the unprocessed transitions\n// in an array and actually filter them in the passive phase.\nconst transitionStack: StackCursor<Array<Transition> | null> = createCursor(\n  null,\n);\n\nfunction peekCacheFromPool(): Cache | null {\n  if (!enableCache) {\n    return (null: any);\n  }\n\n  // Check if the cache pool already has a cache we can use.\n\n  // If we're rendering inside a Suspense boundary that is currently hidden,\n  // we should use the same cache that we used during the previous render, if\n  // one exists.\n  const cacheResumedFromPreviousRender = resumedCache.current;\n  if (cacheResumedFromPreviousRender !== null) {\n    return cacheResumedFromPreviousRender;\n  }\n\n  // Otherwise, check the root's cache pool.\n  const root = (getWorkInProgressRoot(): any);\n  const cacheFromRootCachePool = root.pooledCache;\n\n  return cacheFromRootCachePool;\n}\n\nexport function requestCacheFromPool(renderLanes: Lanes): Cache {\n  // Similar to previous function, except if there's not already a cache in the\n  // pool, we allocate a new one.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool !== null) {\n    return cacheFromPool;\n  }\n\n  // Create a fresh cache and add it to the root cache pool. A cache can have\n  // multiple owners:\n  // - A cache pool that lives on the FiberRoot. This is where all fresh caches\n  //   are originally created (TODO: except during refreshes, until we implement\n  //   this correctly). The root takes ownership immediately when the cache is\n  //   created. Conceptually, root.pooledCache is an Option<Arc<Cache>> (owned),\n  //   and the return value of this function is a &Arc<Cache> (borrowed).\n  // - One of several fiber types: host root, cache boundary, suspense\n  //   component. These retain and release in the commit phase.\n\n  const root = (getWorkInProgressRoot(): any);\n  const freshCache = createCache();\n  root.pooledCache = freshCache;\n  retainCache(freshCache);\n  if (freshCache !== null) {\n    root.pooledCacheLanes |= renderLanes;\n  }\n  return freshCache;\n}\n\nexport function pushRootTransition(\n  workInProgress: Fiber,\n  root: FiberRoot,\n  renderLanes: Lanes,\n) {\n  if (enableTransitionTracing) {\n    const rootTransitions = getWorkInProgressTransitions();\n    push(transitionStack, rootTransitions, workInProgress);\n  }\n}\n\nexport function popRootTransition(\n  workInProgress: Fiber,\n  root: FiberRoot,\n  renderLanes: Lanes,\n) {\n  if (enableTransitionTracing) {\n    pop(transitionStack, workInProgress);\n  }\n}\n\nexport function pushTransition(\n  offscreenWorkInProgress: Fiber,\n  prevCachePool: SpawnedCachePool | null,\n  newTransitions: Array<Transition> | null,\n): void {\n  if (enableCache) {\n    if (prevCachePool === null) {\n      push(resumedCache, resumedCache.current, offscreenWorkInProgress);\n    } else {\n      push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);\n    }\n  }\n\n  if (enableTransitionTracing) {\n    if (transitionStack.current === null) {\n      push(transitionStack, newTransitions, offscreenWorkInProgress);\n    } else if (newTransitions === null) {\n      push(transitionStack, transitionStack.current, offscreenWorkInProgress);\n    } else {\n      push(\n        transitionStack,\n        transitionStack.current.concat(newTransitions),\n        offscreenWorkInProgress,\n      );\n    }\n  }\n}\n\nexport function popTransition(workInProgress: Fiber, current: Fiber | null) {\n  if (current !== null) {\n    if (enableTransitionTracing) {\n      pop(transitionStack, workInProgress);\n    }\n\n    if (enableCache) {\n      pop(resumedCache, workInProgress);\n    }\n  }\n}\n\nexport function getPendingTransitions(): Array<Transition> | null {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  return transitionStack.current;\n}\n\nexport function getSuspendedCache(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n  // This function is called when a Suspense boundary suspends. It returns the\n  // cache that would have been used to render fresh data during this render,\n  // if there was any, so that we can resume rendering with the same cache when\n  // we receive more data.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also save the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n\nexport function getOffscreenDeferredCache(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also store the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  ReactProviderType,\n  ReactContext,\n  ReactNodeList,\n} from 'shared/ReactTypes';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n  OffscreenQueue,\n  OffscreenInstance,\n} from './ReactFiberOffscreenComponent';\nimport type {\n  Cache,\n  CacheComponentState,\n  SpawnedCachePool,\n} from './ReactFiberCacheComponent.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\nimport {\n  enableCPUSuspense,\n  enableUseMutableSource,\n} from 'shared/ReactFeatureFlags';\n\nimport checkPropTypes from 'shared/checkPropTypes';\nimport {\n  markComponentRenderStarted,\n  markComponentRenderStopped,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook.old';\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  RefStatic,\n  ChildDeletion,\n  ForceUpdateForLegacySuspense,\n  StaticMask,\n  ShouldCapture,\n  ForceClientRender,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableCache,\n  enableLazyContextPropagation,\n  enableSchedulingProfiler,\n  enableTransitionTracing,\n  enableLegacyHidden,\n} from 'shared/ReactFeatureFlags';\nimport isArray from 'shared/isArray';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n  enqueueCapturedUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictLegacyMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  getSuspenseInstanceFallbackErrorDetails,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n  isPrimaryRenderer,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {shouldError, shouldSuspend} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseListContext,\n  ForceSuspenseFallback,\n  hasSuspenseListContext,\n  setDefaultShallowSuspenseListContext,\n  setShallowSuspenseListContext,\n  pushPrimaryTreeSuspenseHandler,\n  pushFallbackTreeSuspenseHandler,\n  pushOffscreenSuspenseHandler,\n  reuseSuspenseHandlerOnStack,\n  popSuspenseHandler,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  pushHiddenContext,\n  reuseHiddenContextOnStack,\n} from './ReactFiberHiddenContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  lazilyPropagateParentContextChanges,\n  propagateParentContextChangesToDeferredTree,\n  checkIfContextChanged,\n  readContext,\n  prepareToReadContext,\n  scheduleContextWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {\n  renderWithHooks,\n  checkDidRenderIdHook,\n  bailoutHooks,\n} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  getIsHydrating,\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n  queueHydrationError,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\nimport {pushCacheProvider, CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createCapturedValue,\n  createCapturedValueAtFiber,\n  type CapturedValue,\n} from './ReactCapturedValue';\nimport {createClassErrorUpdate} from './ReactFiberThrow.old';\nimport is from 'shared/objectIs';\nimport {\n  getForksAtLevel,\n  isForkedChild,\n  pushTreeId,\n  pushMaterializedTreeId,\n} from './ReactFiberTreeContext.old';\nimport {\n  requestCacheFromPool,\n  pushRootTransition,\n  getSuspendedCache,\n  pushTransition,\n  getOffscreenDeferredCache,\n  getPendingTransitions,\n} from './ReactFiberTransition.old';\nimport {\n  getMarkerInstances,\n  pushMarkerInstance,\n  pushRootMarkerInstance,\n} from './ReactFiberTracingMarkerComponent.old';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentNameFromType(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n    current,\n    renderLanes,\n  );\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentNameFromType(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n\n      // The props are shallowly equal. Reuse the previous props object, like we\n      // would during a normal fiber bailout.\n      //\n      // We don't have strong guarantees that the props object is referentially\n      // equal during updates where we can't bail out anyway — like if the props\n      // are shallowly equal, but there's a local state or context update in the\n      // same batch.\n      //\n      // However, as a principle, we should aim to make the behavior consistent\n      // across different ways of memoizing a component. For example, React.memo\n      // has a different internal Fiber layout if you pass a normal function\n      // component (SimpleMemoComponent) versus if you pass a different type\n      // like forwardRef (MemoComponent). But this is an implementation detail.\n      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n      // affect whether the props object is reused during a bailout.\n      workInProgress.pendingProps = nextProps = prevProps;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    (enableLegacyHidden && nextProps.mode === 'unstable-defer-without-hiding')\n  ) {\n    // Rendering a hidden tree.\n\n    const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n    if (didSuspend) {\n      // Something suspended inside a hidden tree\n\n      // Include the base lanes from the last render\n      const nextBaseLanes =\n        prevState !== null\n          ? mergeLanes(prevState.baseLanes, renderLanes)\n          : renderLanes;\n\n      if (current !== null) {\n        // Reset to the current children\n        let currentChild = (workInProgress.child = current.child);\n\n        // The current render suspended, but there may be other lanes with\n        // pending work. We can't read `childLanes` from the current Offscreen\n        // fiber because we reset it when it was deferred; however, we can read\n        // the pending lanes from the child fibers.\n        let currentChildLanes = NoLanes;\n        while (currentChild !== null) {\n          currentChildLanes = mergeLanes(\n            mergeLanes(currentChildLanes, currentChild.lanes),\n            currentChild.childLanes,\n          );\n          currentChild = currentChild.sibling;\n        }\n        const lanesWeJustAttempted = nextBaseLanes;\n        const remainingChildLanes = removeLanes(\n          currentChildLanes,\n          lanesWeJustAttempted,\n        );\n        workInProgress.childLanes = remainingChildLanes;\n      } else {\n        workInProgress.childLanes = NoLanes;\n        workInProgress.child = null;\n      }\n\n      return deferHiddenOffscreenComponent(\n        current,\n        workInProgress,\n        nextBaseLanes,\n        renderLanes,\n      );\n    }\n\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Consider how Offscreen should work with transitions in the future\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      if (enableCache) {\n        // push the cache pool even though we're going to bail out\n        // because otherwise there'd be a context mismatch\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n      reuseHiddenContextOnStack(workInProgress);\n      pushOffscreenSuspenseHandler(workInProgress);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n\n      // Schedule this fiber to re-render at Offscreen priority\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n\n      // Include the base lanes from the last render\n      const nextBaseLanes =\n        prevState !== null\n          ? mergeLanes(prevState.baseLanes, renderLanes)\n          : renderLanes;\n\n      return deferHiddenOffscreenComponent(\n        current,\n        workInProgress,\n        nextBaseLanes,\n        renderLanes,\n      );\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      if (enableCache && current !== null) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState !== null ? prevState.cachePool : null;\n        // TODO: Consider if and how Offscreen pre-rendering should\n        // be attributed to the transition that spawned it\n        pushTransition(workInProgress, prevCachePool, null);\n      }\n\n      // Push the lanes that were skipped when we bailed out.\n      if (prevState !== null) {\n        pushHiddenContext(workInProgress, prevState);\n      } else {\n        reuseHiddenContextOnStack(workInProgress);\n      }\n      pushOffscreenSuspenseHandler(workInProgress);\n    }\n  } else {\n    // Rendering a visible tree.\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n      let prevCachePool = null;\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        prevCachePool = prevState.cachePool;\n      }\n\n      let transitions = null;\n      if (enableTransitionTracing) {\n        // We have now gone from hidden to visible, so any transitions should\n        // be added to the stack to get added to any Offscreen/suspense children\n        const instance: OffscreenInstance | null = workInProgress.stateNode;\n        if (instance !== null && instance.transitions != null) {\n          transitions = Array.from(instance.transitions);\n        }\n      }\n\n      pushTransition(workInProgress, prevCachePool, transitions);\n\n      // Push the lanes that were skipped when we bailed out.\n      pushHiddenContext(workInProgress, prevState);\n      reuseSuspenseHandlerOnStack(workInProgress);\n\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      reuseHiddenContextOnStack(workInProgress);\n      reuseSuspenseHandlerOnStack(workInProgress);\n    }\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction deferHiddenOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextBaseLanes: Lanes,\n  renderLanes: Lanes,\n) {\n  const nextState: OffscreenState = {\n    baseLanes: nextBaseLanes,\n    // Save the cache pool so we can resume later.\n    cachePool: enableCache ? getOffscreenDeferredCache() : null,\n  };\n  workInProgress.memoizedState = nextState;\n  if (enableCache) {\n    // push the cache pool even though we're going to bail out\n    // because otherwise there'd be a context mismatch\n    if (current !== null) {\n      pushTransition(workInProgress, null, null);\n    }\n  }\n\n  // We're about to bail out, but we need to push this to the stack anyway\n  // to avoid a push/pop misalignment.\n  reuseHiddenContextOnStack(workInProgress);\n\n  pushOffscreenSuspenseHandler(workInProgress);\n\n  if (enableLazyContextPropagation && current !== null) {\n    // Since this tree will resume rendering in a separate render, we need\n    // to propagate parent contexts now so we don't lose track of which\n    // ones changed.\n    propagateParentContextChangesToDeferredTree(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  return null;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateCacheComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableCache) {\n    return null;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const parentCache = readContext(CacheContext);\n\n  if (current === null) {\n    // Initial mount. Request a fresh cache from the pool.\n    const freshCache = requestCacheFromPool(renderLanes);\n    const initialState: CacheComponentState = {\n      parent: parentCache,\n      cache: freshCache,\n    };\n    workInProgress.memoizedState = initialState;\n    initializeUpdateQueue(workInProgress);\n    pushCacheProvider(workInProgress, freshCache);\n  } else {\n    // Check for updates\n    if (includesSomeLane(current.lanes, renderLanes)) {\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, null, null, renderLanes);\n    }\n    const prevState: CacheComponentState = current.memoizedState;\n    const nextState: CacheComponentState = workInProgress.memoizedState;\n\n    // Compare the new parent cache to the previous to see detect there was\n    // a refresh.\n    if (prevState.parent !== parentCache) {\n      // Refresh in parent. Update the parent.\n      const derivedState: CacheComponentState = {\n        parent: parentCache,\n        cache: parentCache,\n      };\n\n      // Copied from getDerivedStateFromProps implementation. Once the update\n      // queue is empty, persist the derived state onto the base state.\n      workInProgress.memoizedState = derivedState;\n      if (workInProgress.lanes === NoLanes) {\n        const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n        workInProgress.memoizedState = updateQueue.baseState = derivedState;\n      }\n\n      pushCacheProvider(workInProgress, parentCache);\n      // No need to propagate a context change because the refreshed parent\n      // already did.\n    } else {\n      // The parent didn't refresh. Now check if this cache did.\n      const nextCache = nextState.cache;\n      pushCacheProvider(workInProgress, nextCache);\n      if (nextCache !== prevState.cache) {\n        // This cache refreshed. Propagate a context change.\n        propagateContextChange(workInProgress, CacheContext, renderLanes);\n      }\n    }\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// This should only be called if the name changes\nfunction updateTracingMarkerComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  // TODO: (luna) Only update the tracing marker if it's newly rendered or it's name changed.\n  // A tracing marker is only associated with the transitions that rendered\n  // or updated it, so we can create a new set of transitions each time\n  if (current === null) {\n    const currentTransitions = getPendingTransitions();\n    if (currentTransitions !== null) {\n      const markerInstance: TracingMarkerInstance = {\n        transitions: new Set(currentTransitions),\n        pendingBoundaries: new Map(),\n        name: workInProgress.pendingProps.name,\n      };\n      workInProgress.stateNode = markerInstance;\n    }\n  } else {\n    if (__DEV__) {\n      if (current.memoizedProps.name !== workInProgress.pendingProps.name) {\n        console.error(\n          'Changing the name of a tracing marker after mount is not supported. ' +\n            'To remount the tracing marker, pass it a new key.',\n        );\n      }\n    }\n  }\n\n  const instance: TracingMarkerInstance | null = workInProgress.stateNode;\n  if (instance !== null) {\n    pushMarkerInstance(workInProgress, instance);\n  }\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    if (enableProfilerCommitHooks) {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      const stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false: {\n        const instance = workInProgress.stateNode;\n        const ctor = workInProgress.type;\n        // TODO This way of resetting the error boundary state is a hack.\n        // Is there a better way to do this?\n        const tempInstance = new ctor(\n          workInProgress.memoizedProps,\n          instance.context,\n        );\n        const state = tempInstance.state;\n        instance.updater.enqueueSetState(instance, state, null);\n        break;\n      }\n      case true: {\n        workInProgress.flags |= DidCapture;\n        workInProgress.flags |= ShouldCapture;\n        // eslint-disable-next-line react-internal/prod-error-codes\n        const error = new Error('Simulated error coming from DevTools');\n        const lane = pickArbitraryLane(renderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        // Schedule the error boundary to re-render using updated state\n        const update = createClassErrorUpdate(\n          workInProgress,\n          createCapturedValueAtFiber(error, workInProgress),\n          lane,\n        );\n        enqueueCapturedUpdate(workInProgress, update);\n        break;\n      }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);\n\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentNameFromFiber(workInProgress) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (enableSchedulingProfiler) {\n      markComponentRenderStarted(workInProgress);\n    }\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n\n  const nextState: RootState = workInProgress.memoizedState;\n  const root: FiberRoot = workInProgress.stateNode;\n  pushRootTransition(workInProgress, root, renderLanes);\n\n  if (enableTransitionTracing) {\n    pushRootMarkerInstance(workInProgress);\n  }\n\n  if (enableCache) {\n    const nextCache: Cache = nextState.cache;\n    pushCacheProvider(workInProgress, nextCache);\n    if (nextCache !== prevState.cache) {\n      // The root cache refreshed.\n      propagateContextChange(workInProgress, CacheContext, renderLanes);\n    }\n  }\n\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (supportsHydration && prevState.isDehydrated) {\n    // This is a hydration root whose shell has not yet hydrated. We should\n    // attempt to hydrate.\n\n    // Flip isDehydrated to false to indicate that when this render\n    // finishes, the root will no longer be dehydrated.\n    const overrideState: RootState = {\n      element: nextChildren,\n      isDehydrated: false,\n      cache: nextState.cache,\n    };\n    const updateQueue: UpdateQueue<RootState> = (workInProgress.updateQueue: any);\n    // `baseState` can always be the last state because the root doesn't\n    // have reducer functions so it doesn't need rebasing.\n    updateQueue.baseState = overrideState;\n    workInProgress.memoizedState = overrideState;\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during a previous attempt to hydrate the shell, so we\n      // forced a client render.\n      const recoverableError = createCapturedValueAtFiber(\n        new Error(\n          'There was an error while hydrating. Because the error happened outside ' +\n            'of a Suspense boundary, the entire root will switch to ' +\n            'client rendering.',\n        ),\n        workInProgress,\n      );\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n        recoverableError,\n      );\n    } else if (nextChildren !== prevChildren) {\n      const recoverableError = createCapturedValueAtFiber(\n        new Error(\n          'This root received an early update, before anything was able ' +\n            'hydrate. Switched the entire root to client rendering.',\n        ),\n        workInProgress,\n      );\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n        recoverableError,\n      );\n    } else {\n      // The outermost shell has not hydrated yet. Start hydrating.\n      enterHydrationState(workInProgress);\n      if (enableUseMutableSource) {\n        const mutableSourceEagerHydrationData =\n          root.mutableSourceEagerHydrationData;\n        if (mutableSourceEagerHydrationData != null) {\n          for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n            const mutableSource = ((mutableSourceEagerHydrationData[\n              i\n            ]: any): MutableSource<any>);\n            const version = mutableSourceEagerHydrationData[i + 1];\n            setWorkInProgressVersion(mutableSource, version);\n          }\n        }\n      }\n\n      const child = mountChildFibers(\n        workInProgress,\n        null,\n        nextChildren,\n        renderLanes,\n      );\n      workInProgress.child = child;\n\n      let node = child;\n      while (node) {\n        // Mark each child as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n        node.flags = (node.flags & ~Placement) | Hydrating;\n        node = node.sibling;\n      }\n    }\n  } else {\n    // Root is not dehydrated. Either this is a client-only root, or it\n    // already hydrated.\n    resetHydrationState();\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nfunction mountHostRootWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: ReactNodeList,\n  renderLanes: Lanes,\n  recoverableError: CapturedValue<mixed>,\n) {\n  // Revert to client rendering.\n  resetHydrationState();\n\n  queueHydrationError(recoverableError);\n\n  workInProgress.flags |= ForceClientRender;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes,\n      );\n      return child;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  throw new Error(\n    `Element type is invalid. Received a promise that resolves to: ${Component}. ` +\n      `Lazy element type must resolve to a class or function.${hint}`,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n  let hasId;\n\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentNameFromType(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n          hasId = checkDidRenderIdHook();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n\n    if (getIsHydrating() && hasId) {\n      pushMaterializedTreeId(workInProgress);\n    }\n\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache(),\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  let cachePool: SpawnedCachePool | null = null;\n  if (enableCache) {\n    const prevCachePool: SpawnedCachePool | null = prevOffscreenState.cachePool;\n    if (prevCachePool !== null) {\n      const parentCache = isPrimaryRenderer\n        ? CacheContext._currentValue\n        : CacheContext._currentValue2;\n      if (prevCachePool.parent !== parentCache) {\n        // Detected a refresh in the parent. This overrides any previously\n        // suspended cache.\n        cachePool = {\n          parent: parentCache,\n          pool: parentCache,\n        };\n      } else {\n        // We can reuse the cache from last time. The only thing that would have\n        // overridden it is a parent refresh, which we checked for above.\n        cachePool = prevCachePool;\n      }\n    } else {\n      // If there's no previous cache pool, grab the current one.\n      cachePool = getSuspendedCache();\n    }\n  }\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool,\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  const suspenseContext: SuspenseContext = suspenseStackCursor.current;\n  return hasSuspenseListContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(current, workInProgress, renderLanes)\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  }\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n\n    // Special path for hydration\n    // If we're currently hydrating, try to hydrate this boundary.\n    if (getIsHydrating()) {\n      // We must push the suspense handler context *before* attempting to\n      // hydrate, to avoid a mismatch in case it errors.\n      if (showFallback) {\n        pushPrimaryTreeSuspenseHandler(workInProgress);\n      } else {\n        pushFallbackTreeSuspenseHandler(workInProgress);\n      }\n      tryToClaimNextHydratableInstance(workInProgress);\n      // This could've been a dehydrated suspense component.\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n      if (suspenseState !== null) {\n        const dehydrated = suspenseState.dehydrated;\n        if (dehydrated !== null) {\n          return mountDehydratedSuspenseComponent(\n            workInProgress,\n            dehydrated,\n            renderLanes,\n          );\n        }\n      }\n      // If hydration didn't succeed, fall through to the normal Suspense path.\n      // To avoid a stack mismatch we need to pop the Suspense handler that we\n      // pushed above. This will become less awkward when move the hydration\n      // logic to its own fiber.\n      popSuspenseHandler(workInProgress);\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      if (enableTransitionTracing) {\n        const currentTransitions = getPendingTransitions();\n        if (currentTransitions !== null) {\n          const parentMarkerInstances = getMarkerInstances();\n          const offscreenQueue: OffscreenQueue | null = (primaryChildFragment.updateQueue: any);\n          if (offscreenQueue === null) {\n            const newOffscreenQueue: OffscreenQueue = {\n              transitions: currentTransitions,\n              markerInstances: parentMarkerInstances,\n              wakeables: null,\n            };\n            primaryChildFragment.updateQueue = newOffscreenQueue;\n          } else {\n            offscreenQueue.transitions = currentTransitions;\n            offscreenQueue.markerInstances = parentMarkerInstances;\n          }\n        }\n      }\n\n      return fallbackFragment;\n    } else if (\n      enableCPUSuspense &&\n      typeof nextProps.unstable_expectedLoadTime === 'number'\n    ) {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      pushFallbackTreeSuspenseHandler(workInProgress);\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // TODO: Transition Tracing is not yet implemented for CPU Suspense.\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      return fallbackFragment;\n    } else {\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // Special path for hydration\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      const dehydrated = prevState.dehydrated;\n      if (dehydrated !== null) {\n        return updateDehydratedSuspenseComponent(\n          current,\n          workInProgress,\n          didSuspend,\n          nextProps,\n          dehydrated,\n          prevState,\n          renderLanes,\n        );\n      }\n    }\n\n    if (showFallback) {\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      const nextFallbackChildren = nextProps.fallback;\n      const nextPrimaryChildren = nextProps.children;\n      const fallbackChildFragment = updateSuspenseFallbackChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      const prevOffscreenState: OffscreenState | null = (current.child: any)\n        .memoizedState;\n      primaryChildFragment.memoizedState =\n        prevOffscreenState === null\n          ? mountSuspenseOffscreenState(renderLanes)\n          : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n      if (enableTransitionTracing) {\n        const currentTransitions = getPendingTransitions();\n        if (currentTransitions !== null) {\n          const parentMarkerInstances = getMarkerInstances();\n          const offscreenQueue: OffscreenQueue | null = (primaryChildFragment.updateQueue: any);\n          const currentOffscreenQueue: OffscreenQueue | null = (current.updateQueue: any);\n          if (offscreenQueue === null) {\n            const newOffscreenQueue: OffscreenQueue = {\n              transitions: currentTransitions,\n              markerInstances: parentMarkerInstances,\n              wakeables: null,\n            };\n            primaryChildFragment.updateQueue = newOffscreenQueue;\n          } else if (offscreenQueue === currentOffscreenQueue) {\n            // If the work-in-progress queue is the same object as current, we\n            // can't modify it without cloning it first.\n            const newOffscreenQueue: OffscreenQueue = {\n              transitions: currentTransitions,\n              markerInstances: parentMarkerInstances,\n              wakeables:\n                currentOffscreenQueue !== null\n                  ? currentOffscreenQueue.wakeables\n                  : null,\n            };\n            primaryChildFragment.updateQueue = newOffscreenQueue;\n          } else {\n            offscreenQueue.transitions = currentTransitions;\n            offscreenQueue.markerInstances = parentMarkerInstances;\n          }\n        }\n      }\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n        current,\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    } else {\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n\n      const nextPrimaryChildren = nextProps.children;\n      const primaryChildFragment = updateSuspensePrimaryChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    mode,\n    renderLanes,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if (\n    (mode & ConcurrentMode) === NoMode &&\n    progressedPrimaryFragment !== null\n  ) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(\n      primaryChildProps,\n      mode,\n      NoLanes,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(\n  offscreenProps: OffscreenProps,\n  mode: TypeOfMode,\n  renderLanes: Lanes,\n) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = updateWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    const deletions = workInProgress.deletions;\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & ConcurrentMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n    // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n    primaryChildFragment.subtreeFlags =\n      currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  recoverableError: CapturedValue<mixed> | null,\n) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n  //\n  // The error is passed in as an argument to enforce that every caller provide\n  // a custom message, or explicitly opt out (currently the only path that opts\n  // out is legacy mode; every concurrent path provides an error).\n  if (recoverableError !== null) {\n    queueHydrationError(recoverableError);\n  }\n\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const fiberMode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    fiberMode,\n    NoLanes,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    fiberMode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOMClient.hydrateRoot(container, <App />)' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  didSuspend: boolean,\n  nextProps: any,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (!didSuspend) {\n    // This is the first render pass. Attempt to hydrate.\n    pushPrimaryTreeSuspenseHandler(workInProgress);\n\n    // We should never be hydrating at this point because it is the first pass,\n    // but after we've already committed once.\n    warnIfHydrating();\n\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        // TODO: When we delete legacy mode, we should make this error argument\n        // required — every concurrent mode path that causes hydration to\n        // de-opt to client rendering should have an error message.\n        null,\n      );\n    }\n\n    if (isSuspenseInstanceFallback(suspenseInstance)) {\n      // This boundary is in a permanent fallback state. In this case, we'll never\n      // get an update and we'll never be able to hydrate the final content. Let's just try the\n      // client side render instead.\n      let digest, message, stack;\n      if (__DEV__) {\n        ({digest, message, stack} = getSuspenseInstanceFallbackErrorDetails(\n          suspenseInstance,\n        ));\n      } else {\n        ({digest} = getSuspenseInstanceFallbackErrorDetails(suspenseInstance));\n      }\n\n      let error;\n      if (message) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        error = new Error(message);\n      } else {\n        error = new Error(\n          'The server could not finish this Suspense boundary, likely ' +\n            'due to an error during server rendering. Switched to ' +\n            'client rendering.',\n        );\n      }\n      const capturedValue = createCapturedValue(error, digest, stack);\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    }\n\n    if (\n      enableLazyContextPropagation &&\n      // TODO: Factoring is a little weird, since we check this right below, too.\n      // But don't want to re-arrange the if-else chain until/unless this\n      // feature lands.\n      !didReceiveUpdate\n    ) {\n      // We need to check if any children have context before we decide to bail\n      // out, so propagate the changes now.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n    }\n\n    // We use lanes to indicate that a child might depend on context, so if\n    // any context has changed, we need to treat is as if the input might have changed.\n    const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n    if (didReceiveUpdate || hasContextChanged) {\n      // This boundary has changed since the first render. This means that we are now unable to\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n      const root = getWorkInProgressRoot();\n      if (root !== null) {\n        const attemptHydrationAtLane = getBumpedLaneForHydration(\n          root,\n          renderLanes,\n        );\n        if (\n          attemptHydrationAtLane !== NoLane &&\n          attemptHydrationAtLane !== suspenseState.retryLane\n        ) {\n          // Intentionally mutating since this render will get interrupted. This\n          // is one of the very rare times where we mutate the current tree\n          // during the render phase.\n          suspenseState.retryLane = attemptHydrationAtLane;\n          // TODO: Ideally this would inherit the event time of the current render\n          const eventTime = NoTimestamp;\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n          scheduleUpdateOnFiber(\n            root,\n            current,\n            attemptHydrationAtLane,\n            eventTime,\n          );\n        } else {\n          // We have already tried to ping at a higher priority than we're rendering with\n          // so if we got here, we must have failed to hydrate at those levels. We must\n          // now give up. Instead, we're going to delete the whole subtree and instead inject\n          // a new real Suspense boundary to take its place, which may render content\n          // or fallback. This might suspend for a while and if it does we might still have\n          // an opportunity to hydrate before this pass commits.\n        }\n      }\n\n      // If we have scheduled higher pri work above, this will probably just abort the render\n      // since we now have higher priority work, but in case it doesn't, we need to prepare to\n      // render something, if we time out. Even if that requires us to delete everything and\n      // skip hydration.\n      // Delay having to do this as long as the suspense timeout allows us.\n      renderDidSuspendDelayIfPossible();\n      const capturedValue = createCapturedValue(\n        new Error(\n          'This Suspense boundary received an update before it finished ' +\n            'hydrating. This caused the boundary to switch to client rendering. ' +\n            'The usual way to fix this is to wrap the original update ' +\n            'in startTransition.',\n        ),\n      );\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    } else if (isSuspenseInstancePending(suspenseInstance)) {\n      // This component is still pending more data from the server, so we can't hydrate its\n      // content. We treat it as if this component suspended itself. It might seem as if\n      // we could just try to render it client-side instead. However, this will perform a\n      // lot of unnecessary work and is unlikely to complete since it often will suspend\n      // on missing data anyway. Additionally, the server might be able to render more\n      // than we can on the client yet. In that case we'd end up with more fallback states\n      // on the client than if we just leave it alone. If the server times out or errors\n      // these should update this boundary to the permanent Fallback state instead.\n      // Mark it as having captured (i.e. suspended).\n      workInProgress.flags |= DidCapture;\n      // Leave the child in place. I.e. the dehydrated fragment.\n      workInProgress.child = current.child;\n      // Register a callback to retry this boundary once the server has sent the result.\n      const retry = retryDehydratedSuspenseBoundary.bind(null, current);\n      registerSuspenseInstanceRetry(suspenseInstance, retry);\n      return null;\n    } else {\n      // This is the first attempt.\n      reenterHydrationStateFromDehydratedSuspenseInstance(\n        workInProgress,\n        suspenseInstance,\n        suspenseState.treeContext,\n      );\n      const primaryChildren = nextProps.children;\n      const primaryChildFragment = mountSuspensePrimaryChildren(\n        workInProgress,\n        primaryChildren,\n        renderLanes,\n      );\n      // Mark the children as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      primaryChildFragment.flags |= Hydrating;\n      return primaryChildFragment;\n    }\n  } else {\n    // This is the second render pass. We already attempted to hydrated, but\n    // something either suspended or errored.\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during hydration. Try again without hydrating.\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n\n      workInProgress.flags &= ~ForceClientRender;\n      const capturedValue = createCapturedValue(\n        new Error(\n          'There was an error while hydrating this Suspense boundary. ' +\n            'Switched to client rendering.',\n        ),\n      );\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    } else if ((workInProgress.memoizedState: null | SuspenseState) !== null) {\n      // Something suspended and we should still be in dehydrated mode.\n      // Leave the existing child in place.\n\n      // Push to avoid a mismatch\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      workInProgress.child = current.child;\n      // The dehydrated completion pass expects this flag to be there\n      // but the normal suspense pass doesn't.\n      workInProgress.flags |= DidCapture;\n      return null;\n    } else {\n      // Suspended but we should no longer be in dehydrated mode.\n      // Therefore we now have to render the fallback.\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      const nextPrimaryChildren = nextProps.children;\n      const nextFallbackChildren = nextProps.fallback;\n      const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    }\n  }\n}\n\nfunction scheduleSuspenseWorkOnFiber(\n  fiber: Fiber,\n  renderLanes: Lanes,\n  propagationRoot: Fiber,\n) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isAnArray = isArray(childSlot);\n    const isIterable =\n      !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isAnArray || isIterable) {\n      const type = isAnArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseListContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseListContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n  }\n  pushSuspenseListContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  if (enableLazyContextPropagation) {\n    // In the lazy propagation implementation, we don't scan for matching\n    // consumers until something bails out, because until something bails out\n    // we're going to visit those nodes, anyway. The trade-off is that it shifts\n    // responsibility to the consumer to track whether something has changed.\n  } else {\n    if (oldProps !== null) {\n      const oldValue = oldProps.value;\n      if (is(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (\n          oldProps.children === newProps.children &&\n          !hasLegacyContextChanged()\n        ) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nexport function checkIfWorkInProgressReceivedUpdate() {\n  return didReceiveUpdate;\n}\n\nfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (current !== null) {\n      // A lazy component only mounts if it suspended inside a non-\n      // concurrent tree, in an inconsistent state. We want to treat it like\n      // a new mount, even though an empty version of it already committed.\n      // Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n  }\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n\n    if (enableLazyContextPropagation && current !== null) {\n      // Before bailing out, check if there are any context changes in\n      // the children.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      // eslint-disable-next-line react-internal/prod-error-codes\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction checkScheduledUpdateOrContext(\n  current: Fiber,\n  renderLanes: Lanes,\n): boolean {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  const updateLanes = current.lanes;\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  }\n  // No pending update, but because context is propagated lazily, we need\n  // to check for a context change before we bail out.\n  if (enableLazyContextPropagation) {\n    const dependencies = current.dependencies;\n    if (dependencies !== null && checkIfContextChanged(dependencies)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      const root: FiberRoot = workInProgress.stateNode;\n      pushRootTransition(workInProgress, root, renderLanes);\n\n      if (enableTransitionTracing) {\n        pushRootMarkerInstance(workInProgress);\n      }\n\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      resetHydrationState();\n      break;\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        pushLegacyContextProvider(workInProgress);\n      }\n      break;\n    }\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n    case ContextProvider: {\n      const newValue = workInProgress.memoizedProps.value;\n      const context: ReactContext<any> = workInProgress.type._context;\n      pushProvider(workInProgress, context, newValue);\n      break;\n    }\n    case Profiler:\n      if (enableProfilerTimer) {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        const hasChildWork = includesSomeLane(\n          renderLanes,\n          workInProgress.childLanes,\n        );\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        if (enableProfilerCommitHooks) {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          const stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      break;\n    case SuspenseComponent: {\n      const state: SuspenseState | null = workInProgress.memoizedState;\n      if (state !== null) {\n        if (state.dehydrated !== null) {\n          // We're not going to render the children, so this is just to maintain\n          // push/pop symmetry\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          // We know that this component will suspend again because if it has\n          // been unsuspended it has committed as a resolved Suspense component.\n          // If it needs to be retried, it should have work scheduled on it.\n          workInProgress.flags |= DidCapture;\n          // We should never render the children of a dehydrated boundary until we\n          // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n          return null;\n        }\n\n        // If this boundary is currently timed out, we need to decide\n        // whether to retry the primary children, or to skip over it and\n        // go straight to the fallback. Check the priority of the primary\n        // child fragment.\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const primaryChildLanes = primaryChildFragment.childLanes;\n        if (includesSomeLane(renderLanes, primaryChildLanes)) {\n          // The primary children have pending work. Use the normal path\n          // to attempt to render the primary children again.\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        } else {\n          // The primary child fragment does not have pending work marked\n          // on it\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          // The primary children do not have pending work with sufficient\n          // priority. Bailout.\n          const child = bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n          if (child !== null) {\n            // The fallback children have pending work. Skip over the\n            // primary children and work on the fallback.\n            return child.sibling;\n          } else {\n            // Note: We can return `null` here because we already checked\n            // whether there were nested context consumers, via the call to\n            // `bailoutOnAlreadyFinishedWork` above.\n            return null;\n          }\n        }\n      } else {\n        pushPrimaryTreeSuspenseHandler(workInProgress);\n      }\n      break;\n    }\n    case SuspenseListComponent: {\n      const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n      let hasChildWork = includesSomeLane(\n        renderLanes,\n        workInProgress.childLanes,\n      );\n\n      if (enableLazyContextPropagation && !hasChildWork) {\n        // Context changes may not have been propagated yet. We need to do\n        // that now, before we can decide whether to bail out.\n        // TODO: We use `childLanes` as a heuristic for whether there is\n        // remaining work in a few places, including\n        // `bailoutOnAlreadyFinishedWork` and\n        // `updateDehydratedSuspenseComponent`. We should maybe extract this\n        // into a dedicated function.\n        lazilyPropagateParentContextChanges(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n        hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n      }\n\n      if (didSuspendBefore) {\n        if (hasChildWork) {\n          // If something was in fallback state last time, and we have all the\n          // same children then we're still in progressive loading state.\n          // Something might get unblocked by state updates or retries in the\n          // tree which will affect the tail. So we need to use the normal\n          // path to compute the correct tail.\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        workInProgress.flags |= DidCapture;\n      }\n\n      // If nothing suspended before and we're rendering the same children,\n      // then the tail doesn't matter. Anything new that suspends will work\n      // in the \"together\" mode, so we can continue from the state we had.\n      const renderState = workInProgress.memoizedState;\n      if (renderState !== null) {\n        // Reset to the \"together\" mode in case we've started a different\n        // update in the past but didn't complete it.\n        renderState.rendering = null;\n        renderState.tail = null;\n        renderState.lastEffect = null;\n      }\n      pushSuspenseListContext(workInProgress, suspenseStackCursor.current);\n\n      if (hasChildWork) {\n        break;\n      } else {\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        return null;\n      }\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      // Need to check if the tree still needs to be deferred. This is\n      // almost identical to the logic used in the normal update path,\n      // so we'll just enter that. The only difference is we'll bail out\n      // at the next level instead of this one, because the child props\n      // have not changed. Which is fine.\n      // TODO: Probably should refactor `beginWork` to split the bailout\n      // path from the normal path. I'm tempted to do a labeled break here\n      // but I won't :)\n      workInProgress.lanes = NoLanes;\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        const instance: TracingMarkerInstance | null = workInProgress.stateNode;\n        if (instance !== null) {\n          pushMarkerInstance(workInProgress, instance);\n        }\n      }\n    }\n  }\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n        current,\n        renderLanes,\n      );\n      if (\n        !hasScheduledUpdateOrContext &&\n        // If this is the second pass of an error or suspense boundary, there\n        // may not be work scheduled on `current`, so we check for this flag.\n        (workInProgress.flags & DidCapture) === NoFlags\n      ) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\n      // Check if this child belongs to a list of muliple children in\n      // its parent.\n      //\n      // In a true multi-threaded implementation, we would render children on\n      // parallel threads. This would represent the beginning of a new render\n      // thread for this subtree.\n      //\n      // We only use this for id generation during hydration, which is why the\n      // logic is located in this special branch.\n      const slotIndex = workInProgress.index;\n      const numberOfForks = getForksAtLevel(workInProgress);\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\n    }\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      if (enableLegacyHidden) {\n        return updateLegacyHiddenComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        return updateCacheComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        return updateTracingMarkerComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {\n  ReactScopeInstance,\n  ReactContext,\n  Wakeable,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport {\n  enableSuspenseAvoidThisFallback,\n  enableLegacyHidden,\n} from 'shared/ReactFeatureFlags';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './Scheduler';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {NoMode, ConcurrentMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  Ref,\n  RefStatic,\n  Placement,\n  Update,\n  Visibility,\n  NoFlags,\n  DidCapture,\n  Snapshot,\n  ChildDeletion,\n  StaticMask,\n  MutationMask,\n  Passive,\n  Incomplete,\n  ShouldCapture,\n  ForceClientRender,\n} from './ReactFiberFlags';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  popSuspenseListContext,\n  popSuspenseHandler,\n  pushSuspenseListContext,\n  setShallowSuspenseListContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseListContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  popHiddenContext,\n  isCurrentTreeHidden,\n} from './ReactFiberHiddenContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  warnIfUnhydratedTailNodes,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n  hasUnhydratedTailNodes,\n  upgradeHydrationErrorsToRecoverable,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableProfilerTimer,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  getRenderTargetTime,\n  getWorkInProgressTransitions,\n} from './ReactFiberWorkLoop.old';\nimport {\n  OffscreenLane,\n  SomeRetryLane,\n  NoLanes,\n  includesSomeLane,\n  mergeLanes,\n} from './ReactFiberLane.old';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\nimport {popTreeContext} from './ReactFiberTreeContext.old';\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\nimport {\n  popMarkerInstance,\n  popRootMarkerInstance,\n} from './ReactFiberTracingMarkerComponent.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref | RefStatic;\n}\n\nfunction hadNoMutationsEffects(current: null | Fiber, completedWork: Fiber) {\n  const didBailout = current !== null && current.child === completedWork.child;\n  if (didBailout) {\n    return true;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return false;\n  }\n\n  // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n  let child = completedWork.child;\n  while (child !== null) {\n    if (\n      (child.flags & MutationMask) !== NoFlags ||\n      (child.subtreeFlags & MutationMask) !== NoFlags\n    ) {\n      return false;\n    }\n    child = child.sibling;\n  }\n  return true;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildren(parent, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildrenToContainer(containerChildSet, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction bubbleProperties(completedWork: Fiber) {\n  const didBailout =\n    completedWork.alternate !== null &&\n    completedWork.alternate.child === completedWork.child;\n\n  let newChildLanes = NoLanes;\n  let subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let actualDuration = completedWork.actualDuration;\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n        actualDuration += child.actualDuration;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n\n  return didBailout;\n}\n\nfunction completeDehydratedSuspenseBoundary(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextState: SuspenseState | null,\n): boolean {\n  if (\n    hasUnhydratedTailNodes() &&\n    (workInProgress.mode & ConcurrentMode) !== NoMode &&\n    (workInProgress.flags & DidCapture) === NoFlags\n  ) {\n    warnIfUnhydratedTailNodes(workInProgress);\n    resetHydrationState();\n    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n\n    return false;\n  }\n\n  const wasHydrated = popHydrationState(workInProgress);\n\n  if (nextState !== null && nextState.dehydrated !== null) {\n    // We might be inside a hydration state the first time we're picking up this\n    // Suspense boundary, and also after we've reentered it for further hydration.\n    if (current === null) {\n      if (!wasHydrated) {\n        throw new Error(\n          'A dehydrated suspense component was completed without a hydrated node. ' +\n            'This is probably a bug in React.',\n        );\n      }\n      prepareToHydrateHostSuspenseInstance(workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return false;\n    } else {\n      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n      resetHydrationState();\n      if ((workInProgress.flags & DidCapture) === NoFlags) {\n        // This boundary did not suspend so it's now hydrated and unsuspended.\n        workInProgress.memoizedState = null;\n      }\n      // If nothing suspended, we need to schedule an effect to mark this boundary\n      // as having hydrated so events know that they're free to be invoked.\n      // It's also a signal to replay events and the suspense callback.\n      // If something suspended, schedule an effect to attach retry listeners.\n      // So we might as well always mark this.\n      workInProgress.flags |= Update;\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return false;\n    }\n  } else {\n    // Successfully completed this tree. If this was a forced client render,\n    // there may have been recoverable errors during first hydration\n    // attempt. If so, add them to a queue so we can log them in the\n    // commit phase.\n    upgradeHydrationErrorsToRecoverable();\n\n    // Fall through to normal Suspense path\n    return true;\n  }\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostRoot: {\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n\n      if (enableTransitionTracing) {\n        const transitions = getWorkInProgressTransitions();\n        // We set the Passive flag here because if there are new transitions,\n        // we will need to schedule callbacks and process the transitions,\n        // which we do in the passive phase\n        if (transitions !== null) {\n          workInProgress.flags |= Passive;\n        }\n      }\n\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (current !== null) {\n          previousCache = current.memoizedState.cache;\n        }\n        const cache: Cache = workInProgress.memoizedState.cache;\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n        popCacheProvider(workInProgress, cache);\n      }\n\n      if (enableTransitionTracing) {\n        popRootMarkerInstance(workInProgress);\n      }\n\n      popRootTransition(workInProgress, fiberRoot, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else {\n          if (current !== null) {\n            const prevState: RootState = current.memoizedState;\n            if (\n              // Check if this is a client root\n              !prevState.isDehydrated ||\n              // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags\n            ) {\n              // Schedule an effect to clear this container at the start of the\n              // next commit. This handles the case of React rendering into a\n              // container with previous children. It's also safe to do for\n              // updates too, because current.child would only be null if the\n              // previous render was null (so the container would already\n              // be empty).\n              workInProgress.flags |= Snapshot;\n\n              // If this was a forced client render, there may have been\n              // recoverable errors during first hydration attempt. If so, add\n              // them to a queue so we can log them in the commit phase.\n              upgradeHydrationErrorsToRecoverable();\n            }\n          }\n        }\n      }\n      updateHostContainer(current, workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableTransitionTracing) {\n        if ((workInProgress.subtreeFlags & Visibility) !== NoFlags) {\n          // If any of our suspense children toggle visibility, this means that\n          // the pending boundaries array needs to be updated, which we only\n          // do in the passive phase.\n          workInProgress.flags |= Passive;\n        }\n      }\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          // This can happen when we abort work.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseHandler(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      // Special path for dehydrated boundaries. We may eventually move this\n      // to its own fiber type so that we can add other kinds of hydration\n      // boundaries that aren't associated with a Suspense tree. In anticipation\n      // of such a refactor, all the hydration logic is contained in\n      // this branch.\n      if (\n        current === null ||\n        (current.memoizedState !== null &&\n          current.memoizedState.dehydrated !== null)\n      ) {\n        const fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(\n          current,\n          workInProgress,\n          nextState,\n        );\n        if (!fallthroughToNormalSuspensePath) {\n          if (workInProgress.flags & ShouldCapture) {\n            // Special case. There were remaining unhydrated nodes. We treat\n            // this as a mismatch. Revert to client rendering.\n            return workInProgress;\n          } else {\n            // Did not finish hydrating, either because this is the initial\n            // render or because something suspended.\n            return null;\n          }\n        }\n\n        // Continue with the normal Suspense path.\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        // Don't bubble properties in this case.\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      const prevDidTimeout =\n        current !== null &&\n        (current.memoizedState: null | SuspenseState) !== null;\n\n      if (enableCache && nextDidTimeout) {\n        const offscreenFiber: Fiber = (workInProgress.child: any);\n        let previousCache: Cache | null = null;\n        if (\n          offscreenFiber.alternate !== null &&\n          offscreenFiber.alternate.memoizedState !== null &&\n          offscreenFiber.alternate.memoizedState.cachePool !== null\n        ) {\n          previousCache = offscreenFiber.alternate.memoizedState.cachePool.pool;\n        }\n        let cache: Cache | null = null;\n        if (\n          offscreenFiber.memoizedState !== null &&\n          offscreenFiber.memoizedState.cachePool !== null\n        ) {\n          cache = offscreenFiber.memoizedState.cachePool.pool;\n        }\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          offscreenFiber.flags |= Passive;\n        }\n      }\n\n      // If the suspended state of the boundary changes, we need to schedule\n      // a passive effect, which is when we process the transitions\n      if (nextDidTimeout !== prevDidTimeout) {\n        if (enableTransitionTracing) {\n          const offscreenFiber: Fiber = (workInProgress.child: any);\n          offscreenFiber.flags |= Passive;\n        }\n\n        // If the suspended state of the boundary changes, we need to schedule\n        // an effect to toggle the subtree's visibility. When we switch from\n        // fallback -> primary, the inner Offscreen fiber schedules this effect\n        // as part of its normal complete phase. But when we switch from\n        // primary -> fallback, the inner Offscreen fiber does not have a complete\n        // phase. So we need to schedule its effect here.\n        //\n        // We also use this flag to connect/disconnect the effects, but the same\n        // logic applies: when re-connecting, the Offscreen fiber's complete\n        // phase will handle scheduling the effect. It's only when the fallback\n        // is active that we have to do anything special.\n        if (nextDidTimeout) {\n          const offscreenFiber: Fiber = (workInProgress.child: any);\n          offscreenFiber.flags |= Visibility;\n\n          // TODO: This will still suspend a synchronous tree if anything\n          // in the concurrent tree already suspended during this render.\n          // This is a known bug.\n          if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n            // TODO: Move this back to throwException because this is too late\n            // if this is a large tree which is common for initial loads. We\n            // don't know if we should restart a render or not until we get\n            // this marker, and this is too late.\n            // If this render already had a ping or lower pri updates,\n            // and this is the first time we know we're going to suspend we\n            // should be able to immediately restart from within throwException.\n\n            // Check if this is a \"bad\" fallback state or a good one. A bad\n            // fallback state is one that we only show as a last resort; if this\n            // is a transition, we'll block it from displaying, and wait for\n            // more data to arrive.\n            const isBadFallback =\n              // It's bad to switch to a fallback if content is already visible\n              (current !== null && !prevDidTimeout && !isCurrentTreeHidden()) ||\n              // Experimental: Some fallbacks are always bad\n              (enableSuspenseAvoidThisFallback &&\n                workInProgress.memoizedProps.unstable_avoidThisFallback ===\n                  true);\n\n            if (isBadFallback) {\n              renderDidSuspendDelayIfPossible();\n            } else {\n              renderDidSuspend();\n            }\n          }\n        }\n      }\n\n      const wakeables: Set<Wakeable> | null = (workInProgress.updateQueue: any);\n      if (wakeables !== null) {\n        // Schedule an effect to attach a retry listener to the promise.\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          if (nextDidTimeout) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseListContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thenables. Instead, we'll transfer its thenables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThenables = suspended.updateQueue;\n                if (newThenables !== null) {\n                  workInProgress.updateQueue = newThenables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect flags before doing the second pass since that's now invalid.\n                // Reset the child fibers to their original state.\n                workInProgress.subtreeFlags = NoFlags;\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense List Context to force suspense and\n                // immediately rerender the children.\n                pushSuspenseListContext(\n                  workInProgress,\n                  setShallowSuspenseListContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                // Don't bubble properties in this case.\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThenables = suspended.updateQueue;\n            if (newThenables !== null) {\n              workInProgress.updateQueue = newThenables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We're done.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseListContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseListContext(\n            suspenseContext,\n          );\n        }\n        pushSuspenseListContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        // Don't bubble properties in this case.\n        return next;\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        bubbleProperties(workInProgress);\n        return null;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popSuspenseHandler(workInProgress);\n      popHiddenContext(workInProgress);\n      const nextState: OffscreenState | null = workInProgress.memoizedState;\n      const nextIsHidden = nextState !== null;\n\n      // Schedule a Visibility effect if the visibility has changed\n      if (enableLegacyHidden && workInProgress.tag === LegacyHiddenComponent) {\n        // LegacyHidden doesn't do any hiding — it only pre-renders.\n      } else {\n        if (current !== null) {\n          const prevState: OffscreenState | null = current.memoizedState;\n          const prevIsHidden = prevState !== null;\n          if (prevIsHidden !== nextIsHidden) {\n            workInProgress.flags |= Visibility;\n          }\n        } else {\n          // On initial mount, we only need a Visibility effect if the tree\n          // is hidden.\n          if (nextIsHidden) {\n            workInProgress.flags |= Visibility;\n          }\n        }\n      }\n\n      if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n        bubbleProperties(workInProgress);\n      } else {\n        // Don't bubble properties for hidden children unless we're rendering\n        // at offscreen priority.\n        if (\n          includesSomeLane(renderLanes, (OffscreenLane: Lane)) &&\n          // Also don't bubble if the tree suspended\n          (workInProgress.flags & DidCapture) === NoLanes\n        ) {\n          bubbleProperties(workInProgress);\n          // Check if there was an insertion or update in the hidden subtree.\n          // If so, we need to hide those nodes in the commit phase, so\n          // schedule a visibility effect.\n          if (\n            (!enableLegacyHidden ||\n              workInProgress.tag !== LegacyHiddenComponent) &&\n            workInProgress.subtreeFlags & (Placement | Update)\n          ) {\n            workInProgress.flags |= Visibility;\n          }\n        }\n      }\n\n      if (workInProgress.updateQueue !== null) {\n        // Schedule an effect to attach Suspense retry listeners\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (\n          current !== null &&\n          current.memoizedState !== null &&\n          current.memoizedState.cachePool !== null\n        ) {\n          previousCache = current.memoizedState.cachePool.pool;\n        }\n        let cache: Cache | null = null;\n        if (\n          workInProgress.memoizedState !== null &&\n          workInProgress.memoizedState.cachePool !== null\n        ) {\n          cache = workInProgress.memoizedState.cachePool.pool;\n        }\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n      }\n\n      popTransition(workInProgress, current);\n\n      return null;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (current !== null) {\n          previousCache = current.memoizedState.cache;\n        }\n        const cache: Cache = workInProgress.memoizedState.cache;\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n        popCacheProvider(workInProgress, cache);\n        bubbleProperties(workInProgress);\n      }\n      return null;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        const instance: TracingMarkerInstance | null = workInProgress.stateNode;\n        if (instance !== null) {\n          popMarkerInstance(workInProgress);\n        }\n        bubbleProperties(workInProgress);\n\n        if (\n          current === null ||\n          (workInProgress.subtreeFlags & Visibility) !== NoFlags\n        ) {\n          // If any of our suspense children toggle visibility, this means that\n          // the pending boundaries array needs to be updated, which we only\n          // do in the passive phase.\n          workInProgress.flags |= Passive;\n        }\n      }\n      return null;\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  enableProfilerTimer,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {\n  popSuspenseListContext,\n  popSuspenseHandler,\n} from './ReactFiberSuspenseContext.old';\nimport {popHiddenContext} from './ReactFiberHiddenContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {popTreeContext} from './ReactFiberTreeContext.old';\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\nimport {\n  popMarkerInstance,\n  popRootMarkerInstance,\n} from './ReactFiberTracingMarkerComponent.old';\n\nfunction unwindWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      const root: FiberRoot = workInProgress.stateNode;\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n\n      if (enableTransitionTracing) {\n        popRootMarkerInstance(workInProgress);\n      }\n\n      popRootTransition(workInProgress, root, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      if (\n        (flags & ShouldCapture) !== NoFlags &&\n        (flags & DidCapture) === NoFlags\n      ) {\n        // There was an error during render that wasn't captured by a suspense\n        // boundary. Do a second pass on the root to unmount the children.\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        return workInProgress;\n      }\n      // We unwound to the root without completing it. Exit.\n      return null;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseHandler(workInProgress);\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n      if (suspenseState !== null && suspenseState.dehydrated !== null) {\n        if (workInProgress.alternate === null) {\n          throw new Error(\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n        }\n\n        resetHydrationState();\n      }\n\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseListContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popSuspenseHandler(workInProgress);\n      popHiddenContext(workInProgress);\n      popTransition(workInProgress, current);\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      return null;\n    case TracingMarkerComponent:\n      if (enableTransitionTracing) {\n        if (workInProgress.stateNode !== null) {\n          popMarkerInstance(workInProgress);\n        }\n      }\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(\n  current: Fiber | null,\n  interruptedWork: Fiber,\n  renderLanes: Lanes,\n) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      const root: FiberRoot = interruptedWork.stateNode;\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n\n      if (enableTransitionTracing) {\n        popRootMarkerInstance(interruptedWork);\n      }\n\n      popRootTransition(interruptedWork, root, renderLanes);\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseHandler(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseListContext(interruptedWork);\n      break;\n    case ContextProvider:\n      const context: ReactContext<any> = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popSuspenseHandler(interruptedWork);\n      popHiddenContext(interruptedWork);\n      popTransition(interruptedWork, current);\n      break;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      break;\n    case TracingMarkerComponent:\n      if (enableTransitionTracing) {\n        const instance: TracingMarkerInstance | null =\n          interruptedWork.stateNode;\n        if (instance !== null) {\n          popMarkerInstance(interruptedWork);\n        }\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {\n  OffscreenState,\n  OffscreenInstance,\n  OffscreenQueue,\n} from './ReactFiberOffscreenComponent';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\nimport {\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableSchedulingProfiler,\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableStrictEffects,\n  deletedTreeCleanUpLevel,\n  enableUpdaterTracking,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {detachDeletedInstance} from './ReactFiberHostConfig';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  ChildDeletion,\n  Snapshot,\n  Update,\n  Callback,\n  Ref,\n  Hydrating,\n  Passive,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  Visibility,\n} from './ReactFiberFlags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n  getCurrentFiber as getCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  isCurrentUpdateNested,\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ConcurrentMode, NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  deferHiddenCallbacks,\n  commitHiddenCallbacks,\n  commitCallbacks,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n  prepareForCommit,\n  beforeActiveInstanceBlur,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveProfilerEffect,\n  restorePendingUpdaters,\n  addTransitionStartCallbackToPendingTransition,\n  addTransitionProgressCallbackToPendingTransition,\n  addTransitionCompleteCallbackToPendingTransition,\n  addMarkerProgressCallbackToPendingTransition,\n  addMarkerCompleteCallbackToPendingTransition,\n  setIsRunningInsertionEffect,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Insertion as HookInsertion,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\nimport {invokeGuardedCallback, clearCaughtError} from 'shared/ReactErrorUtils';\nimport {\n  isDevToolsPresent,\n  markComponentPassiveEffectMountStarted,\n  markComponentPassiveEffectMountStopped,\n  markComponentPassiveEffectUnmountStarted,\n  markComponentPassiveEffectUnmountStopped,\n  markComponentLayoutEffectMountStarted,\n  markComponentLayoutEffectMountStopped,\n  markComponentLayoutEffectUnmountStarted,\n  markComponentLayoutEffectUnmountStopped,\n  onCommitUnmount,\n} from './ReactFiberDevToolsHook.old';\nimport {releaseCache, retainCache} from './ReactFiberCacheComponent.old';\nimport {clearTransitionsForLanes} from './ReactFiberLane.old';\nimport {\n  OffscreenVisible,\n  OffscreenPassiveEffectsConnected,\n} from './ReactFiberOffscreenComponent';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\n// Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\nlet offscreenSubtreeIsHidden: boolean = false;\nlet offscreenSubtreeWasHidden: boolean = false;\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nlet nextEffect: Fiber | null = null;\n\n// Used for Profiling builds to track updaters.\nlet inProgressLanes: Lanes | null = null;\nlet inProgressRoot: FiberRoot | null = null;\n\nexport function reportUncaughtErrorInDEV(error: mixed) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  if (__DEV__) {\n    invokeGuardedCallback(null, () => {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyAttachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      let retVal;\n      try {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          current.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            retVal = ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          retVal = ref(null);\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n      if (__DEV__) {\n        if (typeof retVal === 'function') {\n          console.error(\n            'Unexpected return value from a callback ref in %s. ' +\n              'A callback ref should not return a function.',\n            getComponentNameFromFiber(current),\n          );\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  destroy: () => void,\n) {\n  try {\n    destroy();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function commitBeforeMutationEffects(\n  root: FiberRoot,\n  firstChild: Fiber,\n) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin();\n\n  // We no longer need to track the active instance fiber\n  const shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // This phase is only used for beforeActiveInstanceBlur.\n    // Let's skip the whole loop if it's off.\n    if (enableCreateEventHandleAPI) {\n      // TODO: Should wrap this in flags check, too, as optimization\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const deletion = deletions[i];\n          commitBeforeMutationEffectsDeletion(deletion);\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if (\n      (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags &&\n      child !== null\n    ) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork: Fiber) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  if (enableCreateEventHandleAPI) {\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      // Check to see if the focused element was inside of a hidden (Suspense) subtree.\n      // TODO: Move this out of the hot path using a dedicated effect tag.\n      if (\n        finishedWork.tag === SuspenseComponent &&\n        isSuspenseBoundaryBeingHidden(current, finishedWork) &&\n        doesFiberContain(finishedWork, focusedInstanceHandle)\n      ) {\n        shouldFireAfterActiveInstanceBlur = true;\n        beforeActiveInstanceBlur(finishedWork);\n      }\n    }\n  }\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentDebugFiberInDEV(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        break;\n      }\n      case ClassComponent: {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentNameFromFiber(finishedWork),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n        break;\n      }\n      case HostRoot: {\n        if (supportsMutation) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n        break;\n      }\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n      default: {\n        throw new Error(\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction commitBeforeMutationEffectsDeletion(deletion: Fiber) {\n  if (enableCreateEventHandleAPI) {\n    // TODO (effects) It would be nice to avoid calling doesFiberContain()\n    // Maybe we can repurpose one of the subtreeFlags positions for this instead?\n    // Use it to store which part of the tree the focused instance is in?\n    // This assumes we can safely determine that instance during the \"render\" phase.\n    if (doesFiberContain(deletion, ((focusedInstanceHandle: any): Fiber))) {\n      shouldFireAfterActiveInstanceBlur = true;\n      beforeActiveInstanceBlur(deletion);\n    }\n  }\n}\n\nfunction commitHookEffectListUnmount(\n  flags: HookFlags,\n  finishedWork: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectUnmountStarted(finishedWork);\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectUnmountStarted(finishedWork);\n            }\n          }\n\n          if (__DEV__) {\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(true);\n            }\n          }\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n          if (__DEV__) {\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(false);\n            }\n          }\n\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectUnmountStopped();\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectUnmountStopped();\n            }\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(flags: HookFlags, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        if (enableSchedulingProfiler) {\n          if ((flags & HookPassive) !== NoHookEffect) {\n            markComponentPassiveEffectMountStarted(finishedWork);\n          } else if ((flags & HookLayout) !== NoHookEffect) {\n            markComponentLayoutEffectMountStarted(finishedWork);\n          }\n        }\n\n        // Mount\n        const create = effect.create;\n        if (__DEV__) {\n          if ((flags & HookInsertion) !== NoHookEffect) {\n            setIsRunningInsertionEffect(true);\n          }\n        }\n        effect.destroy = create();\n        if (__DEV__) {\n          if ((flags & HookInsertion) !== NoHookEffect) {\n            setIsRunningInsertionEffect(false);\n          }\n        }\n\n        if (enableSchedulingProfiler) {\n          if ((flags & HookPassive) !== NoHookEffect) {\n            markComponentPassiveEffectMountStopped();\n          } else if ((flags & HookLayout) !== NoHookEffect) {\n            markComponentLayoutEffectMountStopped();\n          }\n        }\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let hookName;\n            if ((effect.tag & HookLayout) !== NoFlags) {\n              hookName = 'useLayoutEffect';\n            } else if ((effect.tag & HookInsertion) !== NoFlags) {\n              hookName = 'useInsertionEffect';\n            } else {\n              hookName = 'useEffect';\n            }\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote ' +\n                hookName +\n                '(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                hookName +\n                '(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              '%s must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              hookName,\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          let phase = finishedWork.alternate === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onPostCommit === 'function') {\n            onPostCommit(id, phase, passiveEffectDuration, commitTime);\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          outer: while (parentFiber !== null) {\n            switch (parentFiber.tag) {\n              case HostRoot:\n                const root = parentFiber.stateNode;\n                root.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n              case Profiler:\n                const parentStateNode = parentFiber.stateNode;\n                parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitHookLayoutEffects(finishedWork: Fiber, hookFlags: HookFlags) {\n  // At this point layout effects have already been destroyed (during mutation phase).\n  // This is done to prevent sibling component effects from interfering with each other,\n  // e.g. a destroy function in one component should never override a ref set\n  // by a create function in another component during the same commit.\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    finishedWork.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      commitHookEffectListMount(hookFlags, finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n    recordLayoutEffectDuration(finishedWork);\n  } else {\n    try {\n      commitHookEffectListMount(hookFlags, finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitClassLayoutLifecycles(\n  finishedWork: Fiber,\n  current: Fiber | null,\n) {\n  const instance = finishedWork.stateNode;\n  if (current === null) {\n    // We could update instance props and state here,\n    // but instead we rely on them being set during last render.\n    // TODO: revisit this when we implement resuming.\n    if (__DEV__) {\n      if (\n        finishedWork.type === finishedWork.elementType &&\n        !didWarnAboutReassigningProps\n      ) {\n        if (instance.props !== finishedWork.memoizedProps) {\n          console.error(\n            'Expected %s props to match memoized props before ' +\n              'componentDidMount. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.props`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n        if (instance.state !== finishedWork.memoizedState) {\n          console.error(\n            'Expected %s state to match memoized state before ' +\n              'componentDidMount. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.state`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n      }\n    }\n    if (\n      enableProfilerTimer &&\n      enableProfilerCommitHooks &&\n      finishedWork.mode & ProfileMode\n    ) {\n      try {\n        startLayoutEffectTimer();\n        instance.componentDidMount();\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n      recordLayoutEffectDuration(finishedWork);\n    } else {\n      try {\n        instance.componentDidMount();\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n  } else {\n    const prevProps =\n      finishedWork.elementType === finishedWork.type\n        ? current.memoizedProps\n        : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n    const prevState = current.memoizedState;\n    // We could update instance props and state here,\n    // but instead we rely on them being set during last render.\n    // TODO: revisit this when we implement resuming.\n    if (__DEV__) {\n      if (\n        finishedWork.type === finishedWork.elementType &&\n        !didWarnAboutReassigningProps\n      ) {\n        if (instance.props !== finishedWork.memoizedProps) {\n          console.error(\n            'Expected %s props to match memoized props before ' +\n              'componentDidUpdate. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.props`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n        if (instance.state !== finishedWork.memoizedState) {\n          console.error(\n            'Expected %s state to match memoized state before ' +\n              'componentDidUpdate. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.state`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n      }\n    }\n    if (\n      enableProfilerTimer &&\n      enableProfilerCommitHooks &&\n      finishedWork.mode & ProfileMode\n    ) {\n      try {\n        startLayoutEffectTimer();\n        instance.componentDidUpdate(\n          prevProps,\n          prevState,\n          instance.__reactInternalSnapshotBeforeUpdate,\n        );\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n      recordLayoutEffectDuration(finishedWork);\n    } else {\n      try {\n        instance.componentDidUpdate(\n          prevProps,\n          prevState,\n          instance.__reactInternalSnapshotBeforeUpdate,\n        );\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n  }\n}\n\nfunction commitClassCallbacks(finishedWork: Fiber) {\n  // TODO: I think this is now always non-null by the time it reaches the\n  // commit phase. Consider removing the type check.\n  const updateQueue: UpdateQueue<*> | null = (finishedWork.updateQueue: any);\n  if (updateQueue !== null) {\n    const instance = finishedWork.stateNode;\n    if (__DEV__) {\n      if (\n        finishedWork.type === finishedWork.elementType &&\n        !didWarnAboutReassigningProps\n      ) {\n        if (instance.props !== finishedWork.memoizedProps) {\n          console.error(\n            'Expected %s props to match memoized props before ' +\n              'processing the update queue. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.props`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n        if (instance.state !== finishedWork.memoizedState) {\n          console.error(\n            'Expected %s state to match memoized state before ' +\n              'processing the update queue. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.state`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n      }\n    }\n    // We could update instance props and state here,\n    // but instead we rely on them being set during last render.\n    // TODO: revisit this when we implement resuming.\n    try {\n      commitCallbacks(updateQueue, instance);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitHostComponentMount(finishedWork: Fiber) {\n  const type = finishedWork.type;\n  const props = finishedWork.memoizedProps;\n  const instance: Instance = finishedWork.stateNode;\n  try {\n    commitMount(instance, type, props, finishedWork);\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nfunction commitProfilerUpdate(finishedWork: Fiber, current: Fiber | null) {\n  if (enableProfilerTimer) {\n    try {\n      const {onCommit, onRender} = finishedWork.memoizedProps;\n      const {effectDuration} = finishedWork.stateNode;\n\n      const commitTime = getCommitTime();\n\n      let phase = current === null ? 'mount' : 'update';\n      if (enableProfilerNestedUpdatePhase) {\n        if (isCurrentUpdateNested()) {\n          phase = 'nested-update';\n        }\n      }\n\n      if (typeof onRender === 'function') {\n        onRender(\n          finishedWork.memoizedProps.id,\n          phase,\n          finishedWork.actualDuration,\n          finishedWork.treeBaseDuration,\n          finishedWork.actualStartTime,\n          commitTime,\n        );\n      }\n\n      if (enableProfilerCommitHooks) {\n        if (typeof onCommit === 'function') {\n          onCommit(\n            finishedWork.memoizedProps.id,\n            phase,\n            effectDuration,\n            commitTime,\n          );\n        }\n\n        // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n        // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n        // because the effect is also where times bubble to parent Profilers.\n        enqueuePendingPassiveProfilerEffect(finishedWork);\n\n        // Propagate layout effect durations to the next nearest Profiler ancestor.\n        // Do not reset these values until the next render so DevTools has a chance to read them first.\n        let parentFiber = finishedWork.return;\n        outer: while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              const root = parentFiber.stateNode;\n              root.effectDuration += effectDuration;\n              break outer;\n            case Profiler:\n              const parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += effectDuration;\n              break outer;\n          }\n          parentFiber = parentFiber.return;\n        }\n      }\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  // When updating this function, also update reappearLayoutEffects, which does\n  // most of the same things when an offscreen tree goes from hidden -> visible.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Update) {\n        commitHookLayoutEffects(finishedWork, HookLayout | HookHasEffect);\n      }\n      break;\n    }\n    case ClassComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Update) {\n        commitClassLayoutLifecycles(finishedWork, current);\n      }\n\n      if (flags & Callback) {\n        commitClassCallbacks(finishedWork);\n      }\n\n      if (flags & Ref) {\n        safelyAttachRef(finishedWork, finishedWork.return);\n      }\n      break;\n    }\n    case HostRoot: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Callback) {\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          let instance = null;\n          if (finishedWork.child !== null) {\n            switch (finishedWork.child.tag) {\n              case HostComponent:\n                instance = getPublicInstance(finishedWork.child.stateNode);\n                break;\n              case ClassComponent:\n                instance = finishedWork.child.stateNode;\n                break;\n            }\n          }\n          try {\n            commitCallbacks(updateQueue, instance);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      break;\n    }\n    case HostComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n\n      // Renderers may schedule work to be done after host components are mounted\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n      // These effects should only be committed when components are first mounted,\n      // aka when there is no current/alternate.\n      if (current === null && flags & Update) {\n        commitHostComponentMount(finishedWork);\n      }\n\n      if (flags & Ref) {\n        safelyAttachRef(finishedWork, finishedWork.return);\n      }\n      break;\n    }\n    case Profiler: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      // TODO: Should this fire inside an offscreen tree? Or should it wait to\n      // fire when the tree becomes visible again.\n      if (flags & Update) {\n        commitProfilerUpdate(finishedWork, current);\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Update) {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const isModernRoot = (finishedWork.mode & ConcurrentMode) !== NoMode;\n      if (isModernRoot) {\n        const isHidden = finishedWork.memoizedState !== null;\n        const newOffscreenSubtreeIsHidden =\n          isHidden || offscreenSubtreeIsHidden;\n        if (newOffscreenSubtreeIsHidden) {\n          // The Offscreen tree is hidden. Skip over its layout effects.\n        } else {\n          // The Offscreen tree is visible.\n\n          const wasHidden = current !== null && current.memoizedState !== null;\n          const newOffscreenSubtreeWasHidden =\n            wasHidden || offscreenSubtreeWasHidden;\n          const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n          const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n          offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n          if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n            // This is the root of a reappearing boundary. As we continue\n            // traversing the layout effects, we must also re-mount layout\n            // effects that were unmounted when the Offscreen subtree was\n            // hidden. So this is a superset of the normal commitLayoutEffects.\n            const includeWorkInProgressEffects =\n              (finishedWork.subtreeFlags & LayoutMask) !== NoFlags;\n            recursivelyTraverseReappearLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              includeWorkInProgressEffects,\n            );\n          } else {\n            recursivelyTraverseLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n            );\n          }\n          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        }\n      } else {\n        recursivelyTraverseLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n        );\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      break;\n    }\n  }\n}\n\nfunction commitTransitionProgress(offscreenFiber: Fiber) {\n  if (enableTransitionTracing) {\n    // This function adds suspense boundaries to the root\n    // or tracing marker's pendingBoundaries map.\n    // When a suspense boundary goes from a resolved to a fallback\n    // state we add the boundary to the map, and when it goes from\n    // a fallback to a resolved state, we remove the boundary from\n    // the map.\n\n    // We use stateNode on the Offscreen component as a stable object\n    // that doesnt change from render to render. This way we can\n    // distinguish between different Offscreen instances (vs. the same\n    // Offscreen instance with different fibers)\n    const offscreenInstance: OffscreenInstance = offscreenFiber.stateNode;\n\n    let prevState: SuspenseState | null = null;\n    const previousFiber = offscreenFiber.alternate;\n    if (previousFiber !== null && previousFiber.memoizedState !== null) {\n      prevState = previousFiber.memoizedState;\n    }\n    const nextState: SuspenseState | null = offscreenFiber.memoizedState;\n\n    const wasHidden = prevState !== null;\n    const isHidden = nextState !== null;\n\n    const pendingMarkers = offscreenInstance.pendingMarkers;\n    // If there is a name on the suspense boundary, store that in\n    // the pending boundaries.\n    let name = null;\n    const parent = offscreenFiber.return;\n    if (\n      parent !== null &&\n      parent.tag === SuspenseComponent &&\n      parent.memoizedProps.unstable_name\n    ) {\n      name = parent.memoizedProps.unstable_name;\n    }\n\n    if (!wasHidden && isHidden) {\n      // The suspense boundaries was just hidden. Add the boundary\n      // to the pending boundary set if it's there\n      if (pendingMarkers !== null) {\n        pendingMarkers.forEach(markerInstance => {\n          const pendingBoundaries = markerInstance.pendingBoundaries;\n          const transitions = markerInstance.transitions;\n          if (\n            pendingBoundaries !== null &&\n            !pendingBoundaries.has(offscreenInstance)\n          ) {\n            pendingBoundaries.set(offscreenInstance, {\n              name,\n            });\n            if (transitions !== null) {\n              if (markerInstance.name) {\n                addMarkerProgressCallbackToPendingTransition(\n                  markerInstance.name,\n                  transitions,\n                  pendingBoundaries,\n                );\n              } else {\n                transitions.forEach(transition => {\n                  addTransitionProgressCallbackToPendingTransition(\n                    transition,\n                    pendingBoundaries,\n                  );\n                });\n              }\n            }\n          }\n        });\n      }\n    } else if (wasHidden && !isHidden) {\n      // The suspense boundary went from hidden to visible. Remove\n      // the boundary from the pending suspense boundaries set\n      // if it's there\n      if (pendingMarkers !== null) {\n        pendingMarkers.forEach(markerInstance => {\n          const pendingBoundaries = markerInstance.pendingBoundaries;\n          const transitions = markerInstance.transitions;\n          if (\n            pendingBoundaries !== null &&\n            pendingBoundaries.has(offscreenInstance)\n          ) {\n            pendingBoundaries.delete(offscreenInstance);\n            if (transitions !== null) {\n              if (markerInstance.name) {\n                addMarkerProgressCallbackToPendingTransition(\n                  markerInstance.name,\n                  transitions,\n                  pendingBoundaries,\n                );\n              } else {\n                transitions.forEach(transition => {\n                  addTransitionProgressCallbackToPendingTransition(\n                    transition,\n                    pendingBoundaries,\n                  );\n                });\n              }\n            }\n          }\n        });\n      }\n    }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  let hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n          try {\n            const instance = node.stateNode;\n            if (isHidden) {\n              hideInstance(instance);\n            } else {\n              unhideInstance(node.stateNode, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          try {\n            const instance = node.stateNode;\n            if (isHidden) {\n              hideTextInstance(instance);\n            } else {\n              unhideTextInstance(instance, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden.\n        // Don't search any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      let retVal;\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          retVal = ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        retVal = ref(instanceToUse);\n      }\n      if (__DEV__) {\n        if (typeof retVal === 'function') {\n          console.error(\n            'Unexpected return value from a callback ref in %s. ' +\n              'A callback ref should not return a function.',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          currentRef(null);\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        currentRef(null);\n      }\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  }\n\n  // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n  if (!(deletedTreeCleanUpLevel >= 2)) {\n    // This is the default branch (level 0).\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.dependencies = null;\n    fiber.memoizedProps = null;\n    fiber.memoizedState = null;\n    fiber.pendingProps = null;\n    fiber.sibling = null;\n    fiber.stateNode = null;\n    fiber.updateQueue = null;\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n  } else {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null;\n\n    // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n    if (fiber.tag === HostComponent) {\n      const hostInstance: Instance = fiber.stateNode;\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n    fiber.stateNode = null;\n\n    // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n\n    if (deletedTreeCleanUpLevel >= 3) {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null;\n      // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n\n  throw new Error(\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  switch (parentFiber.tag) {\n    case HostComponent: {\n      const parent: Instance = parentFiber.stateNode;\n      if (parentFiber.flags & ContentReset) {\n        // Reset the text content of the parent before doing any insertions\n        resetTextContent(parent);\n        // Clear ContentReset from the effect tag\n        parentFiber.flags &= ~ContentReset;\n      }\n\n      const before = getHostSibling(finishedWork);\n      // We only have the top Fiber that was inserted but we need to recurse down its\n      // children to find all the terminal nodes.\n      insertOrAppendPlacementNode(finishedWork, before, parent);\n      break;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const parent: Container = parentFiber.stateNode.containerInfo;\n      const before = getHostSibling(finishedWork);\n      insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n      break;\n    }\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      throw new Error(\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\n// These are tracked on the stack as we recursively traverse a\n// deleted subtree.\n// TODO: Update these during the whole mutation phase, not just during\n// a deletion.\nlet hostParent: Instance | Container | null = null;\nlet hostParentIsContainer: boolean = false;\n\nfunction commitDeletionEffects(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  deletedFiber: Fiber,\n) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was deleted but we need to recurse down its\n    // children to find all the terminal nodes.\n\n    // Recursively delete all host nodes from the parent, detach refs, clean\n    // up mounted layout effects, and call componentWillUnmount.\n\n    // We only need to remove the topmost host child in each branch. But then we\n    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n    // could split this into two separate traversals functions, where the second\n    // one doesn't include any removeChild logic. This is maybe the same\n    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n    // the layout phase is refactored to use recursion).\n\n    // Before starting, find the nearest host parent on the stack so we know\n    // which instance/container to remove the children from.\n    // TODO: Instead of searching up the fiber return path on every deletion, we\n    // can track the nearest host component on the JS stack as we traverse the\n    // tree during the commit phase. This would make insertions faster, too.\n    let parent = returnFiber;\n    findParent: while (parent !== null) {\n      switch (parent.tag) {\n        case HostComponent: {\n          hostParent = parent.stateNode;\n          hostParentIsContainer = false;\n          break findParent;\n        }\n        case HostRoot: {\n          hostParent = parent.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          break findParent;\n        }\n        case HostPortal: {\n          hostParent = parent.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          break findParent;\n        }\n      }\n      parent = parent.return;\n    }\n    if (hostParent === null) {\n      throw new Error(\n        'Expected to find a host parent. This error is likely caused by ' +\n          'a bug in React. Please file an issue.',\n      );\n    }\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n    hostParent = null;\n    hostParentIsContainer = false;\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n  }\n\n  detachFiberMutation(deletedFiber);\n}\n\nfunction recursivelyTraverseDeletionEffects(\n  finishedRoot,\n  nearestMountedAncestor,\n  parent,\n) {\n  // TODO: Use a static flag to skip trees that don't have unmount effects\n  let child = parent.child;\n  while (child !== null) {\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n    child = child.sibling;\n  }\n}\n\nfunction commitDeletionEffectsOnFiber(\n  finishedRoot: FiberRoot,\n  nearestMountedAncestor: Fiber,\n  deletedFiber: Fiber,\n) {\n  onCommitUnmount(deletedFiber);\n\n  // The cases in this outer switch modify the stack before they traverse\n  // into their subtree. There are simpler cases in the inner switch\n  // that don't modify the stack.\n  switch (deletedFiber.tag) {\n    case HostComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      }\n      // Intentional fallthrough to next branch\n    }\n    // eslint-disable-next-line-no-fallthrough\n    case HostText: {\n      // We only need to remove the nearest host child. Set the host parent\n      // to `null` on the stack to indicate that nested children don't\n      // need to be removed.\n      if (supportsMutation) {\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = null;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n\n        if (hostParent !== null) {\n          // Now that all the child effects have unmounted, we can remove the\n          // node from the tree.\n          if (hostParentIsContainer) {\n            removeChildFromContainer(\n              ((hostParent: any): Container),\n              (deletedFiber.stateNode: Instance | TextInstance),\n            );\n          } else {\n            removeChild(\n              ((hostParent: any): Instance),\n              (deletedFiber.stateNode: Instance | TextInstance),\n            );\n          }\n        }\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((deletedFiber.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Dehydrated fragments don't have any children\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (supportsMutation) {\n        if (hostParent !== null) {\n          if (hostParentIsContainer) {\n            clearSuspenseBoundaryFromContainer(\n              ((hostParent: any): Container),\n              (deletedFiber.stateNode: SuspenseInstance),\n            );\n          } else {\n            clearSuspenseBoundary(\n              ((hostParent: any): Instance),\n              (deletedFiber.stateNode: SuspenseInstance),\n            );\n          }\n        }\n      }\n      return;\n    }\n    case HostPortal: {\n      if (supportsMutation) {\n        // When we go into a portal, it becomes the parent to remove from.\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = deletedFiber.stateNode.containerInfo;\n        hostParentIsContainer = true;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n      } else {\n        emptyPortalContainer(deletedFiber);\n\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      return;\n    }\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        const updateQueue: FunctionComponentUpdateQueue | null = (deletedFiber.updateQueue: any);\n        if (updateQueue !== null) {\n          const lastEffect = updateQueue.lastEffect;\n          if (lastEffect !== null) {\n            const firstEffect = lastEffect.next;\n\n            let effect = firstEffect;\n            do {\n              const {destroy, tag} = effect;\n              if (destroy !== undefined) {\n                if ((tag & HookInsertion) !== NoHookEffect) {\n                  safelyCallDestroy(\n                    deletedFiber,\n                    nearestMountedAncestor,\n                    destroy,\n                  );\n                } else if ((tag & HookLayout) !== NoHookEffect) {\n                  if (enableSchedulingProfiler) {\n                    markComponentLayoutEffectUnmountStarted(deletedFiber);\n                  }\n\n                  if (\n                    enableProfilerTimer &&\n                    enableProfilerCommitHooks &&\n                    deletedFiber.mode & ProfileMode\n                  ) {\n                    startLayoutEffectTimer();\n                    safelyCallDestroy(\n                      deletedFiber,\n                      nearestMountedAncestor,\n                      destroy,\n                    );\n                    recordLayoutEffectDuration(deletedFiber);\n                  } else {\n                    safelyCallDestroy(\n                      deletedFiber,\n                      nearestMountedAncestor,\n                      destroy,\n                    );\n                  }\n\n                  if (enableSchedulingProfiler) {\n                    markComponentLayoutEffectUnmountStopped();\n                  }\n                }\n              }\n              effect = effect.next;\n            } while (effect !== firstEffect);\n          }\n        }\n      }\n\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case ClassComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        const instance = deletedFiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(\n            deletedFiber,\n            nearestMountedAncestor,\n            instance,\n          );\n        }\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case OffscreenComponent: {\n      if (deletedFiber.mode & ConcurrentMode) {\n        // If this offscreen component is hidden, we already unmounted it. Before\n        // deleting the children, track that it's already unmounted so that we\n        // don't attempt to unmount the effects again.\n        // TODO: If the tree is hidden, in most cases we should be able to skip\n        // over the nested children entirely. An exception is we haven't yet found\n        // the topmost host node to delete, which we already track on the stack.\n        // But the other case is portals, which need to be detached no matter how\n        // deeply they are nested. We should use a subtree flag to track whether a\n        // subtree includes a nested portal.\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeWasHidden =\n          prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n  }\n}\nfunction commitSuspenseCallback(finishedWork: Fiber) {\n  // TODO: Move this to passive phase\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          try {\n            commitHydratedSuspenseInstance(suspenseInstance);\n            if (enableSuspenseCallback) {\n              const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n              if (hydrationCallbacks !== null) {\n                const onHydrated = hydrationCallbacks.onHydrated;\n                if (onHydrated) {\n                  onHydrated(suspenseInstance);\n                }\n              }\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction getRetryCache(finishedWork) {\n  // TODO: Unify the interface for the retry cache so we don't have to switch\n  // on the tag like this.\n  switch (finishedWork.tag) {\n    case SuspenseComponent:\n    case SuspenseListComponent: {\n      let retryCache = finishedWork.stateNode;\n      if (retryCache === null) {\n        retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n      }\n      return retryCache;\n    }\n    case OffscreenComponent: {\n      const instance: OffscreenInstance = finishedWork.stateNode;\n      let retryCache = instance.retryCache;\n      if (retryCache === null) {\n        retryCache = instance.retryCache = new PossiblyWeakSet();\n      }\n      return retryCache;\n    }\n    default: {\n      throw new Error(\n        `Unexpected Suspense handler tag (${finishedWork.tag}). This is a ` +\n          'bug in React.',\n      );\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(\n  finishedWork: Fiber,\n  wakeables: Set<Wakeable>,\n) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const retryCache = getRetryCache(finishedWork);\n  wakeables.forEach(wakeable => {\n    // Memoize using the boundary fiber to prevent redundant listeners.\n    const retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n    if (!retryCache.has(wakeable)) {\n      retryCache.add(wakeable);\n\n      if (enableUpdaterTracking) {\n        if (isDevToolsPresent) {\n          if (inProgressLanes !== null && inProgressRoot !== null) {\n            // If we have pending work still, associate the original updaters with it.\n            restorePendingUpdaters(inProgressRoot, inProgressLanes);\n          } else {\n            throw Error(\n              'Expected finished root and lanes to be set. This is a bug in React.',\n            );\n          }\n        }\n      }\n\n      wakeable.then(retry, retry);\n    }\n  });\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nexport function commitMutationEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n\n  setCurrentDebugFiberInDEV(finishedWork);\n  commitMutationEffectsOnFiber(finishedWork, root, committedLanes);\n  setCurrentDebugFiberInDEV(finishedWork);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseMutationEffects(\n  root: FiberRoot,\n  parentFiber: Fiber,\n  lanes: Lanes,\n) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects hae fired.\n  const deletions = parentFiber.deletions;\n  if (deletions !== null) {\n    for (let i = 0; i < deletions.length; i++) {\n      const childToDelete = deletions[i];\n      try {\n        commitDeletionEffects(root, parentFiber, childToDelete);\n      } catch (error) {\n        captureCommitPhaseError(childToDelete, parentFiber, error);\n      }\n    }\n  }\n\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  if (parentFiber.subtreeFlags & MutationMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      commitMutationEffectsOnFiber(child, root, lanes);\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitMutationEffectsOnFiber(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  lanes: Lanes,\n) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconcilation, because those can be set on all fiber types.\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        try {\n          commitHookEffectListUnmount(\n            HookInsertion | HookHasEffect,\n            finishedWork,\n            finishedWork.return,\n          );\n          commitHookEffectListMount(\n            HookInsertion | HookHasEffect,\n            finishedWork,\n          );\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Ref) {\n        if (current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n\n      if (flags & Callback && offscreenSubtreeIsHidden) {\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          deferHiddenCallbacks(updateQueue);\n        }\n      }\n      return;\n    }\n    case HostComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Ref) {\n        if (current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n      if (supportsMutation) {\n        // TODO: ContentReset gets cleared by the children during the commit\n        // phase. This is a refactor hazard because it means we must read\n        // flags the flags after `commitReconciliationEffects` has already run;\n        // the order matters. We should refactor so that ContentReset does not\n        // rely on mutating the flag during commit. Like by setting a flag\n        // during the render phase instead.\n        if (finishedWork.flags & ContentReset) {\n          const instance: Instance = finishedWork.stateNode;\n          try {\n            resetTextContent(instance);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n\n        if (flags & Update) {\n          const instance: Instance = finishedWork.stateNode;\n          if (instance != null) {\n            // Commit the work prepared earlier.\n            const newProps = finishedWork.memoizedProps;\n            // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n            const oldProps =\n              current !== null ? current.memoizedProps : newProps;\n            const type = finishedWork.type;\n            // TODO: Type the updateQueue to be specific to host components.\n            const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n            finishedWork.updateQueue = null;\n            if (updatePayload !== null) {\n              try {\n                commitUpdate(\n                  instance,\n                  updatePayload,\n                  type,\n                  oldProps,\n                  newProps,\n                  finishedWork,\n                );\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error,\n                );\n              }\n            }\n          }\n        }\n      }\n      return;\n    }\n    case HostText: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsMutation) {\n          if (finishedWork.stateNode === null) {\n            throw new Error(\n              'This should have a text node initialized. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          const textInstance: TextInstance = finishedWork.stateNode;\n          const newText: string = finishedWork.memoizedProps;\n          // For hydration we reuse the update path but we treat the oldProps\n          // as the newProps. The updatePayload will contain the real change in\n          // this case.\n          const oldText: string =\n            current !== null ? current.memoizedProps : newText;\n\n          try {\n            commitTextUpdate(textInstance, oldText, newText);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case HostRoot: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsMutation && supportsHydration) {\n          if (current !== null) {\n            const prevRootState: RootState = current.memoizedState;\n            if (prevRootState.isDehydrated) {\n              try {\n                commitHydratedContainer(root.containerInfo);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error,\n                );\n              }\n            }\n          }\n        }\n        if (supportsPersistence) {\n          const containerInfo = root.containerInfo;\n          const pendingChildren = root.pendingChildren;\n          try {\n            replaceContainerChildren(containerInfo, pendingChildren);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case HostPortal: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsPersistence) {\n          const portal = finishedWork.stateNode;\n          const containerInfo = portal.containerInfo;\n          const pendingChildren = portal.pendingChildren;\n          try {\n            replaceContainerChildren(containerInfo, pendingChildren);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      const offscreenFiber: Fiber = (finishedWork.child: any);\n\n      if (offscreenFiber.flags & Visibility) {\n        const newState: OffscreenState | null = offscreenFiber.memoizedState;\n        const isHidden = newState !== null;\n        if (isHidden) {\n          const wasHidden =\n            offscreenFiber.alternate !== null &&\n            offscreenFiber.alternate.memoizedState !== null;\n          if (!wasHidden) {\n            // TODO: Move to passive phase\n            markCommitTimeOfFallback();\n          }\n        }\n      }\n\n      if (flags & Update) {\n        try {\n          commitSuspenseCallback(finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n        if (wakeables !== null) {\n          finishedWork.updateQueue = null;\n          attachSuspenseRetryListeners(finishedWork, wakeables);\n        }\n      }\n      return;\n    }\n    case OffscreenComponent: {\n      const newState: OffscreenState | null = finishedWork.memoizedState;\n      const isHidden = newState !== null;\n      const wasHidden = current !== null && current.memoizedState !== null;\n\n      if (finishedWork.mode & ConcurrentMode) {\n        // Before committing the children, track on the stack whether this\n        // offscreen subtree was already hidden, so that we don't unmount the\n        // effects again.\n        const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n      } else {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      }\n\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Visibility) {\n        const offscreenInstance: OffscreenInstance = finishedWork.stateNode;\n        const offscreenBoundary: Fiber = finishedWork;\n\n        // Track the current state on the Offscreen instance so we can\n        // read it during an event\n        if (isHidden) {\n          offscreenInstance.visibility &= ~OffscreenVisible;\n        } else {\n          offscreenInstance.visibility |= OffscreenVisible;\n        }\n\n        if (isHidden) {\n          if (!wasHidden) {\n            if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n              // Disappear the layout effects of all the children\n              recursivelyTraverseDisappearLayoutEffects(offscreenBoundary);\n            }\n          }\n        } else {\n          if (wasHidden) {\n            // TODO: Move re-appear call here for symmetry?\n          }\n        }\n\n        if (supportsMutation) {\n          // TODO: This needs to run whenever there's an insertion or update\n          // inside a hidden Offscreen tree.\n          hideOrUnhideAllChildren(offscreenBoundary, isHidden);\n        }\n      }\n\n      // TODO: Move to passive phase\n      if (flags & Update) {\n        const offscreenQueue: OffscreenQueue | null = (finishedWork.updateQueue: any);\n        if (offscreenQueue !== null) {\n          const wakeables = offscreenQueue.wakeables;\n          if (wakeables !== null) {\n            offscreenQueue.wakeables = null;\n            attachSuspenseRetryListeners(finishedWork, wakeables);\n          }\n        }\n      }\n      return;\n    }\n    case SuspenseListComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n        if (wakeables !== null) {\n          finishedWork.updateQueue = null;\n          attachSuspenseRetryListeners(finishedWork, wakeables);\n        }\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork);\n\n        // TODO: This is a temporary solution that allowed us to transition away\n        // from React Flare on www.\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(finishedWork, finishedWork.return);\n          }\n          safelyAttachRef(finishedWork, finishedWork.return);\n        }\n        if (flags & Update) {\n          const scopeInstance = finishedWork.stateNode;\n          prepareScopeUpdate(scopeInstance, finishedWork);\n        }\n      }\n      return;\n    }\n    default: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      return;\n    }\n  }\n}\nfunction commitReconciliationEffects(finishedWork: Fiber) {\n  // Placement effects (insertions, reorders) can be scheduled on any fiber\n  // type. They needs to happen after the children effects have fired, but\n  // before the effects on this fiber have fired.\n  const flags = finishedWork.flags;\n  if (flags & Placement) {\n    try {\n      commitPlacement(finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n    // Clear the \"placement\" from effect tag so that we know that this is\n    // inserted, before any life-cycles like componentDidMount gets called.\n    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n    // and isMounted is deprecated anyway so we should be able to kill this.\n    finishedWork.flags &= ~Placement;\n  }\n  if (flags & Hydrating) {\n    finishedWork.flags &= ~Hydrating;\n  }\n}\n\nexport function commitLayoutEffects(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n): void {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n\n  const current = finishedWork.alternate;\n  commitLayoutEffectOnFiber(root, current, finishedWork, committedLanes);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseLayoutEffects(\n  root: FiberRoot,\n  parentFiber: Fiber,\n  lanes: Lanes,\n) {\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  if (parentFiber.subtreeFlags & LayoutMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      const current = child.alternate;\n      commitLayoutEffectOnFiber(root, current, child, lanes);\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction disappearLayoutEffects(finishedWork: Fiber) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      // TODO (Offscreen) Check: flags & LayoutStatic\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListUnmount(\n            HookLayout,\n            finishedWork,\n            finishedWork.return,\n          );\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListUnmount(\n          HookLayout,\n          finishedWork,\n          finishedWork.return,\n        );\n      }\n\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n    case ClassComponent: {\n      // TODO (Offscreen) Check: flags & RefStatic\n      safelyDetachRef(finishedWork, finishedWork.return);\n\n      const instance = finishedWork.stateNode;\n      if (typeof instance.componentWillUnmount === 'function') {\n        safelyCallComponentWillUnmount(\n          finishedWork,\n          finishedWork.return,\n          instance,\n        );\n      }\n\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n    case HostComponent: {\n      // TODO (Offscreen) Check: flags & RefStatic\n      safelyDetachRef(finishedWork, finishedWork.return);\n\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n    case OffscreenComponent: {\n      const isHidden = finishedWork.memoizedState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is already hidden. Don't disappear\n        // its effects.\n      } else {\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n  }\n}\n\nfunction recursivelyTraverseDisappearLayoutEffects(parentFiber: Fiber) {\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n  let child = parentFiber.child;\n  while (child !== null) {\n    disappearLayoutEffects(child);\n    child = child.sibling;\n  }\n}\n\nfunction reappearLayoutEffects(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  includeWorkInProgressEffects: boolean,\n) {\n  // Turn on layout effects in a tree that previously disappeared.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n      // TODO: Check flags & LayoutStatic\n      commitHookLayoutEffects(finishedWork, HookLayout);\n      break;\n    }\n    case ClassComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n\n      // TODO: Check for LayoutStatic flag\n      const instance = finishedWork.stateNode;\n      if (typeof instance.componentDidMount === 'function') {\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n\n      // Commit any callbacks that would have fired while the component\n      // was hidden.\n      const updateQueue: UpdateQueue<\n        *,\n      > | null = (finishedWork.updateQueue: any);\n      if (updateQueue !== null) {\n        commitHiddenCallbacks(updateQueue, instance);\n      }\n\n      // If this is newly finished work, check for setState callbacks\n      if (includeWorkInProgressEffects && flags & Callback) {\n        commitClassCallbacks(finishedWork);\n      }\n\n      // TODO: Check flags & RefStatic\n      safelyAttachRef(finishedWork, finishedWork.return);\n      break;\n    }\n    // Unlike commitLayoutEffectsOnFiber, we don't need to handle HostRoot\n    // because this function only visits nodes that are inside an\n    // Offscreen fiber.\n    // case HostRoot: {\n    //  ...\n    // }\n    case HostComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n\n      // Renderers may schedule work to be done after host components are mounted\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n      // These effects should only be committed when components are first mounted,\n      // aka when there is no current/alternate.\n      if (includeWorkInProgressEffects && current === null && flags & Update) {\n        commitHostComponentMount(finishedWork);\n      }\n\n      // TODO: Check flags & Ref\n      safelyAttachRef(finishedWork, finishedWork.return);\n      break;\n    }\n    case Profiler: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n      // TODO: Figure out how Profiler updates should work with Offscreen\n      if (includeWorkInProgressEffects && flags & Update) {\n        commitProfilerUpdate(finishedWork, current);\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n\n      // TODO: Figure out how Suspense hydration callbacks should work\n      // with Offscreen.\n      if (includeWorkInProgressEffects && flags & Update) {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const offscreenState: OffscreenState = finishedWork.memoizedState;\n      const isHidden = offscreenState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n      } else {\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          includeWorkInProgressEffects,\n        );\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n      break;\n    }\n  }\n}\n\nfunction recursivelyTraverseReappearLayoutEffects(\n  finishedRoot: FiberRoot,\n  parentFiber: Fiber,\n  committedLanes: Lanes,\n  includeWorkInProgressEffects: boolean,\n) {\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  const childShouldIncludeWorkInProgressEffects =\n    includeWorkInProgressEffects &&\n    (parentFiber.subtreeFlags & LayoutMask) !== NoFlags;\n\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  let child = parentFiber.child;\n  while (child !== null) {\n    const current = child.alternate;\n    reappearLayoutEffects(\n      finishedRoot,\n      current,\n      child,\n      committedLanes,\n      childShouldIncludeWorkInProgressEffects,\n    );\n    child = child.sibling;\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitHookPassiveMountEffects(\n  finishedWork: Fiber,\n  hookFlags: HookFlags,\n) {\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    finishedWork.mode & ProfileMode\n  ) {\n    startPassiveEffectTimer();\n    try {\n      commitHookEffectListMount(hookFlags, finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n    recordPassiveEffectDuration(finishedWork);\n  } else {\n    try {\n      commitHookEffectListMount(hookFlags, finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitOffscreenPassiveMountEffects(\n  current: Fiber | null,\n  finishedWork: Fiber,\n  instance: OffscreenInstance,\n) {\n  if (enableCache) {\n    let previousCache: Cache | null = null;\n    if (\n      current !== null &&\n      current.memoizedState !== null &&\n      current.memoizedState.cachePool !== null\n    ) {\n      previousCache = current.memoizedState.cachePool.pool;\n    }\n    let nextCache: Cache | null = null;\n    if (\n      finishedWork.memoizedState !== null &&\n      finishedWork.memoizedState.cachePool !== null\n    ) {\n      nextCache = finishedWork.memoizedState.cachePool.pool;\n    }\n    // Retain/release the cache used for pending (suspended) nodes.\n    // Note that this is only reached in the non-suspended/visible case:\n    // when the content is suspended/hidden, the retain/release occurs\n    // via the parent Suspense component (see case above).\n    if (nextCache !== previousCache) {\n      if (nextCache != null) {\n        retainCache(nextCache);\n      }\n      if (previousCache != null) {\n        releaseCache(previousCache);\n      }\n    }\n  }\n\n  if (enableTransitionTracing) {\n    // TODO: Pre-rendering should not be counted as part of a transition. We\n    // may add separate logs for pre-rendering, but it's not part of the\n    // primary metrics.\n    const offscreenState: OffscreenState = finishedWork.memoizedState;\n    const queue: OffscreenQueue | null = (finishedWork.updateQueue: any);\n\n    const isHidden = offscreenState !== null;\n    if (queue !== null) {\n      if (isHidden) {\n        const transitions = queue.transitions;\n        if (transitions !== null) {\n          transitions.forEach(transition => {\n            // Add all the transitions saved in the update queue during\n            // the render phase (ie the transitions associated with this boundary)\n            // into the transitions set.\n            if (instance.transitions === null) {\n              instance.transitions = new Set();\n            }\n            instance.transitions.add(transition);\n          });\n        }\n\n        const markerInstances = queue.markerInstances;\n        if (markerInstances !== null) {\n          markerInstances.forEach(markerInstance => {\n            const markerTransitions = markerInstance.transitions;\n            // There should only be a few tracing marker transitions because\n            // they should be only associated with the transition that\n            // caused them\n            if (markerTransitions !== null) {\n              markerTransitions.forEach(transition => {\n                if (instance.transitions === null) {\n                  instance.transitions = new Set();\n                } else if (instance.transitions.has(transition)) {\n                  if (markerInstance.pendingBoundaries === null) {\n                    markerInstance.pendingBoundaries = new Map();\n                  }\n                  if (instance.pendingMarkers === null) {\n                    instance.pendingMarkers = new Set();\n                  }\n\n                  instance.pendingMarkers.add(markerInstance);\n                }\n              });\n            }\n          });\n        }\n      }\n\n      finishedWork.updateQueue = null;\n    }\n\n    commitTransitionProgress(finishedWork);\n  }\n}\n\nfunction commitCachePassiveMountEffect(\n  current: Fiber | null,\n  finishedWork: Fiber,\n) {\n  if (enableCache) {\n    let previousCache: Cache | null = null;\n    if (finishedWork.alternate !== null) {\n      previousCache = finishedWork.alternate.memoizedState.cache;\n    }\n    const nextCache = finishedWork.memoizedState.cache;\n    // Retain/release the cache. In theory the cache component\n    // could be \"borrowing\" a cache instance owned by some parent,\n    // in which case we could avoid retaining/releasing. But it\n    // is non-trivial to determine when that is the case, so we\n    // always retain/release.\n    if (nextCache !== previousCache) {\n      retainCache(nextCache);\n      if (previousCache != null) {\n        releaseCache(previousCache);\n      }\n    }\n  }\n}\n\nfunction commitTracingMarkerPassiveMountEffect(finishedWork: Fiber) {\n  // Get the transitions that were initiatized during the render\n  // and add a start transition callback for each of them\n  const instance = finishedWork.stateNode;\n  if (\n    instance.transitions !== null &&\n    (instance.pendingBoundaries === null ||\n      instance.pendingBoundaries.size === 0)\n  ) {\n    instance.transitions.forEach(transition => {\n      addMarkerCompleteCallbackToPendingTransition(\n        finishedWork.memoizedProps.name,\n        instance.transitions,\n      );\n    });\n    instance.transitions = null;\n    instance.pendingBoundaries = null;\n  }\n}\n\nexport function commitPassiveMountEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n): void {\n  setCurrentDebugFiberInDEV(finishedWork);\n  commitPassiveMountOnFiber(\n    root,\n    finishedWork,\n    committedLanes,\n    committedTransitions,\n  );\n  resetCurrentDebugFiberInDEV();\n}\n\nfunction recursivelyTraversePassiveMountEffects(\n  root: FiberRoot,\n  parentFiber: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  if (parentFiber.subtreeFlags & PassiveMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      commitPassiveMountOnFiber(\n        root,\n        child,\n        committedLanes,\n        committedTransitions,\n      );\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitPassiveMountOnFiber(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n): void {\n  // When updating this function, also update reconnectPassiveEffects, which does\n  // most of the same things when an offscreen tree goes from hidden -> visible,\n  // or when toggling effects inside a hidden tree.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      if (flags & Passive) {\n        commitHookPassiveMountEffects(\n          finishedWork,\n          HookPassive | HookHasEffect,\n        );\n      }\n      break;\n    }\n    case HostRoot: {\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      if (flags & Passive) {\n        if (enableCache) {\n          let previousCache: Cache | null = null;\n          if (finishedWork.alternate !== null) {\n            previousCache = finishedWork.alternate.memoizedState.cache;\n          }\n          const nextCache = finishedWork.memoizedState.cache;\n          // Retain/release the root cache.\n          // Note that on initial mount, previousCache and nextCache will be the same\n          // and this retain won't occur. To counter this, we instead retain the HostRoot's\n          // initial cache when creating the root itself (see createFiberRoot() in\n          // ReactFiberRoot.js). Subsequent updates that change the cache are reflected\n          // here, such that previous/next caches are retained correctly.\n          if (nextCache !== previousCache) {\n            retainCache(nextCache);\n            if (previousCache != null) {\n              releaseCache(previousCache);\n            }\n          }\n        }\n\n        if (enableTransitionTracing) {\n          // Get the transitions that were initiatized during the render\n          // and add a start transition callback for each of them\n          const root = finishedWork.stateNode;\n          const incompleteTransitions = root.incompleteTransitions;\n          // Initial render\n          if (committedTransitions !== null) {\n            committedTransitions.forEach(transition => {\n              addTransitionStartCallbackToPendingTransition(transition);\n            });\n\n            clearTransitionsForLanes(finishedRoot, committedLanes);\n          }\n\n          incompleteTransitions.forEach((markerInstance, transition) => {\n            const pendingBoundaries = markerInstance.pendingBoundaries;\n            if (pendingBoundaries === null || pendingBoundaries.size === 0) {\n              addTransitionCompleteCallbackToPendingTransition(transition);\n              incompleteTransitions.delete(transition);\n            }\n          });\n\n          clearTransitionsForLanes(finishedRoot, committedLanes);\n        }\n      }\n      break;\n    }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      // TODO: Pass `current` as argument to this function\n      const instance: OffscreenInstance = finishedWork.stateNode;\n      const nextState: OffscreenState | null = finishedWork.memoizedState;\n\n      const isHidden = nextState !== null;\n\n      if (isHidden) {\n        if (instance.visibility & OffscreenPassiveEffectsConnected) {\n          // The effects are currently connected. Update them.\n          recursivelyTraversePassiveMountEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n          );\n        } else {\n          if (finishedWork.mode & ConcurrentMode) {\n            // The effects are currently disconnected. Since the tree is hidden,\n            // don't connect them. This also applies to the initial render.\n            if (enableCache || enableTransitionTracing) {\n              // \"Atomic\" effects are ones that need to fire on every commit,\n              // even during pre-rendering. An example is updating the reference\n              // count on cache instances.\n              recursivelyTraverseAtomicPassiveEffects(\n                finishedRoot,\n                finishedWork,\n                committedLanes,\n                committedTransitions,\n              );\n            }\n          } else {\n            // Legacy Mode: Fire the effects even if the tree is hidden.\n            instance.visibility |= OffscreenPassiveEffectsConnected;\n            recursivelyTraversePassiveMountEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions,\n            );\n          }\n        }\n      } else {\n        // Tree is visible\n        if (instance.visibility & OffscreenPassiveEffectsConnected) {\n          // The effects are currently connected. Update them.\n          recursivelyTraversePassiveMountEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n          );\n        } else {\n          // The effects are currently disconnected. Reconnect them, while also\n          // firing effects inside newly mounted trees. This also applies to\n          // the initial render.\n          instance.visibility |= OffscreenPassiveEffectsConnected;\n\n          const includeWorkInProgressEffects =\n            (finishedWork.subtreeFlags & PassiveMask) !== NoFlags;\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n            includeWorkInProgressEffects,\n          );\n        }\n      }\n\n      if (flags & Passive) {\n        const current = finishedWork.alternate;\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\n      }\n      break;\n    }\n    case CacheComponent: {\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      if (flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        commitCachePassiveMountEffect(current, finishedWork);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        recursivelyTraversePassiveMountEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n        );\n        if (flags & Passive) {\n          commitTracingMarkerPassiveMountEffect(finishedWork);\n        }\n        break;\n      }\n      // Intentional fallthrough to next branch\n    }\n    // eslint-disable-next-line-no-fallthrough\n    default: {\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      break;\n    }\n  }\n}\n\nfunction recursivelyTraverseReconnectPassiveEffects(\n  finishedRoot: FiberRoot,\n  parentFiber: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n  includeWorkInProgressEffects: boolean,\n) {\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  const childShouldIncludeWorkInProgressEffects =\n    includeWorkInProgressEffects &&\n    (parentFiber.subtreeFlags & PassiveMask) !== NoFlags;\n\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  let child = parentFiber.child;\n  while (child !== null) {\n    reconnectPassiveEffects(\n      finishedRoot,\n      child,\n      committedLanes,\n      committedTransitions,\n      childShouldIncludeWorkInProgressEffects,\n    );\n    child = child.sibling;\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction reconnectPassiveEffects(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  includeWorkInProgressEffects: boolean,\n) {\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraverseReconnectPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        includeWorkInProgressEffects,\n      );\n      // TODO: Check for PassiveStatic flag\n      commitHookPassiveMountEffects(finishedWork, HookPassive);\n      break;\n    }\n    // Unlike commitPassiveMountOnFiber, we don't need to handle HostRoot\n    // because this function only visits nodes that are inside an\n    // Offscreen fiber.\n    // case HostRoot: {\n    //  ...\n    // }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      const instance: OffscreenInstance = finishedWork.stateNode;\n      const nextState: OffscreenState | null = finishedWork.memoizedState;\n\n      const isHidden = nextState !== null;\n\n      if (isHidden) {\n        if (instance.visibility & OffscreenPassiveEffectsConnected) {\n          // The effects are currently connected. Update them.\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n            includeWorkInProgressEffects,\n          );\n        } else {\n          if (finishedWork.mode & ConcurrentMode) {\n            // The effects are currently disconnected. Since the tree is hidden,\n            // don't connect them. This also applies to the initial render.\n            if (enableCache || enableTransitionTracing) {\n              // \"Atomic\" effects are ones that need to fire on every commit,\n              // even during pre-rendering. An example is updating the reference\n              // count on cache instances.\n              recursivelyTraverseAtomicPassiveEffects(\n                finishedRoot,\n                finishedWork,\n                committedLanes,\n                committedTransitions,\n              );\n            }\n          } else {\n            // Legacy Mode: Fire the effects even if the tree is hidden.\n            instance.visibility |= OffscreenPassiveEffectsConnected;\n            recursivelyTraverseReconnectPassiveEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions,\n              includeWorkInProgressEffects,\n            );\n          }\n        }\n      } else {\n        // Tree is visible\n\n        // Since we're already inside a reconnecting tree, it doesn't matter\n        // whether the effects are currently connected. In either case, we'll\n        // continue traversing the tree and firing all the effects.\n        //\n        // We do need to set the \"connected\" flag on the instance, though.\n        instance.visibility |= OffscreenPassiveEffectsConnected;\n\n        recursivelyTraverseReconnectPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          includeWorkInProgressEffects,\n        );\n      }\n\n      if (includeWorkInProgressEffects && flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current: Fiber | null = finishedWork.alternate;\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\n      }\n      break;\n    }\n    case CacheComponent: {\n      recursivelyTraverseReconnectPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        includeWorkInProgressEffects,\n      );\n      if (includeWorkInProgressEffects && flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        commitCachePassiveMountEffect(current, finishedWork);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        recursivelyTraverseReconnectPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          includeWorkInProgressEffects,\n        );\n        if (includeWorkInProgressEffects && flags & Passive) {\n          commitTracingMarkerPassiveMountEffect(finishedWork);\n        }\n        break;\n      }\n      // Intentional fallthrough to next branch\n    }\n    // eslint-disable-next-line-no-fallthrough\n    default: {\n      recursivelyTraverseReconnectPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        includeWorkInProgressEffects,\n      );\n      break;\n    }\n  }\n}\n\nfunction recursivelyTraverseAtomicPassiveEffects(\n  finishedRoot: FiberRoot,\n  parentFiber: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  // \"Atomic\" effects are ones that need to fire on every commit, even during\n  // pre-rendering. We call this function when traversing a hidden tree whose\n  // regular effects are currently disconnected.\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  // TODO: Add special flag for atomic effects\n  if (parentFiber.subtreeFlags & PassiveMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      commitAtomicPassiveEffects(\n        finishedRoot,\n        child,\n        committedLanes,\n        committedTransitions,\n      );\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitAtomicPassiveEffects(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  // \"Atomic\" effects are ones that need to fire on every commit, even during\n  // pre-rendering. We call this function when traversing a hidden tree whose\n  // regular effects are currently disconnected.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case OffscreenComponent: {\n      recursivelyTraverseAtomicPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      if (flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        const instance: OffscreenInstance = finishedWork.stateNode;\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\n      }\n      break;\n    }\n    case CacheComponent: {\n      recursivelyTraverseAtomicPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      if (flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        commitCachePassiveMountEffect(current, finishedWork);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        recursivelyTraverseAtomicPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n        );\n        if (flags & Passive) {\n          commitTracingMarkerPassiveMountEffect(finishedWork);\n        }\n        break;\n      }\n      // Intentional fallthrough to next branch\n    }\n    // eslint-disable-next-line-no-fallthrough\n    default: {\n      recursivelyTraverseAtomicPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      break;\n    }\n  }\n}\n\nexport function commitPassiveUnmountEffects(finishedWork: Fiber): void {\n  setCurrentDebugFiberInDEV(finishedWork);\n  commitPassiveUnmountOnFiber(finishedWork);\n  resetCurrentDebugFiberInDEV();\n}\n\nfunction detachAlternateSiblings(parentFiber: Fiber) {\n  if (deletedTreeCleanUpLevel >= 1) {\n    // A fiber was deleted from this parent fiber, but it's still part of the\n    // previous (alternate) parent fiber's list of children. Because children\n    // are a linked list, an earlier sibling that's still alive will be\n    // connected to the deleted fiber via its `alternate`:\n    //\n    //   live fiber --alternate--> previous live fiber --sibling--> deleted\n    //   fiber\n    //\n    // We can't disconnect `alternate` on nodes that haven't been deleted yet,\n    // but we can disconnect the `sibling` and `child` pointers.\n\n    const previousFiber = parentFiber.alternate;\n    if (previousFiber !== null) {\n      let detachedChild = previousFiber.child;\n      if (detachedChild !== null) {\n        previousFiber.child = null;\n        do {\n          const detachedSibling = detachedChild.sibling;\n          detachedChild.sibling = null;\n          detachedChild = detachedSibling;\n        } while (detachedChild !== null);\n      }\n    }\n  }\n}\n\nfunction commitHookPassiveUnmountEffects(\n  finishedWork: Fiber,\n  nearestMountedAncestor,\n  hookFlags: HookFlags,\n) {\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    finishedWork.mode & ProfileMode\n  ) {\n    startPassiveEffectTimer();\n    commitHookEffectListUnmount(\n      hookFlags,\n      finishedWork,\n      nearestMountedAncestor,\n    );\n    recordPassiveEffectDuration(finishedWork);\n  } else {\n    commitHookEffectListUnmount(\n      hookFlags,\n      finishedWork,\n      nearestMountedAncestor,\n    );\n  }\n}\n\nfunction recursivelyTraversePassiveUnmountEffects(parentFiber: Fiber): void {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects have fired.\n  const deletions = parentFiber.deletions;\n\n  if ((parentFiber.flags & ChildDeletion) !== NoFlags) {\n    if (deletions !== null) {\n      for (let i = 0; i < deletions.length; i++) {\n        const childToDelete = deletions[i];\n        // TODO: Convert this to use recursion\n        nextEffect = childToDelete;\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n          childToDelete,\n          parentFiber,\n        );\n      }\n    }\n    detachAlternateSiblings(parentFiber);\n  }\n\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  // TODO: Split PassiveMask into separate masks for mount and unmount?\n  if (parentFiber.subtreeFlags & PassiveMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      commitPassiveUnmountOnFiber(child);\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork: Fiber): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n      if (finishedWork.flags & Passive) {\n        commitHookPassiveUnmountEffects(\n          finishedWork,\n          finishedWork.return,\n          HookPassive | HookHasEffect,\n        );\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const instance: OffscreenInstance = finishedWork.stateNode;\n      const nextState: OffscreenState | null = finishedWork.memoizedState;\n\n      const isHidden = nextState !== null;\n\n      if (\n        isHidden &&\n        instance.visibility & OffscreenPassiveEffectsConnected &&\n        // For backwards compatibility, don't unmount when a tree suspends. In\n        // the future we may change this to unmount after a delay.\n        (finishedWork.return === null ||\n          finishedWork.return.tag !== SuspenseComponent)\n      ) {\n        // The effects are currently connected. Disconnect them.\n        // TODO: Add option or heuristic to delay before disconnecting the\n        // effects. Then if the tree reappears before the delay has elapsed, we\n        // can skip toggling the effects entirely.\n        instance.visibility &= ~OffscreenPassiveEffectsConnected;\n        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      } else {\n        recursivelyTraversePassiveUnmountEffects(finishedWork);\n      }\n\n      break;\n    }\n    default: {\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n      break;\n    }\n  }\n}\n\nfunction recursivelyTraverseDisconnectPassiveEffects(parentFiber: Fiber): void {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects have fired.\n  const deletions = parentFiber.deletions;\n\n  if ((parentFiber.flags & ChildDeletion) !== NoFlags) {\n    if (deletions !== null) {\n      for (let i = 0; i < deletions.length; i++) {\n        const childToDelete = deletions[i];\n        // TODO: Convert this to use recursion\n        nextEffect = childToDelete;\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n          childToDelete,\n          parentFiber,\n        );\n      }\n    }\n    detachAlternateSiblings(parentFiber);\n  }\n\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  // TODO: Check PassiveStatic flag\n  let child = parentFiber.child;\n  while (child !== null) {\n    setCurrentDebugFiberInDEV(child);\n    disconnectPassiveEffect(child);\n    child = child.sibling;\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction disconnectPassiveEffect(finishedWork: Fiber): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      // TODO: Check PassiveStatic flag\n      commitHookPassiveUnmountEffects(\n        finishedWork,\n        finishedWork.return,\n        HookPassive,\n      );\n      // When disconnecting passive effects, we fire the effects in the same\n      // order as during a deletiong: parent before child\n      recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      break;\n    }\n    case OffscreenComponent: {\n      const instance: OffscreenInstance = finishedWork.stateNode;\n      if (instance.visibility & OffscreenPassiveEffectsConnected) {\n        instance.visibility &= ~OffscreenPassiveEffectsConnected;\n        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      } else {\n        // The effects are already disconnected.\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      break;\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n  deletedSubtreeRoot: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n    setCurrentDebugFiberInDEV(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentDebugFiberInDEV();\n\n    const child = fiber.child;\n    // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n    if (child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n        deletedSubtreeRoot,\n      );\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n  deletedSubtreeRoot: Fiber,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const sibling = fiber.sibling;\n    const returnFiber = fiber.return;\n\n    if (deletedTreeCleanUpLevel >= 2) {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    } else {\n      // This is the default branch (level 0). We do not recursively clear all\n      // the fiber fields. Only the root of the deleted subtree.\n      if (fiber === deletedSubtreeRoot) {\n        detachFiberAfterEffects(fiber);\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      sibling.return = returnFiber;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n): void {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      commitHookPassiveUnmountEffects(\n        current,\n        nearestMountedAncestor,\n        HookPassive,\n      );\n      break;\n    }\n    // TODO: run passive unmount effects when unmounting a root.\n    // Because passive unmount effects are not currently run,\n    // the cache instance owned by the root will never be freed.\n    // When effects are run, the cache should be freed here:\n    // case HostRoot: {\n    //   if (enableCache) {\n    //     const cache = current.memoizedState.cache;\n    //     releaseCache(cache);\n    //   }\n    //   break;\n    // }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      if (enableCache) {\n        if (\n          current.memoizedState !== null &&\n          current.memoizedState.cachePool !== null\n        ) {\n          const cache: Cache = current.memoizedState.cachePool.pool;\n          // Retain/release the cache used for pending (suspended) nodes.\n          // Note that this is only reached in the non-suspended/visible case:\n          // when the content is suspended/hidden, the retain/release occurs\n          // via the parent Suspense component (see case above).\n          if (cache != null) {\n            retainCache(cache);\n          }\n        }\n      }\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache = current.memoizedState.cache;\n        releaseCache(cache);\n      }\n      break;\n    }\n  }\n}\n\n// TODO: Reuse reappearLayoutEffects traversal here?\nfunction invokeLayoutEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookLayout | HookHasEffect, fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookPassive | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n      }\n    }\n  }\n}\n\nexport {\n  commitPlacement,\n  commitAttachRef,\n  commitDetachRef,\n  invokeLayoutEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokePassiveEffectUnmountInDEV,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactFiber.old';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nimport {warnsIfNotActing} from './ReactFiberHostConfig';\n\nconst {ReactCurrentActQueue} = ReactSharedInternals;\n\nexport function isLegacyActEnvironment(fiber: Fiber) {\n  if (__DEV__) {\n    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n    // act environment whenever `jest` is defined, but you can still turn off\n    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n    // to false.\n\n    const isReactActEnvironmentGlobal =\n      // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\n        ? IS_REACT_ACT_ENVIRONMENT\n        : undefined;\n\n    // $FlowExpectedError - Flow doesn't know about jest\n    const jestIsDefined = typeof jest !== 'undefined';\n    return (\n      warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false\n    );\n  }\n  return false;\n}\n\nexport function isConcurrentActEnvironment() {\n  if (__DEV__) {\n    const isReactActEnvironmentGlobal =\n      // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\n        ? IS_REACT_ACT_ENVIRONMENT\n        : undefined;\n\n    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n      // TODO: Include link to relevant documentation page.\n      console.error(\n        'The current testing environment is not configured to support ' +\n          'act(...)',\n      );\n    }\n    return isReactActEnvironmentGlobal;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Flags} from './ReactFiberFlags';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {EventPriority} from './ReactEventPriorities.old';\nimport type {\n  PendingTransitionCallbacks,\n  PendingBoundaries,\n  Transition,\n} from './ReactFiberTracingMarkerComponent.old';\nimport type {OffscreenInstance} from './ReactFiberOffscreenComponent';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerNestedUpdateScheduledHook,\n  deferRenderPhaseUpdateToNextBatch,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  disableSchedulerTimeoutInWorkLoop,\n  enableStrictEffects,\n  skipUnmountedBoundaries,\n  enableUpdaterTracking,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport is from 'shared/objectIs';\n\nimport {\n  // Aliased because `act` will override and push to an internal queue\n  scheduleCallback as Scheduler_scheduleCallback,\n  cancelCallback as Scheduler_cancelCallback,\n  shouldYield,\n  requestPaint,\n  now,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\nimport {\n  flushSyncCallbacks,\n  flushSyncCallbacksOnlyInLegacyMode,\n  scheduleSyncCallback,\n  scheduleLegacySyncCallback,\n} from './ReactFiberSyncTaskQueue.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\n\nimport {\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  afterActiveInstanceBlur,\n  getCurrentEventPriority,\n  supportsMicrotasks,\n  errorHydratingContainer,\n  scheduleMicrotask,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {didSuspendOrErrorWhileHydratingDEV} from './ReactFiberHydrationContext.old';\nimport {NoMode, ProfileMode, ConcurrentMode} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Profiler,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  Incomplete,\n  StoreConsistency,\n  HostEffectMask,\n  ForceClientRender,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  MountPassiveDev,\n  MountLayoutDev,\n} from './ReactFiberFlags';\nimport {\n  NoLanes,\n  NoLane,\n  SyncLane,\n  NoTimestamp,\n  claimNextTransitionLane,\n  claimNextRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  includesBlockingLane,\n  includesExpiredLane,\n  getNextLanes,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootEntangled,\n  markRootFinished,\n  getHighestPriorityLane,\n  addFiberToLanesMap,\n  movePendingFibersToMemoized,\n  addTransitionToLanesMap,\n  getTransitionsForLanes,\n} from './ReactFiberLane.old';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  lowerEventPriority,\n  lanesToEventPriority,\n} from './ReactEventPriorities.old';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationEffects,\n  commitLayoutEffects,\n  commitMutationEffects,\n  commitPassiveEffectDurations,\n  commitPassiveMountEffects,\n  commitPassiveUnmountEffects,\n  invokeLayoutEffectMountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectUnmountInDEV,\n  reportUncaughtErrorInDEV,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactFiberClassUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {\n  createCapturedValueAtFiber,\n  type CapturedValue,\n} from './ReactCapturedValue';\nimport {\n  enqueueConcurrentRenderForLane,\n  finishQueueingConcurrentUpdates,\n  getConcurrentlyUpdatedLanes,\n} from './ReactFiberConcurrentUpdates.old';\n\nimport {\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  resetNestedUpdateFlag,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  isDevToolsPresent,\n  markCommitStarted,\n  markCommitStopped,\n  markComponentRenderStopped,\n  markComponentSuspended,\n  markComponentErrored,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n  onCommitRoot as onCommitRootDevTools,\n  onPostCommitRoot as onPostCommitRootDevTools,\n} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\nimport {releaseCache} from './ReactFiberCacheComponent.old';\nimport {\n  isLegacyActEnvironment,\n  isConcurrentActEnvironment,\n} from './ReactFiberAct.old';\nimport {processTransitionCallbacks} from './ReactFiberTracingMarkerComponent.old';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  ReactCurrentBatchConfig,\n  ReactCurrentActQueue,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b000;\nconst BatchedContext = /*               */ 0b001;\nconst RenderContext = /*                */ 0b010;\nconst CommitContext = /*                */ 0b100;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6;\nconst RootInProgress = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\nconst RootDidNotComplete = 6;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// A contextual version of workInProgressRootRenderLanes. It is a superset of\n// the lanes that we started working on at the root. When we enter a subtree\n// that is currently hidden, we add the lanes that would have committed if\n// the hidden tree hadn't been deferred. This is modified by the\n// HiddenContext module.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with renderLanes.\nexport let renderLanes: Lanes = NoLanes;\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootInProgress;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootInterleavedUpdatedLanes: Lanes = NoLanes;\n// Lanes that were updated during the render phase (*not* an interleaved event).\nlet workInProgressRootRenderPhaseUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n// Errors that are thrown during the render phase.\nlet workInProgressRootConcurrentErrors: Array<\n  CapturedValue<mixed>,\n> | null = null;\n// These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\nlet workInProgressRootRecoverableErrors: Array<\n  CapturedValue<mixed>,\n> | null = null;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nlet workInProgressTransitions: Array<Transition> | null = null;\nexport function getWorkInProgressTransitions() {\n  return workInProgressTransitions;\n}\n\nlet currentPendingTransitionCallbacks: PendingTransitionCallbacks | null = null;\n\nexport function addTransitionStartCallbackToPendingTransition(\n  transition: Transition,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: [],\n        transitionProgress: null,\n        transitionComplete: null,\n        markerProgress: null,\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionStart === null) {\n      currentPendingTransitionCallbacks.transitionStart = [];\n    }\n\n    currentPendingTransitionCallbacks.transitionStart.push(transition);\n  }\n}\n\nexport function addMarkerProgressCallbackToPendingTransition(\n  markerName: string,\n  transitions: Set<Transition>,\n  pendingBoundaries: PendingBoundaries | null,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: null,\n        transitionComplete: null,\n        markerProgress: new Map(),\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.markerProgress === null) {\n      currentPendingTransitionCallbacks.markerProgress = new Map();\n    }\n\n    currentPendingTransitionCallbacks.markerProgress.set(markerName, {\n      pendingBoundaries,\n      transitions,\n    });\n  }\n}\n\nexport function addMarkerCompleteCallbackToPendingTransition(\n  markerName: string,\n  transitions: Set<Transition>,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: null,\n        transitionComplete: null,\n        markerProgress: null,\n        markerComplete: new Map(),\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.markerComplete === null) {\n      currentPendingTransitionCallbacks.markerComplete = new Map();\n    }\n\n    currentPendingTransitionCallbacks.markerComplete.set(\n      markerName,\n      transitions,\n    );\n  }\n}\n\nexport function addTransitionProgressCallbackToPendingTransition(\n  transition: Transition,\n  boundaries: PendingBoundaries,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: new Map(),\n        transitionComplete: null,\n        markerProgress: null,\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionProgress === null) {\n      currentPendingTransitionCallbacks.transitionProgress = new Map();\n    }\n\n    currentPendingTransitionCallbacks.transitionProgress.set(\n      transition,\n      boundaries,\n    );\n  }\n}\n\nexport function addTransitionCompleteCallbackToPendingTransition(\n  transition: Transition,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: null,\n        transitionComplete: [],\n        markerProgress: null,\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionComplete === null) {\n      currentPendingTransitionCallbacks.transitionComplete = [];\n    }\n\n    currentPendingTransitionCallbacks.transitionComplete.push(transition);\n  }\n}\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\n// Only used when enableProfilerNestedUpdateScheduledHook is true;\n// to track which root is currently committing layout effects.\nlet rootCommittingMutationOrLayoutEffects: FiberRoot | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\nlet pendingPassiveEffectsRemainingLanes: Lanes = NoLanes;\nlet pendingPassiveTransitions: Array<Transition> | null = null;\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\nlet isFlushingPassiveEffects = false;\nlet didScheduleUpdateDuringPassiveEffects = false;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\nlet rootWithPassiveNestedUpdates: FiberRoot | null = null;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventTransitionLane: Lanes = NoLanes;\n\nlet isRunningInsertionEffect = false;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function getWorkInProgressRootRenderLanes(): Lanes {\n  return workInProgressRootRenderLanes;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (__DEV__ && ReactCurrentBatchConfig.transition !== null) {\n      const transition = ReactCurrentBatchConfig.transition;\n      if (!transition._updatedFibers) {\n        transition._updatedFibers = new Set();\n      }\n\n      transition._updatedFibers.add(fiber);\n    }\n    // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n    return currentEventTransitionLane;\n  }\n\n  // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const updateLane: Lane = (getCurrentUpdatePriority(): any);\n  if (updateLane !== NoLane) {\n    return updateLane;\n  }\n\n  // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const eventLane: Lane = (getCurrentEventPriority(): any);\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  }\n\n  return claimNextRetryLane();\n}\n\nexport function scheduleUpdateOnFiber(\n  root: FiberRoot,\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n) {\n  if (__DEV__) {\n    if (isRunningInsertionEffect) {\n      console.error('useInsertionEffect must not schedule updates.');\n    }\n  }\n\n  if (__DEV__) {\n    if (isFlushingPassiveEffects) {\n      didScheduleUpdateDuringPassiveEffects = true;\n    }\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (\n    (executionContext & RenderContext) !== NoLanes &&\n    root === workInProgressRoot\n  ) {\n    // This update was dispatched during the render phase. This is a mistake\n    // if the update originates from user space (with the exception of local\n    // hook updates, which are handled differently and don't reach this\n    // function), but there are some internal React features that use this as\n    // an implementation detail, like selective hydration.\n    warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n    // Track lanes that were updated during the render phase\n    workInProgressRootRenderPhaseUpdatedLanes = mergeLanes(\n      workInProgressRootRenderPhaseUpdatedLanes,\n      lane,\n    );\n  } else {\n    // This is a normal update, scheduled from outside the render phase. For\n    // example, during an input event.\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        addFiberToLanesMap(root, fiber, lane);\n      }\n    }\n\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      if (\n        (executionContext & CommitContext) !== NoContext &&\n        root === rootCommittingMutationOrLayoutEffects\n      ) {\n        if (fiber.mode & ProfileMode) {\n          let current = fiber;\n          while (current !== null) {\n            if (current.tag === Profiler) {\n              const {id, onNestedUpdateScheduled} = current.memoizedProps;\n              if (typeof onNestedUpdateScheduled === 'function') {\n                onNestedUpdateScheduled(id);\n              }\n            }\n            current = current.return;\n          }\n        }\n      }\n    }\n\n    if (enableTransitionTracing) {\n      const transition = ReactCurrentBatchConfig.transition;\n      if (transition !== null && transition.name != null) {\n        if (transition.startTime === -1) {\n          transition.startTime = now();\n        }\n\n        addTransitionToLanesMap(root, transition, lane);\n      }\n    }\n\n    if (root === workInProgressRoot) {\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root. Unless the\n      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n      // phase update. In that case, we don't treat render phase updates as if\n      // they were interleaved, for backwards compat reasons.\n      if (\n        deferRenderPhaseUpdateToNextBatch ||\n        (executionContext & RenderContext) === NoContext\n      ) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(\n          workInProgressRootInterleavedUpdatedLanes,\n          lane,\n        );\n      }\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        markRootSuspended(root, workInProgressRootRenderLanes);\n      }\n    }\n\n    ensureRootIsScheduled(root, eventTime);\n    if (\n      lane === SyncLane &&\n      executionContext === NoContext &&\n      (fiber.mode & ConcurrentMode) === NoMode &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      // Flush the synchronous work now, unless we're already working or inside\n      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n      // without immediately flushing it. We only do this for user-initiated\n      // updates, to preserve historical behavior of legacy mode.\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function scheduleInitialHydrationOnRoot(\n  root: FiberRoot,\n  lane: Lane,\n  eventTime: number,\n) {\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\n  // schedule the initial hydration of a root that has just been created. Most\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\n  //\n  // The main reason for this separate path, though, is to distinguish the\n  // initial children from subsequent updates. In fully client-rendered roots\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n  // updates, but hydration roots are special because the initial render must\n  // match what was rendered on the server.\n  const current = root.current;\n  current.lanes = lane;\n  markRootUpdated(root, lane, eventTime);\n  ensureRootIsScheduled(root, eventTime);\n}\n\nexport function isUnsafeClassRenderPhaseUpdate(fiber: Fiber) {\n  // Check if this is a render phase update. Only called by class components,\n  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n  return (\n    // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n    // decided not to enable it.\n    (!deferRenderPhaseUpdateToNextBatch ||\n      (fiber.mode & ConcurrentMode) === NoMode) &&\n    (executionContext & RenderContext) !== NoContext\n  );\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  }\n\n  // We use the highest priority lane to represent the priority of the callback.\n  const newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n  // Check if there's an existing task. We may be able to reuse it.\n  const existingCallbackPriority = root.callbackPriority;\n  if (\n    existingCallbackPriority === newCallbackPriority &&\n    // Special case related to `act`. If the currently scheduled task is a\n    // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n    // on the `act` queue.\n    !(\n      __DEV__ &&\n      ReactCurrentActQueue.current !== null &&\n      existingCallbackNode !== fakeActCallbackNode\n    )\n  ) {\n    if (__DEV__) {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (\n        existingCallbackNode == null &&\n        existingCallbackPriority !== SyncLane\n      ) {\n        console.error(\n          'Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n    // The priority hasn't changed. We can reuse the existing task. Exit.\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if (__DEV__ && ReactCurrentActQueue.isBatchingLegacy !== null) {\n        ReactCurrentActQueue.didScheduleLegacyUpdate = true;\n      }\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n    if (supportsMicrotasks) {\n      // Flush the queue in a microtask.\n      if (__DEV__ && ReactCurrentActQueue.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(() => {\n          // In Safari, appending an iframe forces microtasks to run.\n          // https://github.com/facebook/react/issues/22459\n          // We don't support running callbacks in the middle of render\n          // or commit so we need to check against that.\n          if (\n            (executionContext & (RenderContext | CommitContext)) ===\n            NoContext\n          ) {\n            // Note that this would still prematurely flush the callbacks\n            // if this happens outside render or commit phase (e.g. in an event).\n            flushSyncCallbacks();\n          }\n        });\n      }\n    } else {\n      // Flush the queue in an Immediate task.\n      scheduleCallback(ImmediateSchedulerPriority, flushSyncCallbacks);\n    }\n    newCallbackNode = null;\n  } else {\n    let schedulerPriorityLevel;\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediateSchedulerPriority;\n        break;\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingSchedulerPriority;\n        break;\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdleSchedulerPriority;\n        break;\n      default:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n    }\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    resetNestedUpdateFlag();\n  }\n\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next lanes to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n  const shouldTimeSlice =\n    !includesBlockingLane(root, lanes) &&\n    !includesExpiredLane(root, lanes) &&\n    (disableSchedulerTimeoutInWorkLoop || !didTimeout);\n  let exitStatus = shouldTimeSlice\n    ? renderRootConcurrent(root, lanes)\n    : renderRootSync(root, lanes);\n  if (exitStatus !== RootInProgress) {\n    if (exitStatus === RootErrored) {\n      // If something threw an error, try rendering one more time. We'll\n      // render synchronously to block concurrent data mutations, and we'll\n      // includes all pending updates are included. If it still fails after\n      // the second attempt, we'll give up and commit the resulting tree.\n      const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n      }\n    }\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    if (exitStatus === RootDidNotComplete) {\n      // The render unwound without completing the tree. This happens in special\n      // cases where need to exit the current render without producing a\n      // consistent tree or committing.\n      //\n      // This should only happen during a concurrent render, not a discrete or\n      // synchronous update. We should have already checked for this when we\n      // unwound the stack.\n      markRootSuspended(root, lanes);\n    } else {\n      // The render completed.\n\n      // Check if this render may have yielded to a concurrent event, and if so,\n      // confirm that any newly rendered stores are consistent.\n      // TODO: It's possible that even a concurrent render may never have yielded\n      // to the main thread, if it was fast enough, or if it expired. We could\n      // skip the consistency check in that case, too.\n      const renderWasConcurrent = !includesBlockingLane(root, lanes);\n      const finishedWork: Fiber = (root.current.alternate: any);\n      if (\n        renderWasConcurrent &&\n        !isRenderConsistentWithExternalStores(finishedWork)\n      ) {\n        // A store was mutated in an interleaved event. Render again,\n        // synchronously, to block further mutations.\n        exitStatus = renderRootSync(root, lanes);\n\n        // We need to check again if something threw\n        if (exitStatus === RootErrored) {\n          const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n          if (errorRetryLanes !== NoLanes) {\n            lanes = errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n            // We assume the tree is now consistent because we didn't yield to any\n            // concurrent events.\n          }\n        }\n        if (exitStatus === RootFatalErrored) {\n          const fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw fatalError;\n        }\n      }\n\n      // We now have a consistent tree. The next step is either to commit it,\n      // or, if something suspended, wait to commit it after a timeout.\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      finishConcurrentRender(root, exitStatus, lanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction recoverFromConcurrentError(root, errorRetryLanes) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n\n  // Before rendering again, save the errors from the previous attempt.\n  const errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n  if (isRootDehydrated(root)) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    const rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n    if (__DEV__) {\n      errorHydratingContainer(root.containerInfo);\n    }\n  }\n\n  const exitStatus = renderRootSync(root, errorRetryLanes);\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n\n    // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n    const errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt;\n    // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  } else {\n    // The UI failed to recover.\n  }\n  return exitStatus;\n}\n\nexport function queueRecoverableErrors(errors: Array<CapturedValue<mixed>>) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    workInProgressRootRecoverableErrors.push.apply(\n      workInProgressRootRecoverableErrors,\n      errors,\n    );\n  }\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored: {\n      throw new Error('Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(\n              null,\n              root,\n              workInProgressRootRecoverableErrors,\n              workInProgressTransitions,\n            ),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(\n              null,\n              root,\n              workInProgressRootRecoverableErrors,\n              workInProgressTransitions,\n            ),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unknown root exit status.');\n    }\n  }\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork: Fiber): boolean {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  let node: Fiber = finishedWork;\n  while (true) {\n    if (node.flags & StoreConsistency) {\n      const updateQueue: FunctionComponentUpdateQueue | null = (node.updateQueue: any);\n      if (updateQueue !== null) {\n        const checks = updateQueue.stores;\n        if (checks !== null) {\n          for (let i = 0; i < checks.length; i++) {\n            const check = checks[i];\n            const getSnapshot = check.getSnapshot;\n            const renderedValue = check.value;\n            try {\n              if (!is(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n    const child = node.child;\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n    if (node === finishedWork) {\n      return true;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n  return true;\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(\n    suspendedLanes,\n    workInProgressRootInterleavedUpdatedLanes,\n  );\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    syncNestedUpdateFlag();\n  }\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  flushPassiveEffects();\n\n  let lanes = getNextLanes(root, NoLanes);\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  let exitStatus = renderRootSync(root, lanes);\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  if (exitStatus === RootDidNotComplete) {\n    throw new Error('Root did not complete. This is a bug in React.');\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(\n    root,\n    workInProgressRootRecoverableErrors,\n    workInProgressTransitions,\n  );\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now());\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DefaultEventPriority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n    if (\n      executionContext === NoContext &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C, D) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\ndeclare function flushSync<R>(fn: () => R): R;\n// eslint-disable-next-line no-redeclare\ndeclare function flushSync(): void;\n// eslint-disable-next-line no-redeclare\nexport function flushSync(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (\n    rootWithPendingPassiveEffects !== null &&\n    rootWithPendingPassiveEffects.tag === LegacyRoot &&\n    (executionContext & (RenderContext | CommitContext)) === NoContext\n  ) {\n    flushPassiveEffects();\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function isAlreadyRendering() {\n  // Used by the renderer to print a warning if certain APIs are called from\n  // the wrong context.\n  return (\n    __DEV__ &&\n    (executionContext & (RenderContext | CommitContext)) !== NoContext\n  );\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\n// This is called by the HiddenContext module when we enter or leave a\n// hidden subtree. The stack logic is managed there because that's the only\n// place that ever modifies it. Which module it lives in doesn't matter for\n// performance because this function will get inlined regardless\nexport function setRenderLanes(subtreeRenderLanes: Lanes) {\n  renderLanes = subtreeRenderLanes;\n}\n\nexport function getRenderLanes(): Lanes {\n  return renderLanes;\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes): Fiber {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      const current = interruptedWork.alternate;\n      unwindInterruptedWork(\n        current,\n        interruptedWork,\n        workInProgressRootRenderLanes,\n      );\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  const rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = renderLanes = lanes;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootRenderPhaseUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n\n  finishQueueingConcurrentUpdates();\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n\n  return rootWorkInProgress;\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      if (enableSchedulingProfiler) {\n        markComponentRenderStopped();\n\n        if (\n          thrownValue !== null &&\n          typeof thrownValue === 'object' &&\n          typeof thrownValue.then === 'function'\n        ) {\n          const wakeable: Wakeable = (thrownValue: any);\n          markComponentSuspended(\n            erroredWork,\n            wakeable,\n            workInProgressRootRenderLanes,\n          );\n        } else {\n          markComponentErrored(\n            erroredWork,\n            thrownValue,\n            workInProgressRootRenderLanes,\n          );\n        }\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootInProgress ||\n    workInProgressRootExitStatus === RootSuspended ||\n    workInProgressRootExitStatus === RootErrored\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError(error: CapturedValue<mixed>) {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    throw new Error(\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootInProgress;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, renderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, renderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, renderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, renderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(current, completedWork, renderLanes);\n\n      // Because this fiber did not complete, don't reset its lanes.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      } else {\n        // We've unwound all the way to the root.\n        workInProgressRootExitStatus = RootDidNotComplete;\n        workInProgress = null;\n        return;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(\n  root: FiberRoot,\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\n  transitions: Array<Transition> | null,\n) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  const previousUpdateLanePriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(\n      root,\n      recoverableErrors,\n      transitions,\n      previousUpdateLanePriority,\n    );\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(\n  root: FiberRoot,\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\n  transitions: Array<Transition> | null,\n  renderPriorityLevel: EventPriority,\n) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    if (__DEV__) {\n      if (lanes === NoLanes) {\n        console.error(\n          'root.finishedLanes should not be empty during a commit. This is a ' +\n            'bug in React.',\n        );\n      }\n    }\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (finishedWork === root.current) {\n    throw new Error(\n      'Cannot commit the same tree as before. This error is likely caused by ' +\n        'a bug in React. Please file an issue.',\n    );\n  }\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n  root.callbackPriority = NoLane;\n\n  // Check which lanes no longer have any work scheduled on them, and mark\n  // those as finished.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n\n  // Make sure to account for lanes that were updated by a concurrent event\n  // during the render phase; don't mark them as finished.\n  const concurrentlyUpdatedLanes = getConcurrentlyUpdatedLanes();\n  remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes);\n\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n  if (\n    (finishedWork.subtreeFlags & PassiveMask) !== NoFlags ||\n    (finishedWork.flags & PassiveMask) !== NoFlags\n  ) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      pendingPassiveEffectsRemainingLanes = remainingLanes;\n      // workInProgressTransitions might be overwritten, so we want\n      // to store it in pendingPassiveTransitions until they get processed\n      // We need to pass this through as an argument to commitRoot\n      // because workInProgressTransitions might have changed between\n      // the previous render and commit if we throttle the commit\n      // with setTimeout\n      pendingPassiveTransitions = transitions;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n        return null;\n      });\n    }\n  }\n\n  // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n  const subtreeHasEffects =\n    (finishedWork.subtreeFlags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n  const rootHasEffect =\n    (finishedWork.flags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = null;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    const shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(\n      root,\n      finishedWork,\n    );\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      // Track the root here, rather than in commitLayoutEffects(), because of ref setters.\n      // Updates scheduled during ref detachment should also be flagged.\n      rootCommittingMutationOrLayoutEffects = root;\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    commitMutationEffects(root, finishedWork, lanes);\n\n    if (enableCreateEventHandleAPI) {\n      if (shouldFireAfterActiveInstanceBlur) {\n        afterActiveInstanceBlur();\n      }\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStarted(lanes);\n      }\n    }\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStarted(lanes);\n    }\n    commitLayoutEffects(finishedWork, root, lanes);\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStopped();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      rootCommittingMutationOrLayoutEffects = null;\n    }\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    executionContext = prevExecutionContext;\n\n    // Reset the priority to the previous non-sync value.\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  } else {\n    // There were no passive effects, so we can immediately release the cache\n    // pool for this render.\n    releaseRootPooledCache(root, remainingLanes);\n    if (__DEV__) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n    }\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (recoverableErrors !== null) {\n    // There were errors during this render, but recovered from them without\n    // needing to surface it to the UI. We log them here.\n    const onRecoverableError = root.onRecoverableError;\n    for (let i = 0; i < recoverableErrors.length; i++) {\n      const recoverableError = recoverableErrors[i];\n      const componentStack = recoverableError.stack;\n      const digest = recoverableError.digest;\n      onRecoverableError(recoverableError.value, {componentStack, digest});\n    }\n  }\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n  if (\n    includesSomeLane(pendingPassiveEffectsLanes, SyncLane) &&\n    root.tag !== LegacyRoot\n  ) {\n    flushPassiveEffects();\n  }\n\n  // Read this again, since a passive effect might have updated it\n  remainingLanes = root.pendingLanes;\n  if (includesSomeLane(remainingLanes, (SyncLane: Lane))) {\n    if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n      markNestedUpdateScheduled();\n    }\n\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbacks();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction releaseRootPooledCache(root: FiberRoot, remainingLanes: Lanes) {\n  if (enableCache) {\n    const pooledCacheLanes = (root.pooledCacheLanes &= remainingLanes);\n    if (pooledCacheLanes === NoLanes) {\n      // None of the remaining work relies on the cache pool. Clear it so\n      // subsequent requests get a new cache\n      const pooledCache = root.pooledCache;\n      if (pooledCache != null) {\n        root.pooledCache = null;\n        releaseCache(pooledCache);\n      }\n    }\n  }\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    // Cache the root since rootWithPendingPassiveEffects is cleared in\n    // flushPassiveEffectsImpl\n    const root = rootWithPendingPassiveEffects;\n    // Cache and clear the remaining lanes flag; it must be reset since this\n    // method can be called from various places, not always from commitRoot\n    // where the remaining lanes are known\n    const remainingLanes = pendingPassiveEffectsRemainingLanes;\n    pendingPassiveEffectsRemainingLanes = NoLanes;\n\n    const renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    const priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    const previousPriority = getCurrentUpdatePriority();\n\n    try {\n      ReactCurrentBatchConfig.transition = null;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig.transition = prevTransition;\n\n      // Once passive effects have run for the tree - giving components a\n      // chance to retain cache instances they use - release the pooled\n      // cache at the root (if there is one)\n      releaseRootPooledCache(root, remainingLanes);\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  // Cache and clear the transitions flag\n  const transitions = pendingPassiveTransitions;\n  pendingPassiveTransitions = null;\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Cannot flush passive effects while already rendering.');\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = true;\n    didScheduleUpdateDuringPassiveEffects = false;\n\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current, lanes, transitions);\n\n  // TODO: Move to commitPassiveMountEffects\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbacks();\n\n  if (enableTransitionTracing) {\n    const prevPendingTransitionCallbacks = currentPendingTransitionCallbacks;\n    const prevRootTransitionCallbacks = root.transitionCallbacks;\n    if (\n      prevPendingTransitionCallbacks !== null &&\n      prevRootTransitionCallbacks !== null\n    ) {\n      // TODO(luna) Refactor this code into the Host Config\n      // TODO(luna) The end time here is not necessarily accurate\n      // because passive effects could be called before paint\n      // (synchronously) or after paint (normally). We need\n      // to come up with a way to get the correct end time for both cases.\n      // One solution is in the host config, if the passive effects\n      // have not yet been run, make a call to flush the passive effects\n      // right after paint.\n      const endTime = now();\n      currentPendingTransitionCallbacks = null;\n\n      scheduleCallback(IdleSchedulerPriority, () =>\n        processTransitionCallbacks(\n          prevPendingTransitionCallbacks,\n          endTime,\n          prevRootTransitionCallbacks,\n        ),\n      );\n    }\n  }\n\n  if (__DEV__) {\n    // If additional passive effects were scheduled, increment a counter. If this\n    // exceeds the limit, we'll fire a warning.\n    if (didScheduleUpdateDuringPassiveEffects) {\n      if (root === rootWithPassiveNestedUpdates) {\n        nestedPassiveUpdateCount++;\n      } else {\n        nestedPassiveUpdateCount = 0;\n        rootWithPassiveNestedUpdates = root;\n      }\n    } else {\n      nestedPassiveUpdateCount = 0;\n    }\n    isFlushingPassiveEffects = false;\n    didScheduleUpdateDuringPassiveEffects = false;\n  }\n\n  // TODO: Move to commitPassiveMountEffects\n  onPostCommitRootDevTools(root);\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  const root = enqueueUpdate(rootFiber, update, (SyncLane: Lane));\n  const eventTime = requestEventTime();\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function captureCommitPhaseError(\n  sourceFiber: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  error: mixed,\n) {\n  if (__DEV__) {\n    reportUncaughtErrorInDEV(error);\n    setIsRunningInsertionEffect(false);\n  }\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = null;\n  if (skipUnmountedBoundaries) {\n    fiber = nearestMountedAncestor;\n  } else {\n    fiber = sourceFiber.return;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        const root = enqueueUpdate(fiber, update, (SyncLane: Lane));\n        const eventTime = requestEventTime();\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n\n  if (__DEV__) {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    console.error(\n      'Internal React error: Attempted to capture a commit phase error ' +\n        'inside a detached tree. This indicates a bug in React. Likely ' +\n        'causes include deleting the same fiber more than once, committing an ' +\n        'already-finished tree, or an inconsistent return pointer.\\n\\n' +\n        'Error message:\\n\\n%s',\n      error,\n    );\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  switch (boundaryFiber.tag) {\n    case SuspenseComponent:\n      retryCache = boundaryFiber.stateNode;\n      const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n      break;\n    case SuspenseListComponent:\n      retryCache = boundaryFiber.stateNode;\n      break;\n    case OffscreenComponent: {\n      const instance: OffscreenInstance = boundaryFiber.stateNode;\n      retryCache = instance.retryCache;\n      break;\n    }\n    default:\n      throw new Error(\n        'Pinged unknown suspense boundary type. ' +\n          'This is probably a bug in React.',\n      );\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nexport function throwIfInfiniteUpdateLoopDetected() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    nestedPassiveUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    rootWithPassiveNestedUpdates = null;\n\n    throw new Error(\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(\n  fiber: Fiber,\n  hasPassiveEffects: boolean,\n) {\n  if (__DEV__ && enableStrictEffects) {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n\n    setCurrentDebugFiberInDEV(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(\n        fiber,\n        MountPassiveDev,\n        invokePassiveEffectUnmountInDEV,\n      );\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction invokeEffectsInDev(\n  firstChild: Fiber,\n  fiberFlags: Flags,\n  invokeEffectFn: (fiber: Fiber) => void,\n): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n\n    let current = firstChild;\n    let subtreeRoot = null;\n    while (current !== null) {\n      const primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n      if (\n        current !== subtreeRoot &&\n        current.child !== null &&\n        primarySubtreeFlag !== NoFlags\n      ) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nexport function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber: Fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        didSuspendOrErrorWhileHydratingDEV() ||\n        (originalError !== null &&\n          typeof originalError === 'object' &&\n          typeof originalError.then === 'function')\n      ) {\n        // Don't replay promises.\n        // Don't replay errors if we are hydrating and have already suspended or handled an error\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(current, unitOfWork, workInProgressRootRenderLanes);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        if (\n          typeof replayError === 'object' &&\n          replayError !== null &&\n          replayError._suppressLogging &&\n          typeof originalError === 'object' &&\n          originalError !== null &&\n          !originalError._suppressLogging\n        ) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      }\n      // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n      throw originalError;\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentNameFromFiber(fiber) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport function restorePendingUpdaters(root: FiberRoot, lanes: Lanes): void {\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      const memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(schedulingFiber => {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      });\n\n      // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\n\nconst fakeActCallbackNode = {};\nfunction scheduleCallback(priorityLevel, callback) {\n  if (__DEV__) {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    const actQueue = ReactCurrentActQueue.current;\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return Scheduler_scheduleCallback(priorityLevel, callback);\n    }\n  } else {\n    // In production, always call Scheduler. This function will be stripped out.\n    return Scheduler_scheduleCallback(priorityLevel, callback);\n  }\n}\n\nfunction cancelCallback(callbackNode) {\n  if (__DEV__ && callbackNode === fakeActCallbackNode) {\n    return;\n  }\n  // In production, always call Scheduler. This function will be stripped out.\n  return Scheduler_cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && ReactCurrentActQueue.current !== null;\n}\n\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (fiber.mode & ConcurrentMode) {\n      if (!isConcurrentActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n    } else {\n      // Legacy mode has additional cases where we suppress a warning.\n      if (!isLegacyActEnvironment(fiber)) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n      if (executionContext !== NoContext) {\n        // Legacy mode doesn't warn if the update is batched, i.e.\n        // batchedUpdates or flushSync.\n        return;\n      }\n      if (\n        fiber.tag !== FunctionComponent &&\n        fiber.tag !== ForwardRef &&\n        fiber.tag !== SimpleMemoComponent\n      ) {\n        // For backwards compatibility with pre-hooks code, legacy mode only\n        // warns for updates that originate from a hook.\n        return;\n      }\n    }\n\n    if (ReactCurrentActQueue.current === null) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentNameFromFiber(fiber),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root: FiberRoot): void {\n  if (__DEV__) {\n    if (\n      root.tag !== LegacyRoot &&\n      isConcurrentActEnvironment() &&\n      ReactCurrentActQueue.current === null\n    ) {\n      console.error(\n        'A suspended resource finished loading inside a test, but the event ' +\n          'was not wrapped in act(...).\\n\\n' +\n          'When testing, code that resolves suspended data should be wrapped ' +\n          'into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* finish loading suspended data */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n      );\n    }\n  }\n}\n\nexport function setIsRunningInsertionEffect(isRunning: boolean): void {\n  if (__DEV__) {\n    isRunningInsertionEffect = isRunning;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactFragment, ReactPortal, ReactScope} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {\n  OffscreenProps,\n  OffscreenInstance,\n} from './ReactFiberOffscreenComponent';\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\n\nimport {\n  createRootStrictEffectsByDefault,\n  enableCache,\n  enableStrictEffects,\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableLegacyHidden,\n  enableSyncDefaultUpdates,\n  allowConcurrentByDefault,\n  enableTransitionTracing,\n  enableDebugTracing,\n} from 'shared/ReactFeatureFlags';\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {OffscreenVisible} from './ReactFiberOffscreenComponent';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  ConcurrentUpdatesByDefaultMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effects are no longer valid.\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement;\n\n  // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(\n  tag: RootTag,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      if (enableStrictEffects) {\n        mode |= StrictEffectsMode;\n      }\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n    if (\n      // We only use this flag for our repo tests to check both behaviors.\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n      !enableSyncDefaultUpdates ||\n      // Only for internal experiments.\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\n    ) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        if (enableLegacyHidden) {\n          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_TRACING_MARKER_TYPE:\n        if (enableTransitionTracing) {\n          return createFiberFromTracingMarker(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        if (enableDebugTracing) {\n          fiberTag = Mode;\n          mode |= DebugTracingMode;\n          break;\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n\n        throw new Error(\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            `but got: ${type == null ? type : typeof type}.${info}`,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error(\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n        typeof pendingProps.id,\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  const primaryChildInstance: OffscreenInstance = {\n    visibility: OffscreenVisible,\n    pendingMarkers: null,\n    retryCache: null,\n    transitions: null,\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  // Adding a stateNode for legacy hidden because it's currently using\n  // the offscreen implementation, which depends on a state node\n  const instance: OffscreenInstance = {\n    visibility: OffscreenVisible,\n    pendingMarkers: null,\n    transitions: null,\n    retryCache: null,\n  };\n  fiber.stateNode = instance;\n  return fiber;\n}\n\nexport function createFiberFromCache(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromTracingMarker(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(TracingMarkerComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_TRACING_MARKER_TYPE;\n  fiber.lanes = lanes;\n  const tracingMarkerInstance: TracingMarkerInstance = {\n    transitions: null,\n    pendingBoundaries: null,\n  };\n  fiber.stateNode = tracingMarkerInstance;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {\n  FiberRoot,\n  SuspenseHydrationCallbacks,\n  TransitionTracingCallbacks,\n} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {Cache} from './ReactFiberCacheComponent.old';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLane,\n  NoLanes,\n  NoTimestamp,\n  TotalLanes,\n  createLaneMap,\n} from './ReactFiberLane.old';\nimport {\n  enableSuspenseCallback,\n  enableCache,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableUpdaterTracking,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {initializeUpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport {LegacyRoot, ConcurrentRoot} from './ReactRootTags';\nimport {createCache, retainCache} from './ReactFiberCacheComponent.old';\n\nexport type RootState = {\n  element: any,\n  isDehydrated: boolean,\n  cache: Cache,\n};\n\nfunction FiberRootNode(\n  containerInfo,\n  tag,\n  hydrate,\n  identifierPrefix,\n  onRecoverableError,\n) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  this.hiddenUpdates = createLaneMap(null);\n\n  this.identifierPrefix = identifierPrefix;\n  this.onRecoverableError = onRecoverableError;\n\n  if (enableCache) {\n    this.pooledCache = null;\n    this.pooledCacheLanes = NoLanes;\n  }\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  this.incompleteTransitions = new Map();\n  if (enableTransitionTracing) {\n    this.transitionCallbacks = null;\n    const transitionLanesMap = (this.transitionLanes = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      transitionLanesMap.push(null);\n    }\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  if (enableUpdaterTracking) {\n    this.memoizedUpdaters = new Set();\n    const pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  initialChildren: ReactNodeList,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  // TODO: We have several of these arguments that are conceptually part of the\n  // host config, but because they are passed in at runtime, we have to thread\n  // them through the root constructor. Perhaps we should put them all into a\n  // single type, like a DynamicHostConfig that is defined by the renderer.\n  identifierPrefix: string,\n  onRecoverableError: null | ((error: mixed) => void),\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(\n    containerInfo,\n    tag,\n    hydrate,\n    identifierPrefix,\n    onRecoverableError,\n  ): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  if (enableTransitionTracing) {\n    root.transitionCallbacks = transitionCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(\n    tag,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  if (enableCache) {\n    const initialCache = createCache();\n    retainCache(initialCache);\n\n    // The pooledCache is a fresh cache instance that is used temporarily\n    // for newly mounted boundaries during a render. In general, the\n    // pooledCache is always cleared from the root at the end of a render:\n    // it is either released when render commits, or moved to an Offscreen\n    // component if rendering suspends. Because the lifetime of the pooled\n    // cache is distinct from the main memoizedState.cache, it must be\n    // retained separately.\n    root.pooledCache = initialCache;\n    retainCache(initialCache);\n    const initialState: RootState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: initialCache,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  } else {\n    const initialState: RootState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: (null: any), // not enabled yet\n    };\n    uninitializedFiber.memoizedState = initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\n//\n// TODO: 18.0.0 has not been released to NPM;\n// It exists as a placeholder so that DevTools can support work tag changes between releases.\n// When we next publish a release, update the matching TODO in backend/renderer.js\n// TODO: This module is used both by the release scripts and to expose a version\n// at runtime. We should instead inject the version number as part of the build\n// process, and use the ReactVersions.js module as the single source of truth.\nexport default '18.2.0';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {REACT_PORTAL_TYPE} from 'shared/ReactSymbols';\nimport {checkKeyStringCoercion} from 'shared/CheckStringCoercion';\n\nimport type {ReactNodeList, ReactPortal} from 'shared/ReactTypes';\n\nexport function createPortal(\n  children: ReactNodeList,\n  containerInfo: any,\n  // TODO: figure out the API for cross-renderer implementation.\n  implementation: any,\n  key: ?string = null,\n): ReactPortal {\n  if (__DEV__) {\n    checkKeyStringCoercion(key);\n  }\n  return {\n    // This tag allow us to uniquely identify this as a React Portal\n    $$typeof: REACT_PORTAL_TYPE,\n    key: key == null ? null : '' + key,\n    children,\n    containerInfo,\n    implementation,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Fiber,\n  SuspenseHydrationCallbacks,\n  TransitionTracingCallbacks,\n} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport isArray from 'shared/isArray';\nimport {enableSchedulingProfiler} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {\n  injectInternals,\n  markRenderScheduled,\n  onScheduleRoot,\n} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  scheduleInitialHydrationOnRoot,\n  flushRoot,\n  batchedUpdates,\n  flushSync,\n  isAlreadyRendering,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n} from './ReactFiberLane.old';\nimport {\n  getCurrentUpdatePriority,\n  runWithPriority,\n} from './ReactEventPriorities.old';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport ReactVersion from 'shared/ReactVersion';\nexport {registerMutableSourceForHydration} from './ReactMutableSource.old';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPseudoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      throw new Error('Unable to find node on an unmounted component.');\n    } else {\n      const keys = Object.keys(component).join(',');\n      throw new Error(\n        `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        throw new Error('Unable to find node on an unmounted component.');\n      } else {\n        const keys = Object.keys(component).join(',');\n        throw new Error(\n          `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictLegacyMode) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictLegacyMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  identifierPrefix: string,\n  onRecoverableError: (error: mixed) => void,\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): OpaqueRoot {\n  const hydrate = false;\n  const initialChildren = null;\n  return createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onRecoverableError,\n    transitionCallbacks,\n  );\n}\n\nexport function createHydrationContainer(\n  initialChildren: ReactNodeList,\n  // TODO: Remove `callback` when we delete legacy mode.\n  callback: ?Function,\n  containerInfo: Container,\n  tag: RootTag,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  identifierPrefix: string,\n  onRecoverableError: (error: mixed) => void,\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): OpaqueRoot {\n  const hydrate = true;\n  const root = createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onRecoverableError,\n    transitionCallbacks,\n  );\n\n  // TODO: Move this to FiberRoot constructor\n  root.context = getContextForSubtree(null);\n\n  // Schedule the initial render. In a hydration root, this is different from\n  // a regular update because the initial render must match was was rendered\n  // on the server.\n  // NOTE: This update intentionally doesn't have a payload. We're only using\n  // the update to schedule work on the root fiber (and, for legacy roots, to\n  // enqueue the callback if one is provided).\n  const current = root.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n  const update = createUpdate(eventTime, lane);\n  update.callback =\n    callback !== undefined && callback !== null ? callback : null;\n  enqueueUpdate(current, update, lane);\n  scheduleInitialHydrationOnRoot(root, lane, eventTime);\n\n  return root;\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentNameFromFiber(ReactCurrentFiberCurrent) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  const root = enqueueUpdate(current, update, lane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, current, lane, eventTime);\n    entangleTransitions(root, current, lane);\n  }\n\n  return lane;\n}\n\nexport {\n  batchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushControlled,\n  flushSync,\n  isAlreadyRendering,\n  flushPassiveEffects,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot: {\n      const root: FiberRoot = fiber.stateNode;\n      if (isRootDehydrated(root)) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      flushSync(() => {\n        const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          const eventTime = requestEventTime();\n          scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n        }\n      });\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = SyncLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n    }\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thenables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptDiscreteHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const lane = SyncLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const lane = SelectiveHydrationLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const lane = requestUpdateLane(fiber);\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport {getCurrentUpdatePriority, runWithPriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldErrorImpl = fiber => null;\n\nexport function shouldError(fiber: Fiber): ?boolean {\n  return shouldErrorImpl(fiber);\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setErrorHandler = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  setErrorHandler = (newShouldErrorImpl: Fiber => ?boolean) => {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setErrorHandler,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion,\n  });\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {TouchedViewDataAtPoint, InspectorData} from './ReactNativeTypes';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentFiberUsingSlowPath,\n} from 'react-reconciler/src/ReactFiberTreeReflection';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {HostComponent} from 'react-reconciler/src/ReactWorkTags';\n// Module provided by RN:\nimport {UIManager} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\nimport {enableGetInspectorDataForInstanceInProduction} from 'shared/ReactFeatureFlags';\nimport {getClosestInstanceFromNode} from './ReactNativeComponentTree';\n\nconst emptyObject = {};\nif (__DEV__) {\n  Object.freeze(emptyObject);\n}\n\nlet createHierarchy;\nlet getHostNode;\nlet getHostProps;\nlet lastNonHostInstance;\nlet getInspectorDataForInstance;\nlet getOwnerHierarchy;\nlet traverseOwnerTreeUp;\n\nif (__DEV__ || enableGetInspectorDataForInstanceInProduction) {\n  createHierarchy = function(fiberHierarchy) {\n    return fiberHierarchy.map(fiber => ({\n      name: getComponentNameFromType(fiber.type),\n      getInspectorData: findNodeHandle => {\n        return {\n          props: getHostProps(fiber),\n          source: fiber._debugSource,\n          measure: callback => {\n            // If this is Fabric, we'll find a ShadowNode and use that to measure.\n            const hostFiber = findCurrentHostFiber(fiber);\n            const shadowNode =\n              hostFiber != null &&\n              hostFiber.stateNode !== null &&\n              hostFiber.stateNode.node;\n\n            if (shadowNode) {\n              nativeFabricUIManager.measure(shadowNode, callback);\n            } else {\n              return UIManager.measure(\n                getHostNode(fiber, findNodeHandle),\n                callback,\n              );\n            }\n          },\n        };\n      },\n    }));\n  };\n\n  getHostNode = function(fiber: Fiber | null, findNodeHandle) {\n    let hostNode;\n    // look for children first for the hostNode\n    // as composite fibers do not have a hostNode\n    while (fiber) {\n      if (fiber.stateNode !== null && fiber.tag === HostComponent) {\n        hostNode = findNodeHandle(fiber.stateNode);\n      }\n      if (hostNode) {\n        return hostNode;\n      }\n      fiber = fiber.child;\n    }\n    return null;\n  };\n\n  getHostProps = function(fiber) {\n    const host = findCurrentHostFiber(fiber);\n    if (host) {\n      return host.memoizedProps || emptyObject;\n    }\n    return emptyObject;\n  };\n\n  getInspectorDataForInstance = function(\n    closestInstance: Fiber | null,\n  ): InspectorData {\n    // Handle case where user clicks outside of ReactNative\n    if (!closestInstance) {\n      return {\n        hierarchy: [],\n        props: emptyObject,\n        selectedIndex: null,\n        source: null,\n      };\n    }\n\n    const fiber = findCurrentFiberUsingSlowPath(closestInstance);\n    const fiberHierarchy = getOwnerHierarchy(fiber);\n    const instance = lastNonHostInstance(fiberHierarchy);\n    const hierarchy = createHierarchy(fiberHierarchy);\n    const props = getHostProps(instance);\n    const source = instance._debugSource;\n    const selectedIndex = fiberHierarchy.indexOf(instance);\n\n    return {\n      hierarchy,\n      props,\n      selectedIndex,\n      source,\n    };\n  };\n\n  getOwnerHierarchy = function(instance: any) {\n    const hierarchy = [];\n    traverseOwnerTreeUp(hierarchy, instance);\n    return hierarchy;\n  };\n\n  lastNonHostInstance = function(hierarchy) {\n    for (let i = hierarchy.length - 1; i > 1; i--) {\n      const instance = hierarchy[i];\n\n      if (instance.tag !== HostComponent) {\n        return instance;\n      }\n    }\n    return hierarchy[0];\n  };\n\n  traverseOwnerTreeUp = function(hierarchy, instance: any) {\n    if (instance) {\n      hierarchy.unshift(instance);\n      traverseOwnerTreeUp(hierarchy, instance._debugOwner);\n    }\n  };\n}\n\nlet getInspectorDataForViewTag;\nlet getInspectorDataForViewAtPoint;\n\nif (__DEV__) {\n  getInspectorDataForViewTag = function(viewTag: number): Object {\n    const closestInstance = getClosestInstanceFromNode(viewTag);\n\n    // Handle case where user clicks outside of ReactNative\n    if (!closestInstance) {\n      return {\n        hierarchy: [],\n        props: emptyObject,\n        selectedIndex: null,\n        source: null,\n      };\n    }\n\n    const fiber = findCurrentFiberUsingSlowPath(closestInstance);\n    const fiberHierarchy = getOwnerHierarchy(fiber);\n    const instance = lastNonHostInstance(fiberHierarchy);\n    const hierarchy = createHierarchy(fiberHierarchy);\n    const props = getHostProps(instance);\n    const source = instance._debugSource;\n    const selectedIndex = fiberHierarchy.indexOf(instance);\n\n    return {\n      hierarchy,\n      props,\n      selectedIndex,\n      source,\n    };\n  };\n\n  getInspectorDataForViewAtPoint = function(\n    findNodeHandle: (componentOrHandle: any) => ?number,\n    inspectedView: Object,\n    locationX: number,\n    locationY: number,\n    callback: (viewData: TouchedViewDataAtPoint) => mixed,\n  ): void {\n    let closestInstance = null;\n\n    if (inspectedView._internalInstanceHandle != null) {\n      // For Fabric we can look up the instance handle directly and measure it.\n      nativeFabricUIManager.findNodeAtPoint(\n        inspectedView._internalInstanceHandle.stateNode.node,\n        locationX,\n        locationY,\n        internalInstanceHandle => {\n          if (internalInstanceHandle == null) {\n            callback({\n              pointerY: locationY,\n              frame: {left: 0, top: 0, width: 0, height: 0},\n              ...getInspectorDataForInstance(closestInstance),\n            });\n          }\n\n          closestInstance =\n            internalInstanceHandle.stateNode.canonical._internalInstanceHandle;\n\n          // Note: this is deprecated and we want to remove it ASAP. Keeping it here for React DevTools compatibility for now.\n          const nativeViewTag =\n            internalInstanceHandle.stateNode.canonical._nativeTag;\n\n          nativeFabricUIManager.measure(\n            internalInstanceHandle.stateNode.node,\n            (x, y, width, height, pageX, pageY) => {\n              const inspectorData = getInspectorDataForInstance(\n                closestInstance,\n              );\n              callback({\n                ...inspectorData,\n                pointerY: locationY,\n                frame: {left: pageX, top: pageY, width, height},\n                touchedViewTag: nativeViewTag,\n              });\n            },\n          );\n        },\n      );\n    } else if (inspectedView._internalFiberInstanceHandleDEV != null) {\n      // For Paper we fall back to the old strategy using the React tag.\n      UIManager.findSubviewIn(\n        findNodeHandle(inspectedView),\n        [locationX, locationY],\n        (nativeViewTag, left, top, width, height) => {\n          const inspectorData = getInspectorDataForInstance(\n            getClosestInstanceFromNode(nativeViewTag),\n          );\n          callback({\n            ...inspectorData,\n            pointerY: locationY,\n            frame: {left, top, width, height},\n            touchedViewTag: nativeViewTag,\n          });\n        },\n      );\n    } else {\n      console.error(\n        'getInspectorDataForViewAtPoint expects to receive a host component',\n      );\n\n      return;\n    }\n  };\n} else {\n  getInspectorDataForViewTag = () => {\n    throw new Error(\n      'getInspectorDataForViewTag() is not available in production',\n    );\n  };\n\n  getInspectorDataForViewAtPoint = (\n    findNodeHandle: (componentOrHandle: any) => ?number,\n    inspectedView: Object,\n    locationX: number,\n    locationY: number,\n    callback: (viewData: TouchedViewDataAtPoint) => mixed,\n  ): void => {\n    throw new Error(\n      'getInspectorDataForViewAtPoint() is not available in production.',\n    );\n  };\n}\n\nexport {\n  getInspectorDataForInstance,\n  getInspectorDataForViewAtPoint,\n  getInspectorDataForViewTag,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {HostComponent} from './ReactNativeTypes';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {ElementRef, Element, ElementType} from 'react';\n\nimport './ReactFabricInjection';\n\nimport {\n  findHostInstance,\n  findHostInstanceWithWarning,\n  batchedUpdates as batchedUpdatesImpl,\n  discreteUpdates,\n  createContainer,\n  updateContainer,\n  injectIntoDevTools,\n  getPublicRootInstance,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport {getInspectorDataForInstance} from './ReactNativeFiberInspector';\n\nimport {createPortal as createPortalImpl} from 'react-reconciler/src/ReactPortal';\nimport {setBatchingImplementation} from './legacy-events/ReactGenericBatching';\nimport ReactVersion from 'shared/ReactVersion';\n\n// Modules provided by RN:\nimport {\n  UIManager,\n  legacySendAccessibilityEvent,\n} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\n\nimport {getClosestInstanceFromNode} from './ReactFabricComponentTree';\nimport {\n  getInspectorDataForViewTag,\n  getInspectorDataForViewAtPoint,\n} from './ReactNativeFiberInspector';\nimport {LegacyRoot, ConcurrentRoot} from 'react-reconciler/src/ReactRootTags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nfunction findHostInstance_DEPRECATED<TElementType: ElementType>(\n  componentOrHandle: ?(ElementRef<TElementType> | number),\n): ?ElementRef<HostComponent<mixed>> {\n  if (__DEV__) {\n    const owner = ReactCurrentOwner.current;\n    if (owner !== null && owner.stateNode !== null) {\n      if (!owner.stateNode._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing findNodeHandle inside its render(). ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromType(owner.type) || 'A component',\n        );\n      }\n\n      owner.stateNode._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrHandle == null) {\n    return null;\n  }\n  // $FlowIssue Flow has hardcoded values for React DOM that don't work with RN\n  if (componentOrHandle._nativeTag) {\n    // $FlowIssue Flow has hardcoded values for React DOM that don't work with RN\n    return componentOrHandle;\n  }\n  // $FlowIssue Flow has hardcoded values for React DOM that don't work with RN\n  if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {\n    // $FlowIssue Flow has hardcoded values for React DOM that don't work with RN\n    return componentOrHandle.canonical;\n  }\n  let hostInstance;\n  if (__DEV__) {\n    hostInstance = findHostInstanceWithWarning(\n      componentOrHandle,\n      'findHostInstance_DEPRECATED',\n    );\n  } else {\n    hostInstance = findHostInstance(componentOrHandle);\n  }\n\n  if (hostInstance == null) {\n    return hostInstance;\n  }\n  if ((hostInstance: any).canonical) {\n    // Fabric\n    return (hostInstance: any).canonical;\n  }\n  // $FlowFixMe[incompatible-return]\n  return hostInstance;\n}\n\nfunction findNodeHandle(componentOrHandle: any): ?number {\n  if (__DEV__) {\n    const owner = ReactCurrentOwner.current;\n    if (owner !== null && owner.stateNode !== null) {\n      if (!owner.stateNode._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing findNodeHandle inside its render(). ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromType(owner.type) || 'A component',\n        );\n      }\n\n      owner.stateNode._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrHandle == null) {\n    return null;\n  }\n  if (typeof componentOrHandle === 'number') {\n    // Already a node handle\n    return componentOrHandle;\n  }\n  if (componentOrHandle._nativeTag) {\n    return componentOrHandle._nativeTag;\n  }\n  if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {\n    return componentOrHandle.canonical._nativeTag;\n  }\n  let hostInstance;\n  if (__DEV__) {\n    hostInstance = findHostInstanceWithWarning(\n      componentOrHandle,\n      'findNodeHandle',\n    );\n  } else {\n    hostInstance = findHostInstance(componentOrHandle);\n  }\n\n  if (hostInstance == null) {\n    return hostInstance;\n  }\n  // TODO: the code is right but the types here are wrong.\n  // https://github.com/facebook/react/pull/12863\n  if ((hostInstance: any).canonical) {\n    // Fabric\n    return (hostInstance: any).canonical._nativeTag;\n  }\n  return hostInstance._nativeTag;\n}\n\nfunction dispatchCommand(handle: any, command: string, args: Array<any>) {\n  if (handle._nativeTag == null) {\n    if (__DEV__) {\n      console.error(\n        \"dispatchCommand was called with a ref that isn't a \" +\n          'native component. Use React.forwardRef to get access to the underlying native component',\n      );\n    }\n    return;\n  }\n\n  if (handle._internalInstanceHandle != null) {\n    const {stateNode} = handle._internalInstanceHandle;\n    if (stateNode != null) {\n      nativeFabricUIManager.dispatchCommand(stateNode.node, command, args);\n    }\n  } else {\n    UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args);\n  }\n}\n\nfunction sendAccessibilityEvent(handle: any, eventType: string) {\n  if (handle._nativeTag == null) {\n    if (__DEV__) {\n      console.error(\n        \"sendAccessibilityEvent was called with a ref that isn't a \" +\n          'native component. Use React.forwardRef to get access to the underlying native component',\n      );\n    }\n    return;\n  }\n\n  if (handle._internalInstanceHandle != null) {\n    const {stateNode} = handle._internalInstanceHandle;\n    if (stateNode != null) {\n      nativeFabricUIManager.sendAccessibilityEvent(stateNode.node, eventType);\n    }\n  } else {\n    legacySendAccessibilityEvent(handle._nativeTag, eventType);\n  }\n}\n\nfunction onRecoverableError(error) {\n  // TODO: Expose onRecoverableError option to userspace\n  // eslint-disable-next-line react-internal/no-production-logging, react-internal/warning-args\n  console.error(error);\n}\n\nfunction render(\n  element: Element<ElementType>,\n  containerTag: number,\n  callback: ?() => void,\n  concurrentRoot: ?boolean,\n): ?ElementRef<ElementType> {\n  let root = roots.get(containerTag);\n\n  if (!root) {\n    // TODO (bvaughn): If we decide to keep the wrapper component,\n    // We could create a wrapper for containerTag as well to reduce special casing.\n    root = createContainer(\n      containerTag,\n      concurrentRoot ? ConcurrentRoot : LegacyRoot,\n      null,\n      false,\n      null,\n      '',\n      onRecoverableError,\n      null,\n    );\n    roots.set(containerTag, root);\n  }\n  updateContainer(element, root, null, callback);\n\n  // $FlowIssue Flow has hardcoded values for React DOM that don't work with RN\n  return getPublicRootInstance(root);\n}\n\nfunction unmountComponentAtNode(containerTag: number) {\n  this.stopSurface(containerTag);\n}\n\nfunction stopSurface(containerTag: number) {\n  const root = roots.get(containerTag);\n  if (root) {\n    // TODO: Is it safe to reset this now or should I wait since this unmount could be deferred?\n    updateContainer(null, root, null, () => {\n      roots.delete(containerTag);\n    });\n  }\n}\n\nfunction createPortal(\n  children: ReactNodeList,\n  containerTag: number,\n  key: ?string = null,\n) {\n  return createPortalImpl(children, containerTag, null, key);\n}\n\nsetBatchingImplementation(batchedUpdatesImpl, discreteUpdates);\n\nconst roots = new Map();\n\nexport {\n  // This is needed for implementation details of TouchableNativeFeedback\n  // Remove this once TouchableNativeFeedback doesn't use cloneElement\n  findHostInstance_DEPRECATED,\n  findNodeHandle,\n  dispatchCommand,\n  sendAccessibilityEvent,\n  render,\n  // Deprecated - this function is being renamed to stopSurface, use that instead.\n  // TODO (T47576999): Delete this once it's no longer called from native code.\n  unmountComponentAtNode,\n  stopSurface,\n  createPortal,\n  // This export is typically undefined in production builds.\n  // See the \"enableGetInspectorDataForInstanceInProduction\" flag.\n  getInspectorDataForInstance,\n};\n\ninjectIntoDevTools({\n  findFiberByHostInstance: getClosestInstanceFromNode,\n  bundleType: __DEV__ ? 1 : 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-native-renderer',\n  rendererConfig: {\n    getInspectorDataForViewTag: getInspectorDataForViewTag,\n    getInspectorDataForViewAtPoint: getInspectorDataForViewAtPoint.bind(\n      null,\n      findNodeHandle,\n    ),\n  },\n});\n"],"names":["invokeGuardedCallbackProd","name","func","context","a","b","c","d","e","f","funcArgs","Array","prototype","slice","call","arguments","apply","error","onError","invokeGuardedCallbackImpl","hasError","caughtError","hasRethrowError","rethrowError","reporter","invokeGuardedCallback","invokeGuardedCallbackAndCatchFirstError","clearCaughtError","rethrowCaughtError","Error","isArrayImpl","isArray","getFiberCurrentPropsFromNode","getInstanceFromNode","getNodeFromInstance","setComponentTree","getFiberCurrentPropsFromNodeImpl","getInstanceFromNodeImpl","getNodeFromInstanceImpl","executeDispatch","event","listener","inst","type","currentTarget","undefined","executeDispatchesInOrder","dispatchListeners","_dispatchListeners","dispatchInstances","_dispatchInstances","i","length","isPropagationStopped","executeDispatchesInOrderStopAtTrueImpl","executeDispatchesInOrderStopAtTrue","ret","executeDirectDispatch","dispatchListener","dispatchInstance","res","hasDispatches","assign","Object","EVENT_POOL_SIZE","EventInterface","target","eventPhase","bubbles","cancelable","timeStamp","Date","now","defaultPrevented","isTrusted","functionThatReturnsTrue","functionThatReturnsFalse","SyntheticEvent","dispatchConfig","targetInst","nativeEvent","nativeEventTarget","_targetInst","Interface","constructor","propName","hasOwnProperty","normalize","returnValue","isDefaultPrevented","preventDefault","stopPropagation","cancelBubble","persist","isPersistent","destructor","extend","Super","E","Class","addEventPoolingTo","createOrGetPooledEvent","nativeInst","EventConstructor","eventPool","instance","pop","releasePooledEvent","push","getPooled","release","ResponderSyntheticEvent","touchHistory","TOP_TOUCH_START","TOP_TOUCH_MOVE","TOP_TOUCH_END","TOP_TOUCH_CANCEL","TOP_SCROLL","TOP_SELECTION_CHANGE","isStartish","topLevelType","isMoveish","isEndish","startDependencies","moveDependencies","endDependencies","touchBank","numberActiveTouches","indexOfSingleActiveTouch","mostRecentTimeStamp","timestampForTouch","touch","timestamp","createTouchRecord","touchActive","startPageX","pageX","startPageY","pageY","startTimeStamp","currentPageX","currentPageY","currentTimeStamp","previousPageX","previousPageY","previousTimeStamp","resetTouchRecord","touchRecord","getTouchIdentifier","identifier","recordTouchStart","recordTouchMove","recordTouchEnd","instrumentationCallback","ResponderTouchHistoryStore","instrument","callback","recordTouchTrack","changedTouches","forEach","touches","touchTrackToCheck","accumulate","current","next","concat","accumulateInto","forEachAccumulated","arr","cb","scope","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","responderInst","trackedTouchCount","changeResponder","nextResponderInst","blockHostResponder","oldResponderInst","ResponderEventPlugin","GlobalResponderHandler","onChange","eventTypes","startShouldSetResponder","phasedRegistrationNames","bubbled","captured","dependencies","scrollShouldSetResponder","selectionChangeShouldSetResponder","moveShouldSetResponder","responderStart","registrationName","responderMove","responderEnd","responderRelease","responderTerminationRequest","responderGrant","responderReject","responderTerminate","getParent","return","tag","getLowestCommonAncestor","instA","instB","depthA","tempA","depthB","tempB","depth","alternate","isAncestor","traverseTwoPhase","fn","arg","path","getListener","stateNode","props","listenerAtPhase","propagationPhase","accumulateDirectionalDispatches","phase","accumulateDispatches","ignoredDirection","accumulateDirectDispatchesSingle","accumulateDirectDispatches","events","accumulateTwoPhaseDispatchesSingleSkipTarget","parentInst","accumulateTwoPhaseDispatchesSkipTarget","accumulateTwoPhaseDispatchesSingle","accumulateTwoPhaseDispatches","setResponderAndExtractTransfer","shouldSetEventType","bubbleShouldSetFrom","skipOverBubbleShouldSetFrom","shouldSetEvent","wantsResponderInst","extracted","grantEvent","terminationRequestEvent","shouldSwitch","terminateEvent","rejectEvent","canTriggerTransfer","topLevelInst","responderIgnoreScroll","noResponderTouches","activeTouch","_getResponder","extractEvents","eventSystemFlags","isResponderTouchStart","isResponderTouchMove","isResponderTouchEnd","incrementalTouch","gesture","isResponderTerminate","isResponderRelease","finalTouch","finalEvent","injection","injectGlobalResponderHandler","eventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","pluginModule","pluginIndex","indexOf","plugins","publishedEvents","eventName","publishEventForPlugin","eventNameDispatchConfigs","phaseName","phasedRegistrationName","publishRegistrationName","registrationNameModules","registrationNameDependencies","injectEventPluginOrder","injectedEventPluginOrder","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","getListeners","dispatchToImperativeListeners","canonical","_eventListeners","listeners","requestedPhaseIsCapture","mangledImperativeRegistrationName","replace","eventListeners","listenerObj","isCaptureEvent","options","capture","listenerFnWrapper","syntheticEvent","eventInst","CustomEvent","detail","setSyntheticEvent","args","once","removeEventListener_unstable","invalidated","customBubblingEventTypes","ReactNativeViewConfigRegistry","customDirectEventTypes","listenersAtPhase","accumulateListenersAndInstances","listenersLength","skipBubbling","accumulateCapturePhaseDispatches","ReactNativeBridgeEventPlugin","bubbleDispatchConfig","directDispatchConfig","ReactNativeEventPluginOrder","getInstanceFromInstance","instanceHandle","getTagFromInstance","nativeInstance","_nativeTag","currentProps","ReactFabricGlobalResponderHandler","from","to","blockNativeResponder","fromOrTo","fromOrToStateNode","isFabric","_internalInstanceHandle","nativeFabricUIManager","setIsJSResponder","node","UIManager","setJSResponder","clearJSResponder","get","key","_reactInternals","set","value","ReactSharedInternals","React","enableSchedulingProfiler","enableProfilerTimer","__PROFILE__","enableProfilerCommitHooks","enableSuspenseAvoidThisFallback","enableNewReconciler","enableLazyContextPropagation","enableLegacyHidden","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","getContextName","getComponentNameFromType","$$typeof","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","getComponentNameFromFiber","fiber","NoFlags","PerformedWork","Placement","Update","ChildDeletion","ContentReset","Callback","DidCapture","ForceClientRender","Ref","Snapshot","Passive","Hydrating","Visibility","StoreConsistency","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","PassiveStatic","BeforeMutationMask","enableCreateEventHandleAPI","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","nearestMounted","nextNode","flags","isFiberMounted","isMounted","component","getInstance","assertIsMounted","findCurrentFiberUsingSlowPath","parentA","parentB","nextParent","child","sibling","didFindChild","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","mountSafeCallback_NOT_REALLY_SAFE","__isMounted","emptyObject","removedKeys","removedKeyCount","deepDifferOptions","unsafelyIgnoreFunctions","defaultDiffer","prevProp","nextProp","deepDiffer","restoreDeletedValuesInNestedArray","updatePayload","validAttributes","obj","propKey","attributeConfig","diff","process","nextValue","diffNestedArrayProperty","prevArray","nextArray","minLength","diffNestedProperty","clearNestedProperty","addNestedProperty","diffProperties","flattenStyle","addProperties","clearProperties","prevProps","nextProps","shouldUpdate","create","batchedUpdatesImpl","bookkeeping","isInsideEventHandler","batchedUpdates","setBatchingImplementation","_batchedUpdatesImpl","_discreteUpdatesImpl","discreteUpdatesImpl","eventQueue","executeDispatchesAndRelease","executeDispatchesAndReleaseTopLevel","runEventsInBatch","processingEventQueue","extractPluginEvents","legacyPlugins","possiblePlugin","extractedEvents","runExtractedPluginEventsInBatch","dispatchEvent","targetFiber","eventTarget","RawEventEmitter","emit","scheduleCallback","Scheduler","cancelCallback","shouldYield","requestPaint","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","rendererID","injectedHook","injectInternals","internals","__REACT_DEVTOOLS_GLOBAL_HOOK__","hook","isDisabled","supportsFiber","getLaneLabelMap","injectProfilingHooks","inject","err","checkDCE","onCommitRoot","root","eventPriority","onCommitFiberRoot","didError","schedulerPriority","DiscreteEventPriority","ImmediateSchedulerPriority","ContinuousEventPriority","UserBlockingSchedulerPriority","DefaultEventPriority","NormalSchedulerPriority","IdleEventPriority","IdleSchedulerPriority","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","profilingHooks","injectedProfilingHooks","markComponentRenderStopped","markComponentErrored","thrownValue","lanes","markComponentSuspended","wakeable","NoMode","ConcurrentMode","ProfileMode","StrictLegacyMode","clz32","Math","clz32Fallback","log","LN2","asUint","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","getHighestPriorityLane","getNextLanes","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","entangledLanes","entanglements","index","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyNonUrgentLanes","UrgentLanes","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","createLaneMap","initial","laneMap","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootFinished","remainingLanes","noLongerPendingLanes","mutableReadLanes","hiddenUpdates","hiddenUpdatesForLane","update","markRootEntangled","rootEntangledLanes","markHiddenUpdate","getBumpedLaneForHydration","renderLanes","renderLane","getTransitionsForLanes","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","shim","commitMount","isSuspenseInstancePending","isSuspenseInstanceFallback","getSuspenseInstanceFallbackErrorDetails","registerSuspenseInstanceRetry","hydrateTextInstance","createNode","cloneNode","cloneNodeWithNewChildren","cloneNodeWithNewChildrenAndProps","cloneNodeWithNewProps","createChildNodeSet","createChildSet","appendChildNode","appendChild","appendChildNodeToSet","appendChildToSet","completeRoot","registerEventHandler","fabricMeasure","measure","fabricMeasureInWindow","measureInWindow","fabricMeasureLayout","measureLayout","FabricDefaultPriority","unstable_DefaultEventPriority","FabricDiscretePriority","unstable_DiscreteEventPriority","fabricGetCurrentEventPriority","unstable_getCurrentEventPriority","getViewConfigForType","nextReactTag","ReactFabricHostComponent","viewConfig","internalInstanceHandle","blur","TextInputState","blurTextInput","focus","focusTextInput","relativeToNativeNode","onSuccess","onFail","toStateNode","fromStateNode","setNativeProps","nativeProps","addEventListener_unstable","eventType","optionsObj","passive","signal","namedEventListeners","filter","appendInitialChild","parentInstance","createInstance","rootContainerInstance","hostContext","uiViewClassName","createTextInstance","text","getRootHostContext","isInAParentText","getChildHostContext","parentHostContext","prevIsInAParentText","getPublicInstance","prepareForCommit","containerInfo","prepareUpdate","oldProps","newProps","resetAfterCommit","shouldSetTextContent","getCurrentEventPriority","currentEventPriority","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","cloneInstance","keepChildren","recyclableInstance","clone","cloneHiddenInstance","style","display","cloneHiddenTextInstance","createContainerChildSet","container","appendChildToContainerChildSet","childSet","finalizeContainerChildren","newChildren","replaceContainerChildren","preparePortalMount","portalInstance","ReactCurrentDispatcher","describeBuiltInComponentFrame","source","ownerFn","ownerName","describeComponentFrame","sourceInfo","describeClassComponentFrame","ctor","describeFunctionComponentFrame","ReactDebugCurrentFrame","valueStack","createCursor","defaultValue","cursor","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","Component","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","OffscreenVisible","OffscreenPassiveEffectsConnected","is","y","objectIs","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","isRootDehydrated","currentState","memoizedState","isDehydrated","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","popTreeContext","isHydrating","hydrationErrors","reenterHydrationStateFromDehydratedSuspenseInstance","suspenseInstance","treeContext","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","textInstance","prepareToHydrateHostSuspenseInstance","popHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","getIsHydrating","queueHydrationError","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","shallowEqual","objA","objB","keysA","keys","keysB","currentKey","describeFiber","__DEV__","getStackByFiberInDevAndProd","info","message","stack","resetCurrentFiber","resolveDefaultProps","baseProps","defaultProps","valueCursor","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","resetContextDependencies","pushProvider","providerFiber","_currentValue2","popProvider","currentValue","scheduleContextWorkOnParentPath","propagationRoot","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependency","firstContext","createUpdate","ForceUpdate","updateQueue","sharedQueue","shared","pending","parentSuspense","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","isPrimaryRenderer","contextItem","memoizedValue","concurrentQueues","concurrentQueuesIndex","concurrentlyUpdatedLanes","finishQueueingConcurrentUpdates","endIndex","markUpdateLaneFromFiberToRoot","getConcurrentlyUpdatedLanes","enqueueUpdate","enqueueConcurrentHookUpdate","concurrentQueue","concurrentUpdate","getRootForUpdatedFiber","enqueueConcurrentHookUpdateAndEagerlyBailout","enqueueConcurrentClassUpdate","enqueueConcurrentRenderForLane","unsafe_markUpdateLaneFromFiberToRoot","sourceFiber","isHidden","offscreenInstance","visibility","throwIfInfiniteUpdateLoopDetected","detectUpdateOnUnmountedFiber","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","hiddenCallbacks","callbacks","cloneUpdateQueue","currentQueue","isUnsafeClassRenderPhaseUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextState","partialState","processUpdateQueue","pendingQueue","lastPendingUpdate","firstPendingUpdate","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","isHiddenUpdate","shouldSkipUpdate","getWorkInProgressRootRenderLanes","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","deferHiddenCallbacks","newHiddenCallbacks","existingHiddenCallbacks","commitHiddenCallbacks","commitCallbacks","emptyRefsObject","refs","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","isPureReactComponent","adoptClassInstance","updater","setInstance","constructClassInstance","isLegacyContextConsumer","contextType","state","callComponentWillMount","componentWillMount","UNSAFE_componentWillMount","callComponentWillReceiveProps","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","mountClassInstance","getSnapshotBeforeUpdate","componentDidMount","fiberFlags","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","componentDidUpdate","UNSAFE_componentWillUpdate","componentWillUpdate","coerceRef","returnFiber","element","mixedRef","ref","_owner","owner","ownerFiber","resolvedInst","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","toString","join","resolveLazy","lazyType","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","deletions","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","Map","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","mode","existing","updateElement","updateFragment","children","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","reconcileChildrenArray","resultingFirstChild","previousNewFiber","nextOldFiber","delete","reconcileChildrenIterator","newChildrenIterable","iteratorFn","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","NO_CONTEXT","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","currentTreeHiddenStackCursor","prevRenderLanesStackCursor","pushHiddenContext","prevRenderLanes","getRenderLanes","setRenderLanes","baseLanes","reuseHiddenContextOnStack","popHiddenContext","isCurrentTreeHidden","suspenseHandlerStackCursor","pushPrimaryTreeSuspenseHandler","handler","pushFallbackTreeSuspenseHandler","reuseSuspenseHandlerOnStack","pushOffscreenSuspenseHandler","getSuspenseHandler","popSuspenseHandler","DefaultSuspenseContext","SubtreeSuspenseContextMask","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseListContext","flag","setDefaultShallowSuspenseListContext","setShallowSuspenseListContext","shallowContext","pushSuspenseListContext","newContext","popSuspenseListContext","findFirstSuspended","row","dehydrated","revealOrder","didSuspend","HasEffect","Insertion","Layout","workInProgressSources","resetWorkInProgressVersions","mutableSource","_workInProgressVersionSecondary","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","globalClientIdCounter","RE_RENDER_LIMIT","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","HooksDispatcherOnMount","HooksDispatcherOnUpdate","numberOfReRenders","localIdCounter","HooksDispatcherOnRerender","ContextOnlyDispatcher","didRenderTooFewHooks","bailoutHooks","PassiveEffect","UpdateEffect","resetHooksAfterThrow","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","bind","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","hasEagerState","eagerState","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountMutableSource","getSnapshot","subscribe","updateMutableSource","mountSyncExternalStore","getServerSnapshot","nextSnapshot","getWorkInProgressRoot","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","HookHasEffect","HookPassive","updateStoreInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","latestGetSnapshot","prevValue","mountState","dispatchSetState","updateState","rerenderState","destroy","deps","effect","firstEffect","mountRef","initialValue","updateRef","mountEffectImpl","hookFlags","updateEffectImpl","prevEffect","PassiveStaticEffect","mountInsertionEffect","HookInsertion","updateInsertionEffect","mountLayoutEffect","LayoutStaticEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","updateDeferredValue","resolvedCurrentHook","updateDeferredValueImpl","rerenderDeferredValue","shouldDeferValue","deferredLane","startTransition","setPending","previousPriority","prevTransition","currentTransition","mountTransition","isPending","start","updateTransition","rerenderTransition","mountId","identifierPrefix","id","globalClientId","updateId","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","entangleTransitionUpdate","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","recordLayoutEffectDuration","startLayoutEffectTimer","createCapturedValueAtFiber","digest","createCapturedValue","RNImpl","showErrorDialog","boundary","errorInfo","capturedError","componentStack","errorBoundary","logCapturedError","logError","_suppressLogging","console","componentName","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","PossiblyWeakMap","WeakMap","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","getDerivedStateFromError","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","pingCache","threadIDs","Set","has","add","ping","pingSuspendedRoot","then","resetSuspendedComponent","rootRenderLanes","currentSource","markSuspenseBoundaryShouldCapture","suspenseBoundary","currentSourceFiber","throwException","wakeables","offscreenQueue","newOffscreenQueue","transitions","markerInstances","renderDidSuspendDelayIfPossible","uncaughtSuspenseError","renderDidError","isAlreadyFailedLegacyErrorBoundary","getSuspendedCache","didReceiveUpdate","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","hasId","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","updateSimpleMemoComponent","createFiberFromTypeAndProps","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","updateFunctionComponent","updateOffscreenComponent","nextBaseLanes","currentChildLanes","lanesWeJustAttempted","remainingChildLanes","deferHiddenOffscreenComponent","cachePool","enableCache","updateMode","updateProfiler","markRef","updateClassComponent","hasContext","isLegacyContextProvider","pushLegacyContextProvider","resetSuspendedCurrentOnMountInLegacyMode","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","pushRootTransition","updateHostComponent","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","hint","mountIncompleteClassComponent","mountIndeterminateComponent","SUSPENDED_MARKER","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseState","suspenseContext","getRemainingWorkInPrimaryTree","updateSuspenseComponent","showFallback","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","mountSuspensePrimaryChildren","updateDehydratedSuspenseComponent","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","subtreeFlags","retrySuspenseComponentWithoutHydrating","recoverableError","mountSuspenseFallbackAfterRetryWithoutHydrating","fiberMode","capturedValue","attemptHydrationAtLane","retry","retryDehydratedSuspenseBoundary","scheduleSuspenseWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","initSuspenseListRenderState","isBackwards","tail","tailMode","renderState","rendering","renderingStartTime","last","updateSuspenseListComponent","validateRevealOrder","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","updateContextProvider","providerType","newValue","oldValue","hasLegacyContextChanged","updateContextConsumer","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","primaryChildLanes","hasChildWork","beginWork","unresolvedProps","markUpdate","hadNoMutationsEffects","completedWork","didBailout","appendAllChildren","updateHostContainer","needsVisibilityToggle","branches","appendAllChildrenToContainer","containerChildSet","portalOrRoot","childrenUnchanged","newChildSet","pendingChildren","currentInstance","currentHostContext","newInstance","oldText","newText","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","bubbleProperties","newChildLanes","completeDehydratedSuspenseBoundary","wasHydrated","completeWork","popLegacyContext","fiberRoot","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","fallthroughToNormalSuspensePath","nextDidTimeout","prevDidTimeout","offscreenFiber","isBadFallback","renderDidSuspend","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","previousSibling","nextIsHidden","prevIsHidden","unwindWork","popTransition","unwindInterruptedWork","interruptedWork","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","PossiblyWeakSet","WeakSet","nextEffect","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","nearestMountedAncestor","captureCommitPhaseError","safelyAttachRef","commitAttachRef","safelyDetachRef","retVal","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","commitBeforeMutationEffects_complete","setCurrentDebugFiberInDEV","commitBeforeMutationEffectsOnFiber","finishedWork","snapshot","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitHookEffectListMount","commitHookLayoutEffects","commitClassLayoutLifecycles","commitClassCallbacks","commitHostComponentMount","commitLayoutEffectOnFiber","finishedRoot","committedLanes","recursivelyTraverseLayoutEffects","isModernRoot","newOffscreenSubtreeIsHidden","wasHidden","newOffscreenSubtreeWasHidden","prevOffscreenSubtreeIsHidden","prevOffscreenSubtreeWasHidden","includeWorkInProgressEffects","recursivelyTraverseReappearLayoutEffects","instanceToUse","detachFiberMutation","detachFiberAfterEffects","hostInstance","emptyPortalContainer","emptyChildSet","commitPlacement","commitDeletionEffects","deletedFiber","commitDeletionEffectsOnFiber","recursivelyTraverseDeletionEffects","NoHookEffect","commitSuspenseCallback","getRetryCache","retryCache","attachSuspenseRetryListeners","resolveRetryWakeable","commitMutationEffects","inProgressLanes","commitMutationEffectsOnFiber","recursivelyTraverseMutationEffects","parentFiber","commitReconciliationEffects","markCommitTimeOfFallback","offscreenBoundary","recursivelyTraverseDisappearLayoutEffects","commitLayoutEffects","disappearLayoutEffects","reappearLayoutEffects","offscreenState","childShouldIncludeWorkInProgressEffects","commitHookPassiveMountEffects","commitPassiveMountEffects","committedTransitions","commitPassiveMountOnFiber","resetCurrentDebugFiberInDEV","recursivelyTraversePassiveMountEffects","recursivelyTraverseReconnectPassiveEffects","commitOffscreenPassiveMountEffects","commitCachePassiveMountEffect","reconnectPassiveEffects","commitPassiveUnmountEffects","commitPassiveUnmountOnFiber","detachAlternateSiblings","previousFiber","detachedChild","detachedSibling","commitHookPassiveUnmountEffects","recursivelyTraversePassiveUnmountEffects","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","recursivelyTraverseDisconnectPassiveEffects","disconnectPassiveEffect","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","ReactCurrentActQueue","ceil","NoContext","BatchedContext","RenderContext","CommitContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","executionContext","workInProgressRoot","workInProgressRootRenderLanes","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","workInProgressTransitions","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveTransitions","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","currentEventTime","currentEventTransitionLane","isTransition","eventLane","requestRetryLane","deferRenderPhaseUpdateToNextBatch","ensureRootIsScheduled","existingCallbackNode","callbackNode","callbackPriority","newCallbackPriority","existingCallbackPriority","newCallbackNode","performSyncWorkOnRoot","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","disableSchedulerTimeoutInWorkLoop","exitStatus","renderRootConcurrent","renderRootSync","errorRetryLanes","recoverFromConcurrentError","fatalError","prepareFreshStack","renderWasConcurrent","isRenderConsistentWithExternalStores","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","rootWorkInProgress","errorsFromSecondAttempt","errors","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","checks","renderedValue","markRootSuspended_dontCallThisOneDirectly","prevExecutionContext","subtreeRenderLanes","workInProgressRootRenderPhaseUpdatedLanes","handleError","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","prevDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","siblingFiber","recoverableErrors","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","pendingPassiveEffectsRemainingLanes","subtreeHasEffects","rootHasEffect","onCommitRootDevTools","onRecoverableError","renderPriority","priority","flushPassiveEffectsImpl","onPostCommitRootDevTools","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","timeElapsed","nestedPassiveUpdateCount","rootWithPassiveNestedUpdates","originalBeginWork","priorityLevel","Scheduler_scheduleCallback","Scheduler_cancelCallback","FiberNode","createFiber","shouldConstruct","isReactComponent","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","elements","primaryChildInstance","pendingMarkers","content","FiberRootNode","hydrate","incompleteTransitions","createFiberRoot","initialChildren","hydrationCallbacks","transitionCallbacks","uninitializedFiber","cache","createPortal","getContextForSubtree","parentComponent","findHostInstance","hostFiber","createContainer","updateContainer","getPublicRootInstance","containerFiber","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","findHostInstanceByFiber","emptyFindFiberByHostInstance","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","version","rendererPackageName","rendererConfig","currentDispatcherRef","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","ReactVersion","getInspectorDataForInstance","getInspectorDataForViewTag","getInspectorDataForViewAtPoint","findNodeHandle","inspectedView","locationX","locationY","findHostInstance_DEPRECATED","componentOrHandle","dispatchCommand","handle","command","dispatchViewManagerCommand","sendAccessibilityEvent","legacySendAccessibilityEvent","containerTag","concurrentRoot","roots","unmountComponentAtNode","stopSurface","createPortalImpl","getClosestInstanceFromNode"],"mappings":"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"}
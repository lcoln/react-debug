{"version":3,"file":"ReactTestRenderer-dev.js","sources":["/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/ReactSharedInternals.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/consoleWithStackDev.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/assign.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/ReactInstanceMap.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/forks/ReactFeatureFlags.test-renderer.native.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactWorkTags.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/ReactSymbols.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/getComponentNameFromType.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/getComponentNameFromFiber.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberFlags.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberTreeReflection.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/isArray.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/Scheduler.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactTypeOfMode.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/clz32.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberLane.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactEventPriorities.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-test-renderer/src/ReactTestHostConfig.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/ReactComponentStackFrame.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/hasOwnProperty.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/checkPropTypes.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberStack.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberContext.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactRootTags.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberOffscreenComponent.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/objectIs.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberSyncTaskQueue.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberShellHydration.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberTreeContext.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberHydrationContext.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberTransition.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/shallowEqual.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberComponentStack.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactCurrentFiber.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactStrictModeWarnings.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/CheckStringCoercion.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberLazyComponent.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberNewContext.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberConcurrentUpdates.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberClassUpdateQueue.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberClassComponent.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactChildFiber.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberHostContext.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberHiddenContext.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactHookEffectTags.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactMutableSource.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberCacheComponent.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberHooks.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactProfilerTimer.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactCapturedValue.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberErrorDialog.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberErrorLogger.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberThrow.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberTransition.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberBeginWork.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberCompleteWork.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberUnwindWork.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/invokeGuardedCallbackImpl.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/ReactErrorUtils.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberCommitWork.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactTestSelectors.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberAct.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberWorkLoop.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberHotReloading.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiber.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberRoot.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/shared/ReactVersion.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-reconciler/src/ReactFiberReconciler.old.js","/Users/coln/www/127/tech/tencent/react-debug/react/packages/react-test-renderer/src/ReactTestRenderer.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nlet suppressWarning = false;\nexport function setSuppressWarning(newSuppressWarning) {\n  if (__DEV__) {\n    suppressWarning = newSuppressWarning;\n  }\n}\n\n// In DEV, calls to console.warn and console.error get replaced\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nexport function warn(format, ...args) {\n  if (__DEV__) {\n    if (!suppressWarning) {\n      printWarning('warn', format, args);\n    }\n  }\n}\n\nexport function error(format, ...args) {\n  if (__DEV__) {\n    if (!suppressWarning) {\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  if (__DEV__) {\n    const ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    const stack = ReactDebugCurrentFrame.getStackAddendum();\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    const argsWithFormat = args.map(item => String(item));\n    // Careful: RN currently depends on this prefix\n    argsWithFormat.unshift('Warning: ' + format);\n    // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst assign = Object.assign;\n\nexport default assign;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\nimport typeof * as ExportsType from './ReactFeatureFlags.test-renderer';\n\nexport const debugRenderPhaseSideEffectsForStrictMode = false;\nexport const enableDebugTracing = false;\nexport const enableSchedulingProfiler = false;\nexport const warnAboutDeprecatedLifecycles = true;\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = false;\nexport const enableProfilerTimer = __PROFILE__;\nexport const enableProfilerCommitHooks = __PROFILE__;\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\nexport const enableProfilerNestedUpdateScheduledHook = false;\nexport const enableUpdaterTracking = false;\nexport const enableCache = true;\nexport const enableCacheElement = true;\nexport const disableJavaScriptURLs = false;\nexport const disableCommentsAsDOMContainers = true;\nexport const disableInputAttributeSyncing = false;\nexport const enableSchedulerDebugging = false;\nexport const enableScopeAPI = false;\nexport const enableCreateEventHandleAPI = false;\nexport const enableSuspenseCallback = false;\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\nexport const warnAboutStringRefs = false;\nexport const disableLegacyContext = false;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\nexport const enableTrustedTypesIntegration = false;\nexport const disableTextareaChildren = false;\nexport const disableModulePatternComponents = false;\nexport const warnAboutSpreadingKeyToJSX = false;\nexport const enableComponentStackLocations = false;\nexport const enableLegacyFBSupport = false;\nexport const enableFilterEmptyStringAttributesDOM = false;\nexport const disableNativeComponentFrames = false;\nexport const skipUnmountedBoundaries = false;\nexport const deletedTreeCleanUpLevel = 3;\nexport const enableGetInspectorDataForInstanceInProduction = false;\nexport const enableNewReconciler = false;\nexport const deferRenderPhaseUpdateToNextBatch = false;\nexport const enableSuspenseAvoidThisFallback = false;\nexport const enableSuspenseAvoidThisFallbackFizz = false;\nexport const enableCPUSuspense = false;\nexport const enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay = true;\nexport const enableClientRenderFallbackOnTextMismatch = true;\nexport const enableStrictEffects = false;\nexport const createRootStrictEffectsByDefault = false;\nexport const enableUseRefAccessWarning = false;\n\nexport const disableSchedulerTimeoutInWorkLoop = false;\nexport const enableLazyContextPropagation = false;\nexport const enableLegacyHidden = false;\nexport const enableSyncDefaultUpdates = true;\nexport const allowConcurrentByDefault = true;\n\nexport const consoleManagedByDevToolsDuringStrictMode = false;\nexport const enableServerContext = false;\nexport const enableUseMutableSource = false;\n\nexport const enableTransitionTracing = false;\nexport const enableSymbolFallbackForWWW = false;\n\n// Flow magic to verify the exports of this file match the original version.\n// eslint-disable-next-line no-unused-vars\ntype Check<_X, Y: _X, X: Y = _X> = null;\n// eslint-disable-next-line no-unused-expressions\n(null: Check<ExportsType, FeatureFlagsType>);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const ScopeComponent = 21;\nexport const OffscreenComponent = 22;\nexport const LegacyHiddenComponent = 23;\nexport const CacheComponent = 24;\nexport const TracingMarkerComponent = 25;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types.\nexport const REACT_ELEMENT_TYPE = Symbol.for('react.element');\nexport const REACT_PORTAL_TYPE = Symbol.for('react.portal');\nexport const REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nexport const REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nexport const REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nexport const REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nexport const REACT_CONTEXT_TYPE = Symbol.for('react.context');\nexport const REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');\nexport const REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nexport const REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nexport const REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nexport const REACT_MEMO_TYPE = Symbol.for('react.memo');\nexport const REACT_LAZY_TYPE = Symbol.for('react.lazy');\nexport const REACT_SCOPE_TYPE = Symbol.for('react.scope');\nexport const REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\n  'react.debug_trace_mode',\n);\nexport const REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nexport const REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nexport const REACT_CACHE_TYPE = Symbol.for('react.cache');\nexport const REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nexport const REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\n  'react.default_value',\n);\n\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n  REACT_SERVER_CONTEXT_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {\n  enableServerContext,\n  enableTransitionTracing,\n  enableCache,\n} from './ReactFeatureFlags';\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const displayName = (outerType: any).displayName;\n  if (displayName) {\n    return displayName;\n  }\n  const functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName;\n}\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\n// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\nexport default function getComponentNameFromType(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentNameFromType(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n    case REACT_CACHE_TYPE:\n      if (enableCache) {\n        return 'Cache';\n      }\n    // eslint-disable-next-line no-fallthrough\n    case REACT_TRACING_MARKER_TYPE:\n      if (enableTransitionTracing) {\n        return 'TracingMarker';\n      }\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        const outerName = (type: any).displayName || null;\n        if (outerName !== null) {\n          return outerName;\n        }\n        return getComponentNameFromType(type.type) || 'Memo';\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentNameFromType(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n      case REACT_SERVER_CONTEXT_TYPE:\n        if (enableServerContext) {\n          const context2 = ((type: any): ReactContext<any>);\n          return (context2.displayName || context2._globalName) + '.Provider';\n        }\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {enableLegacyHidden} from 'shared/ReactFeatureFlags';\n\nimport {\n  FunctionComponent,\n  ClassComponent,\n  IndeterminateComponent,\n  HostRoot,\n  HostPortal,\n  HostComponent,\n  HostText,\n  Fragment,\n  Mode,\n  ContextConsumer,\n  ContextProvider,\n  ForwardRef,\n  Profiler,\n  SuspenseComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  DehydratedFragment,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nexport default function getComponentNameFromFiber(fiber: Fiber): string | null {\n  const {tag, type} = fiber;\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n    case ContextConsumer:\n      const context: ReactContext<any> = (type: any);\n      return getContextName(context) + '.Consumer';\n    case ContextProvider:\n      const provider: ReactProviderType<any> = (type: any);\n      return getContextName(provider._context) + '.Provider';\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n    case Fragment:\n      return 'Fragment';\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n    case HostPortal:\n      return 'Portal';\n    case HostRoot:\n      return 'Root';\n    case HostText:\n      return 'Text';\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n      return 'Mode';\n    case OffscreenComponent:\n      return 'Offscreen';\n    case Profiler:\n      return 'Profiler';\n    case ScopeComponent:\n      return 'Scope';\n    case SuspenseComponent:\n      return 'Suspense';\n    case SuspenseListComponent:\n      return 'SuspenseList';\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    // The display name for this tags come from the user-provided type:\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return (type: any).displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      break;\n    case LegacyHiddenComponent:\n      if (enableLegacyHidden) {\n        return 'LegacyHidden';\n      }\n  }\n\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b00000000000000000000000000;\nexport const PerformedWork = /*                */ 0b00000000000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b00000000000000000000000010;\nexport const Update = /*                       */ 0b00000000000000000000000100;\nexport const Deletion = /*                     */ 0b00000000000000000000001000;\nexport const ChildDeletion = /*                */ 0b00000000000000000000010000;\nexport const ContentReset = /*                 */ 0b00000000000000000000100000;\nexport const Callback = /*                     */ 0b00000000000000000001000000;\nexport const DidCapture = /*                   */ 0b00000000000000000010000000;\nexport const ForceClientRender = /*            */ 0b00000000000000000100000000;\nexport const Ref = /*                          */ 0b00000000000000001000000000;\nexport const Snapshot = /*                     */ 0b00000000000000010000000000;\nexport const Passive = /*                      */ 0b00000000000000100000000000;\nexport const Hydrating = /*                    */ 0b00000000000001000000000000;\nexport const Visibility = /*                   */ 0b00000000000010000000000000;\nexport const StoreConsistency = /*             */ 0b00000000000100000000000000;\n\nexport const LifecycleEffectMask =\n  Passive | Update | Callback | Ref | Snapshot | StoreConsistency;\n\n// Union of all commit flags (flags with the lifetime of a particular commit)\nexport const HostEffectMask = /*               */ 0b00000000000111111111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b00000000001000000000000000;\nexport const ShouldCapture = /*                */ 0b00000000010000000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b00000000100000000000000000;\nexport const DidPropagateContext = /*          */ 0b00000001000000000000000000;\nexport const NeedsPropagation = /*             */ 0b00000010000000000000000000;\nexport const Forked = /*                       */ 0b00000100000000000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const RefStatic = /*                    */ 0b00001000000000000000000000;\nexport const LayoutStatic = /*                 */ 0b00010000000000000000000000;\nexport const PassiveStatic = /*                */ 0b00100000000000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b01000000000000000000000000;\nexport const MountPassiveDev = /*              */ 0b10000000000000000000000000;\n\n// Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nexport const BeforeMutationMask =\n  // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n  // flag logic (see #20043)\n  Update |\n  Snapshot |\n  (enableCreateEventHandleAPI\n    ? // createEventHandle needs to visit deleted and hidden trees to\n      // fire beforeblur\n      // TODO: Only need to visit Deletions during BeforeMutation phase if an\n      // element is focused.\n      ChildDeletion | Visibility\n    : 0);\n\nexport const MutationMask =\n  Placement |\n  Update |\n  ChildDeletion |\n  ContentReset |\n  Ref |\n  Hydrating |\n  Visibility;\nexport const LayoutMask = Update | Callback | Ref | Visibility;\n\n// TODO: Split into PassiveMountMask and PassiveUnmountMask\nexport const PassiveMask = Passive | Visibility | ChildDeletion;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromFiber(ownerFiber) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw new Error(\n            'Child was not found in either parent set. This indicates a bug ' +\n              'in React related to the return pointer. Please file an issue.',\n          );\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw new Error(\n        \"Return fibers should always be each others' alternates. \" +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  if (a.tag !== HostRoot) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    const match = findCurrentHostFiberImpl(child);\n    if (match !== null) {\n      return match;\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberWithNoPortalsImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      const match = findCurrentHostFiberWithNoPortalsImpl(child);\n      if (match !== null) {\n        return match;\n      }\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\ndeclare function isArray(a: mixed): boolean %checks(Array.isArray(a));\n\nconst isArrayImpl = Array.isArray;\n\n// eslint-disable-next-line no-redeclare\nfunction isArray(a: mixed): boolean {\n  return isArrayImpl(a);\n}\n\nexport default isArray;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// This module only exists as an ESM wrapper around the external CommonJS\n// Scheduler dependency. Notice that we're intentionally not using named imports\n// because Rollup would use dynamic dispatch for CommonJS interop named imports.\n// When we switch to ESM, we can delete this module.\nimport * as Scheduler from 'scheduler';\n\nexport const scheduleCallback = Scheduler.unstable_scheduleCallback;\nexport const cancelCallback = Scheduler.unstable_cancelCallback;\nexport const shouldYield = Scheduler.unstable_shouldYield;\nexport const requestPaint = Scheduler.unstable_requestPaint;\nexport const now = Scheduler.unstable_now;\nexport const getCurrentPriorityLevel =\n  Scheduler.unstable_getCurrentPriorityLevel;\nexport const ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nexport const UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nexport const NormalPriority = Scheduler.unstable_NormalPriority;\nexport const LowPriority = Scheduler.unstable_LowPriority;\nexport const IdlePriority = Scheduler.unstable_IdlePriority;\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nexport const unstable_yieldValue = Scheduler.unstable_yieldValue;\nexport const unstable_setDisableYieldValue =\n  Scheduler.unstable_setDisableYieldValue;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {EventPriority} from './ReactEventPriorities.old';\n// import type {DevToolsProfilingHooks} from 'react-devtools-shared/src/backend/types';\n// TODO: This import doesn't work because the DevTools depend on the DOM version of React\n// and to properly type check against DOM React we can't also type check again non-DOM\n// React which this hook might be in.\ntype DevToolsProfilingHooks = any;\n\nimport {\n  getLabelForLane,\n  TotalLanes,\n} from 'react-reconciler/src/ReactFiberLane.old';\nimport {DidCapture} from './ReactFiberFlags';\nimport {\n  consoleManagedByDevToolsDuringStrictMode,\n  enableProfilerTimer,\n  enableSchedulingProfiler,\n} from 'shared/ReactFeatureFlags';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n} from './ReactEventPriorities.old';\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n  unstable_yieldValue,\n  unstable_setDisableYieldValue,\n} from './Scheduler';\nimport {setSuppressWarning} from 'shared/consoleWithStackDev';\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet injectedProfilingHooks: DevToolsProfilingHooks | null = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    if (enableSchedulingProfiler) {\n      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n      // This gives DevTools a way to feature detect that isn't tied to version number\n      // (since profiling and timeline are controlled by different feature flags).\n      internals = {\n        ...internals,\n        getLaneLabelMap,\n        injectProfilingHooks,\n      };\n    }\n\n    rendererID = hook.inject(internals);\n\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(root: FiberRoot, eventPriority: EventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        let schedulerPriority;\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediateSchedulerPriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingSchedulerPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriority = IdleSchedulerPriority;\n            break;\n          default:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n        }\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          schedulerPriority,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onPostCommitRoot(root: FiberRoot) {\n  if (\n    injectedHook &&\n    typeof injectedHook.onPostCommitFiberRoot === 'function'\n  ) {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function setIsStrictModeForDevtools(newIsStrictMode: boolean) {\n  if (consoleManagedByDevToolsDuringStrictMode) {\n    if (typeof unstable_yieldValue === 'function') {\n      // We're in a test because Scheduler.unstable_yieldValue only exists\n      // in SchedulerMock. To reduce the noise in strict mode tests,\n      // suppress warnings and disable scheduler yielding during the double render\n      unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n\n    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n      try {\n        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n      } catch (err) {\n        if (__DEV__) {\n          if (!hasLoggedError) {\n            hasLoggedError = true;\n            console.error(\n              'React instrumentation encountered an error: %s',\n              err,\n            );\n          }\n        }\n      }\n    }\n  } else {\n    if (newIsStrictMode) {\n      disableLogs();\n    } else {\n      reenableLogs();\n    }\n  }\n}\n\n// Profiler API hooks\n\nfunction injectProfilingHooks(profilingHooks: DevToolsProfilingHooks): void {\n  injectedProfilingHooks = profilingHooks;\n}\n\nfunction getLaneLabelMap(): Map<Lane, string> | null {\n  if (enableSchedulingProfiler) {\n    const map: Map<Lane, string> = new Map();\n\n    let lane = 1;\n    for (let index = 0; index < TotalLanes; index++) {\n      const label = ((getLabelForLane(lane): any): string);\n      map.set(lane, label);\n      lane *= 2;\n    }\n\n    return map;\n  } else {\n    return null;\n  }\n}\n\nexport function markCommitStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStarted === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStarted(lanes);\n    }\n  }\n}\n\nexport function markCommitStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStopped === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStopped();\n    }\n  }\n}\n\nexport function markComponentRenderStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentErrored(\n  fiber: Fiber,\n  thrownValue: mixed,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentErrored === 'function'\n    ) {\n      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n    }\n  }\n}\n\nexport function markComponentSuspended(\n  fiber: Fiber,\n  wakeable: Wakeable,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentSuspended === 'function'\n    ) {\n      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStopped();\n    }\n  }\n}\n\nexport function markPassiveEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markPassiveEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStopped();\n    }\n  }\n}\n\nexport function markRenderStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStarted(lanes);\n    }\n  }\n}\n\nexport function markRenderYielded(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderYielded === 'function'\n    ) {\n      injectedProfilingHooks.markRenderYielded();\n    }\n  }\n}\n\nexport function markRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStopped();\n    }\n  }\n}\n\nexport function markRenderScheduled(lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markRenderScheduled(lane);\n    }\n  }\n}\n\nexport function markForceUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markForceUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n    }\n  }\n}\n\nexport function markStateUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markStateUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = /*                         */ 0b000000;\n// TODO: Remove ConcurrentMode by reading from the root tag instead\nexport const ConcurrentMode = /*                 */ 0b000001;\nexport const ProfileMode = /*                    */ 0b000010;\nexport const DebugTracingMode = /*               */ 0b000100;\nexport const StrictLegacyMode = /*               */ 0b001000;\nexport const StrictEffectsMode = /*              */ 0b010000;\nexport const ConcurrentUpdatesByDefaultMode = /* */ 0b100000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\n\nexport const clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(x: number): number {\n  const asUint = x >>> 0;\n  if (asUint === 0) {\n    return 32;\n  }\n  return (31 - ((log(asUint) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\nimport type {ConcurrentUpdate} from './ReactFiberConcurrentUpdates.old';\n\n// TODO: Ideally these types would be opaque but that doesn't work well with\n// our reconciler fork infra, since these leak into non-reconciler packages.\n\nexport type Lanes = number;\nexport type Lane = number;\nexport type LaneMap<T> = Array<T>;\n\nimport {\n  enableSchedulingProfiler,\n  enableUpdaterTracking,\n  allowConcurrentByDefault,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {ConcurrentUpdatesByDefaultMode, NoMode} from './ReactTypeOfMode';\nimport {clz32} from './clz32';\n\n// Lane values below should be kept in sync with getLabelForLane(), used by react-devtools-timeline.\n// If those values are changed that package should be rebuilt and redeployed.\n\nexport const TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\n\nexport const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000010;\nexport const InputContinuousLane: Lane = /*             */ 0b0000000000000000000000000000100;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000001000;\nexport const DefaultLane: Lane = /*                     */ 0b0000000000000000000000000010000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000000100000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111111000000;\nconst TransitionLane1: Lane = /*                        */ 0b0000000000000000000000001000000;\nconst TransitionLane2: Lane = /*                        */ 0b0000000000000000000000010000000;\nconst TransitionLane3: Lane = /*                        */ 0b0000000000000000000000100000000;\nconst TransitionLane4: Lane = /*                        */ 0b0000000000000000000001000000000;\nconst TransitionLane5: Lane = /*                        */ 0b0000000000000000000010000000000;\nconst TransitionLane6: Lane = /*                        */ 0b0000000000000000000100000000000;\nconst TransitionLane7: Lane = /*                        */ 0b0000000000000000001000000000000;\nconst TransitionLane8: Lane = /*                        */ 0b0000000000000000010000000000000;\nconst TransitionLane9: Lane = /*                        */ 0b0000000000000000100000000000000;\nconst TransitionLane10: Lane = /*                       */ 0b0000000000000001000000000000000;\nconst TransitionLane11: Lane = /*                       */ 0b0000000000000010000000000000000;\nconst TransitionLane12: Lane = /*                       */ 0b0000000000000100000000000000000;\nconst TransitionLane13: Lane = /*                       */ 0b0000000000001000000000000000000;\nconst TransitionLane14: Lane = /*                       */ 0b0000000000010000000000000000000;\nconst TransitionLane15: Lane = /*                       */ 0b0000000000100000000000000000000;\nconst TransitionLane16: Lane = /*                       */ 0b0000000001000000000000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000111110000000000000000000000;\nconst RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;\nconst RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;\nconst RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;\nconst RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;\nconst RetryLane5: Lane = /*                             */ 0b0000100000000000000000000000000;\n\nexport const SomeRetryLane: Lane = RetryLane1;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0001000000000000000000000000000;\n\nconst NonIdleLanes: Lanes = /*                          */ 0b0001111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0010000000000000000000000000000;\nexport const IdleLane: Lane = /*                        */ 0b0100000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\n// This function is used for the experimental timeline (react-devtools-timeline)\n// It should be kept in sync with the Lanes values above.\nexport function getLabelForLane(lane: Lane): string | void {\n  if (enableSchedulingProfiler) {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\n\nexport const NoTimestamp = -1;\n\nlet nextTransitionLane: Lane = TransitionLane1;\nlet nextRetryLane: Lane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n    case InputContinuousLane:\n      return InputContinuousLane;\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n    case DefaultLane:\n      return DefaultLane;\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n    case IdleLane:\n      return IdleLane;\n    case OffscreenLane:\n      return OffscreenLane;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n      return lanes;\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n  const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n  if (nonIdlePendingLanes !== NoLanes) {\n    const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    const unblockedLanes = pendingLanes & ~suspendedLanes;\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    const nextLane = getHighestPriorityLane(nextLanes);\n    const wipLane = getHighestPriorityLane(wipLanes);\n    if (\n      // Tests whether the next lane is equal or lower priority than the wip\n      // one. This works because the bits decrease in priority as you go left.\n      nextLane >= wipLane ||\n      // Default priority updates should not interrupt transition updates. The\n      // only difference between default updates and transition updates is that\n      // default updates do not support refresh transitions.\n      (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\n    ) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Do nothing, use the lanes as they were assigned.\n  } else if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function includesSyncLane(lanes: Lanes) {\n  return (lanes & SyncLane) !== NoLanes;\n}\n\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyNonUrgentLanes(lanes: Lanes) {\n  const UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n  return (lanes & UrgentLanes) === NoLanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\nexport function includesBlockingLane(root: FiberRoot, lanes: Lanes) {\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Concurrent updates by default always use time slicing.\n    return false;\n  }\n  const SyncDefaultLanes =\n    InputContinuousHydrationLane |\n    InputContinuousLane |\n    DefaultHydrationLane |\n    DefaultLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\n\nexport function includesExpiredLane(root: FiberRoot, lanes: Lanes) {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\n\nexport function isTransitionLane(lane: Lane) {\n  return (lane & TransitionLanes) !== NoLanes;\n}\n\nexport function claimNextTransitionLane(): Lane {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  const lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n    nextTransitionLane = TransitionLane1;\n  }\n  return lane;\n}\n\nexport function claimNextRetryLane(): Lane {\n  const lane = nextRetryLane;\n  nextRetryLane <<= 1;\n  if ((nextRetryLane & RetryLanes) === NoLanes) {\n    nextRetryLane = RetryLane1;\n  }\n  return lane;\n}\n\nexport function getHighestPriorityLane(lanes: Lanes): Lane {\n  return lanes & -lanes;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\nexport function intersectLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a & b;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n  return laneMap;\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = NoLanes;\n  root.pingedLanes = NoLanes;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n  const hiddenUpdates = root.hiddenUpdates;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    const hiddenUpdatesForLane = hiddenUpdates[index];\n    if (hiddenUpdatesForLane !== null) {\n      hiddenUpdates[index] = null;\n      // \"Hidden\" updates are updates that were made to a hidden component. They\n      // have special logic associated with them because they may be entangled\n      // with updates that occur outside that tree. But once the outer tree\n      // commits, they behave like regular updates.\n      for (let i = 0; i < hiddenUpdatesForLane.length; i++) {\n        const update = hiddenUpdatesForLane[i];\n        if (update !== null) {\n          update.lane &= ~OffscreenLane;\n        }\n      }\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n\n  const rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n  const entanglements = root.entanglements;\n  let lanes = rootEntangledLanes;\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    if (\n      // Is this one of the newly entangled lanes?\n      (lane & entangledLanes) |\n      // Is this lane transitively entangled with the newly entangled lanes?\n      (entanglements[index] & entangledLanes)\n    ) {\n      entanglements[index] |= entangledLanes;\n    }\n    lanes &= ~lane;\n  }\n}\n\nexport function markHiddenUpdate(\n  root: FiberRoot,\n  update: ConcurrentUpdate,\n  lane: Lane,\n) {\n  const index = laneToIndex(lane);\n  const hiddenUpdates = root.hiddenUpdates;\n  const hiddenUpdatesForLane = hiddenUpdates[index];\n  if (hiddenUpdatesForLane === null) {\n    hiddenUpdates[index] = [update];\n  } else {\n    hiddenUpdatesForLane.push(update);\n  }\n  update.lane = lane | OffscreenLane;\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  const renderLane = getHighestPriorityLane(renderLanes);\n\n  let lane;\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nexport function addFiberToLanesMap(\n  root: FiberRoot,\n  fiber: Fiber,\n  lanes: Lanes | Lane,\n) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n\n    lanes &= ~lane;\n  }\n}\n\nexport function movePendingFibersToMemoized(root: FiberRoot, lanes: Lanes) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  const memoizedUpdaters = root.memoizedUpdaters;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    if (updaters.size > 0) {\n      updaters.forEach(fiber => {\n        const alternate = fiber.alternate;\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nexport function addTransitionToLanesMap(\n  root: FiberRoot,\n  transition: Transition,\n  lane: Lane,\n) {\n  if (enableTransitionTracing) {\n    const transitionLanesMap = root.transitionLanes;\n    const index = laneToIndex(lane);\n    let transitions = transitionLanesMap[index];\n    if (transitions === null) {\n      transitions = new Set();\n    }\n    transitions.add(transition);\n\n    transitionLanesMap[index] = transitions;\n  }\n}\n\nexport function getTransitionsForLanes(\n  root: FiberRoot,\n  lanes: Lane | Lanes,\n): Array<Transition> | null {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  const transitionsForLanes = [];\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      transitions.forEach(transition => {\n        transitionsForLanes.push(transition);\n      });\n    }\n\n    lanes &= ~lane;\n  }\n\n  if (transitionsForLanes.length === 0) {\n    return null;\n  }\n\n  return transitionsForLanes;\n}\n\nexport function clearTransitionsForLanes(root: FiberRoot, lanes: Lane | Lanes) {\n  if (!enableTransitionTracing) {\n    return;\n  }\n\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      root.transitionLanes[index] = null;\n    }\n\n    lanes &= ~lane;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  SyncLane,\n  InputContinuousLane,\n  DefaultLane,\n  IdleLane,\n  getHighestPriorityLane,\n  includesNonIdleWork,\n} from './ReactFiberLane.old';\n\nexport opaque type EventPriority = Lane;\n\nexport const DiscreteEventPriority: EventPriority = SyncLane;\nexport const ContinuousEventPriority: EventPriority = InputContinuousLane;\nexport const DefaultEventPriority: EventPriority = DefaultLane;\nexport const IdleEventPriority: EventPriority = IdleLane;\n\nlet currentUpdatePriority: EventPriority = NoLane;\n\nexport function getCurrentUpdatePriority(): EventPriority {\n  return currentUpdatePriority;\n}\n\nexport function setCurrentUpdatePriority(newPriority: EventPriority) {\n  currentUpdatePriority = newPriority;\n}\n\nexport function runWithPriority<T>(priority: EventPriority, fn: () => T): T {\n  const previousPriority = currentUpdatePriority;\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\n\nexport function higherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a !== 0 && a < b ? a : b;\n}\n\nexport function lowerEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a === 0 || a > b ? a : b;\n}\n\nexport function isHigherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): boolean {\n  return a !== 0 && a < b;\n}\n\nexport function lanesToEventPriority(lanes: Lanes): EventPriority {\n  const lane = getHighestPriorityLane(lanes);\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n  return IdleEventPriority;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  throw new Error(\n    'The current renderer does not support hydration. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Hydration (when unsupported)\nexport type SuspenseInstance = mixed;\nexport const supportsHydration = false;\nexport const canHydrateInstance = shim;\nexport const canHydrateTextInstance = shim;\nexport const canHydrateSuspenseInstance = shim;\nexport const isSuspenseInstancePending = shim;\nexport const isSuspenseInstanceFallback = shim;\nexport const getSuspenseInstanceFallbackErrorDetails = shim;\nexport const registerSuspenseInstanceRetry = shim;\nexport const getNextHydratableSibling = shim;\nexport const getFirstHydratableChild = shim;\nexport const getFirstHydratableChildWithinContainer = shim;\nexport const getFirstHydratableChildWithinSuspenseInstance = shim;\nexport const hydrateInstance = shim;\nexport const hydrateTextInstance = shim;\nexport const hydrateSuspenseInstance = shim;\nexport const getNextHydratableInstanceAfterSuspenseInstance = shim;\nexport const commitHydratedContainer = shim;\nexport const commitHydratedSuspenseInstance = shim;\nexport const clearSuspenseBoundary = shim;\nexport const clearSuspenseBoundaryFromContainer = shim;\nexport const shouldDeleteUnhydratedTailInstances = shim;\nexport const didNotMatchHydratedContainerTextInstance = shim;\nexport const didNotMatchHydratedTextInstance = shim;\nexport const didNotHydrateInstanceWithinContainer = shim;\nexport const didNotHydrateInstanceWithinSuspenseInstance = shim;\nexport const didNotHydrateInstance = shim;\nexport const didNotFindHydratableInstanceWithinContainer = shim;\nexport const didNotFindHydratableTextInstanceWithinContainer = shim;\nexport const didNotFindHydratableSuspenseInstanceWithinContainer = shim;\nexport const didNotFindHydratableInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableTextInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableInstance = shim;\nexport const didNotFindHydratableTextInstance = shim;\nexport const didNotFindHydratableSuspenseInstance = shim;\nexport const errorHydratingContainer = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport isArray from 'shared/isArray';\nimport {DefaultEventPriority} from 'react-reconciler/src/ReactEventPriorities';\n\nexport type Type = string;\nexport type Props = Object;\nexport type Container = {|\n  children: Array<Instance | TextInstance>,\n  createNodeMock: Function,\n  tag: 'CONTAINER',\n|};\nexport type Instance = {|\n  type: string,\n  props: Object,\n  isHidden: boolean,\n  children: Array<Instance | TextInstance>,\n  internalInstanceHandle: Object,\n  rootContainerInstance: Container,\n  tag: 'INSTANCE',\n|};\nexport type TextInstance = {|\n  text: string,\n  isHidden: boolean,\n  tag: 'TEXT',\n|};\nexport type HydratableInstance = Instance | TextInstance;\nexport type PublicInstance = Instance | TextInstance;\nexport type HostContext = Object;\nexport type UpdatePayload = Object;\nexport type ChildSet = void; // Unused\nexport type TimeoutHandle = TimeoutID;\nexport type NoTimeout = -1;\nexport type EventResponder = any;\n\nexport type RendererInspectionConfig = $ReadOnly<{||}>;\n\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoPersistence';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoHydration';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoMicrotasks';\n\nconst NO_CONTEXT = {};\nconst UPDATE_SIGNAL = {};\nconst nodeToInstanceMap = new WeakMap();\n\nif (__DEV__) {\n  Object.freeze(NO_CONTEXT);\n  Object.freeze(UPDATE_SIGNAL);\n}\n\nexport function getPublicInstance(inst: Instance | TextInstance): * {\n  switch (inst.tag) {\n    case 'INSTANCE':\n      const createNodeMock = inst.rootContainerInstance.createNodeMock;\n      const mockNode = createNodeMock({\n        type: inst.type,\n        props: inst.props,\n      });\n      if (typeof mockNode === 'object' && mockNode !== null) {\n        nodeToInstanceMap.set(mockNode, inst);\n      }\n      return mockNode;\n    default:\n      return inst;\n  }\n}\n\nexport function appendChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  if (__DEV__) {\n    if (!isArray(parentInstance.children)) {\n      console.error(\n        'An invalid container has been provided. ' +\n          'This may indicate that another renderer is being used in addition to the test renderer. ' +\n          '(For example, ReactDOM.createPortal inside of a ReactTestRenderer tree.) ' +\n          'This is not supported.',\n      );\n    }\n  }\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function insertBefore(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n  beforeChild: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  const beforeIndex = parentInstance.children.indexOf(beforeChild);\n  parentInstance.children.splice(beforeIndex, 0, child);\n}\n\nexport function removeChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  parentInstance.children.splice(index, 1);\n}\n\nexport function clearContainer(container: Container): void {\n  container.children.splice(0);\n}\n\nexport function getRootHostContext(\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function getChildHostContext(\n  parentHostContext: HostContext,\n  type: string,\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function prepareForCommit(containerInfo: Container): null | Object {\n  // noop\n  return null;\n}\n\nexport function resetAfterCommit(containerInfo: Container): void {\n  // noop\n}\n\nexport function createInstance(\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): Instance {\n  return {\n    type,\n    props,\n    isHidden: false,\n    children: [],\n    internalInstanceHandle,\n    rootContainerInstance,\n    tag: 'INSTANCE',\n  };\n}\n\nexport function appendInitialChild(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function finalizeInitialChildren(\n  testElement: Instance,\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): boolean {\n  return false;\n}\n\nexport function prepareUpdate(\n  testElement: Instance,\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): null | {...} {\n  return UPDATE_SIGNAL;\n}\n\nexport function shouldSetTextContent(type: string, props: Props): boolean {\n  return false;\n}\n\nexport function createTextInstance(\n  text: string,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): TextInstance {\n  return {\n    text,\n    isHidden: false,\n    tag: 'TEXT',\n  };\n}\n\nexport function getCurrentEventPriority(): * {\n  return DefaultEventPriority;\n}\n\nexport const isPrimaryRenderer = false;\nexport const warnsIfNotActing = true;\n\nexport const scheduleTimeout = setTimeout;\nexport const cancelTimeout = clearTimeout;\n\nexport const noTimeout = -1;\n\n// -------------------\n//     Mutation\n// -------------------\n\nexport const supportsMutation = true;\n\nexport function commitUpdate(\n  instance: Instance,\n  updatePayload: {...},\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  instance.type = type;\n  instance.props = newProps;\n}\n\nexport function commitMount(\n  instance: Instance,\n  type: string,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  // noop\n}\n\nexport function commitTextUpdate(\n  textInstance: TextInstance,\n  oldText: string,\n  newText: string,\n): void {\n  textInstance.text = newText;\n}\n\nexport function resetTextContent(testElement: Instance): void {\n  // noop\n}\n\nexport const appendChildToContainer = appendChild;\nexport const insertInContainerBefore = insertBefore;\nexport const removeChildFromContainer = removeChild;\n\nexport function hideInstance(instance: Instance): void {\n  instance.isHidden = true;\n}\n\nexport function hideTextInstance(textInstance: TextInstance): void {\n  textInstance.isHidden = true;\n}\n\nexport function unhideInstance(instance: Instance, props: Props): void {\n  instance.isHidden = false;\n}\n\nexport function unhideTextInstance(\n  textInstance: TextInstance,\n  text: string,\n): void {\n  textInstance.isHidden = false;\n}\n\nexport function getInstanceFromNode(mockNode: Object) {\n  const instance = nodeToInstanceMap.get(mockNode);\n  if (instance !== undefined) {\n    return instance.internalInstanceHandle;\n  }\n  return null;\n}\n\nexport function beforeActiveInstanceBlur(internalInstanceHandle: Object) {\n  // noop\n}\n\nexport function afterActiveInstanceBlur() {\n  // noop\n}\n\nexport function preparePortalMount(portalInstance: Instance): void {\n  // noop\n}\n\nexport function prepareScopeUpdate(scopeInstance: Object, inst: Object): void {\n  nodeToInstanceMap.set(scopeInstance, inst);\n}\n\nexport function getInstanceFromScope(scopeInstance: Object): null | Object {\n  return nodeToInstanceMap.get(scopeInstance) || null;\n}\n\nexport function detachDeletedInstance(node: Instance): void {\n  // noop\n}\n\nexport function logRecoverableError(error: mixed): void {\n  // noop\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  enableComponentStackLocations,\n  disableNativeComponentFrames,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (disableNativeComponentFrames || !fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      // TODO(luna): This will currently only throw if the function component\n      // tries to access React/ReactDOM/props. We should probably make this throw\n      // in simple components too\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                let frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n                if (fn.displayName && frame.includes('<anonymous>')) {\n                  frame = frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw new Error(\n        'Unexpected context found on stack. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error(\n          `${getComponentNameFromFiber(fiber) ||\n            'Unknown'}.getChildContext(): key \"${contextKey}\" is not defined in childContextTypes.`,\n        );\n      }\n    }\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw new Error(\n        'Expected to have an instance by this point. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n      throw new Error(\n        'Expected subtree parent to be a mounted class component. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n\n    throw new Error(\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1;\n\nexport const LegacyRoot = 0;\nexport const ConcurrentRoot = 1;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, OffscreenMode, Wakeable} from 'shared/ReactTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SpawnedCachePool} from './ReactFiberCacheComponent.new';\nimport type {\n  Transition,\n  TracingMarkerInstance,\n} from './ReactFiberTracingMarkerComponent.new';\n\nexport type OffscreenProps = {|\n  // TODO: Pick an API before exposing the Offscreen type. I've chosen an enum\n  // for now, since we might have multiple variants. For example, hiding the\n  // content without changing the layout.\n  //\n  // Default mode is visible. Kind of a weird default for a component\n  // called \"Offscreen.\" Possible alt: <Visibility />?\n  mode?: OffscreenMode | null | void,\n  children?: ReactNodeList,\n|};\n\n// We use the existence of the state object as an indicator that the component\n// is hidden.\nexport type OffscreenState = {|\n  // TODO: This doesn't do anything, yet. It's always NoLanes. But eventually it\n  // will represent the pending work that must be included in the render in\n  // order to unhide the component.\n  baseLanes: Lanes,\n  cachePool: SpawnedCachePool | null,\n|};\n\nexport type OffscreenQueue = {|\n  transitions: Array<Transition> | null,\n  markerInstances: Array<TracingMarkerInstance> | null,\n  wakeables: Set<Wakeable> | null,\n|};\n\ntype OffscreenVisibility = number;\n\nexport const OffscreenVisible = /*                     */ 0b01;\nexport const OffscreenPassiveEffectsConnected = /*     */ 0b10;\n\nexport type OffscreenInstance = {|\n  visibility: OffscreenVisibility,\n  pendingMarkers: Set<TracingMarkerInstance> | null,\n  transitions: Set<Transition> | null,\n  retryCache: WeakSet<Wakeable> | Set<Wakeable> | null,\n|};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {SchedulerCallback} from './Scheduler';\n\nimport {\n  DiscreteEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n} from './ReactEventPriorities.old';\nimport {ImmediatePriority, scheduleCallback} from './Scheduler';\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet includesLegacySyncCallbacks: boolean = false;\nlet isFlushingSyncQueue: boolean = false;\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\n\nexport function scheduleLegacySyncCallback(callback: SchedulerCallback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\n\nexport function flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\n\nexport function flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    const previousUpdatePriority = getCurrentUpdatePriority();\n    try {\n      const isSync = true;\n      const queue = syncQueue;\n      // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n      setCurrentUpdatePriority(DiscreteEventPriority);\n      for (; i < queue.length; i++) {\n        let callback = queue[i];\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      }\n      // Resume flushing in the next tick\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootState} from './ReactFiberRoot.new';\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nexport function isRootDehydrated(root: FiberRoot) {\n  const currentState: RootState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Ids are base 32 strings whose binary representation corresponds to the\n// position of a node in a tree.\n\n// Every time the tree forks into multiple children, we add additional bits to\n// the left of the sequence that represent the position of the child within the\n// current level of children.\n//\n//      00101       00010001011010101\n//      ╰─┬─╯       ╰───────┬───────╯\n//   Fork 5 of 20       Parent id\n//\n// The leading 0s are important. In the above example, you only need 3 bits to\n// represent slot 5. However, you need 5 bits to represent all the forks at\n// the current level, so we must account for the empty bits at the end.\n//\n// For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n// the zeroth id at a level would be indistinguishable from its parent.\n//\n// If a node has only one child, and does not materialize an id (i.e. does not\n// contain a useId hook), then we don't need to allocate any space in the\n// sequence. It's treated as a transparent indirection. For example, these two\n// trees produce the same ids:\n//\n// <>                          <>\n//   <Indirection>               <A />\n//     <A />                     <B />\n//   </Indirection>            </>\n//   <B />\n// </>\n//\n// However, we cannot skip any node that materializes an id. Otherwise, a parent\n// id that does not fork would be indistinguishable from its child id. For\n// example, this tree does not fork, but the parent and child must have\n// different ids.\n//\n// <Parent>\n//   <Child />\n// </Parent>\n//\n// To handle this scenario, every time we materialize an id, we allocate a\n// new level with a single slot. You can think of this as a fork with only one\n// prong, or an array of children with length 1.\n//\n// It's possible for the size of the sequence to exceed 32 bits, the max\n// size for bitwise operations. When this happens, we make more room by\n// converting the right part of the id to a string and storing it in an overflow\n// variable. We use a base 32 string representation, because 32 is the largest\n// power of 2 that is supported by toString(). We want the base to be large so\n// that the resulting ids are compact, and we want the base to be a power of 2\n// because every log2(base) bits corresponds to a single character, i.e. every\n// log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n// affecting the final result.\n\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {clz32} from './clz32';\nimport {Forked, NoFlags} from './ReactFiberFlags';\n\nexport type TreeContext = {\n  id: number,\n  overflow: string,\n};\n\n// TODO: Use the unified fiber stack module instead of this local one?\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\nconst forkStack: Array<any> = [];\nlet forkStackIndex: number = 0;\nlet treeForkProvider: Fiber | null = null;\nlet treeForkCount: number = 0;\n\nconst idStack: Array<any> = [];\nlet idStackIndex: number = 0;\nlet treeContextProvider: Fiber | null = null;\nlet treeContextId: number = 1;\nlet treeContextOverflow: string = '';\n\nexport function isForkedChild(workInProgress: Fiber): boolean {\n  warnIfNotHydrating();\n  return (workInProgress.flags & Forked) !== NoFlags;\n}\n\nexport function getForksAtLevel(workInProgress: Fiber): number {\n  warnIfNotHydrating();\n  return treeForkCount;\n}\n\nexport function getTreeId(): string {\n  const overflow = treeContextOverflow;\n  const idWithLeadingBit = treeContextId;\n  const id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\n\nexport function pushTreeFork(\n  workInProgress: Fiber,\n  totalChildren: number,\n): void {\n  // This is called right after we reconcile an array (or iterator) of child\n  // fibers, because that's the only place where we know how many children in\n  // the whole set without doing extra work later, or storing addtional\n  // information on the fiber.\n  //\n  // That's why this function is separate from pushTreeId — it's called during\n  // the render phase of the fork parent, not the child, which is where we push\n  // the other context values.\n  //\n  // In the Fizz implementation this is much simpler because the child is\n  // rendered in the same callstack as the parent.\n  //\n  // It might be better to just add a `forks` field to the Fiber type. It would\n  // make this module simpler.\n\n  warnIfNotHydrating();\n\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\n\nexport function pushTreeId(\n  workInProgress: Fiber,\n  totalChildren: number,\n  index: number,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextProvider = workInProgress;\n\n  const baseIdWithLeadingBit = treeContextId;\n  const baseOverflow = treeContextOverflow;\n\n  // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n  const baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  const baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n\n  const slot = index + 1;\n  const length = getBitLength(totalChildren) + baseLength;\n\n  // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    const numberOfOverflowBits = baseLength - (baseLength % 5);\n\n    // Then create a bitmask that selects only those bits.\n    const newOverflowBits = (1 << numberOfOverflowBits) - 1;\n\n    // Select the bits, and convert them to a base 32 string.\n    const newOverflow = (baseId & newOverflowBits).toString(32);\n\n    // Now we can remove those bits from the base id.\n    const restOfBaseId = baseId >> numberOfOverflowBits;\n    const restOfBaseLength = baseLength - numberOfOverflowBits;\n\n    // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n    const restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    const restOfNewBits = slot << restOfBaseLength;\n    const id = restOfNewBits | restOfBaseId;\n    const overflow = newOverflow + baseOverflow;\n\n    treeContextId = (1 << restOfLength) | id;\n    treeContextOverflow = overflow;\n  } else {\n    // Normal path\n    const newBits = slot << baseLength;\n    const id = newBits | baseId;\n    const overflow = baseOverflow;\n\n    treeContextId = (1 << length) | id;\n    treeContextOverflow = overflow;\n  }\n}\n\nexport function pushMaterializedTreeId(workInProgress: Fiber) {\n  warnIfNotHydrating();\n\n  // This component materialized an id. This will affect any ids that appear\n  // in its children.\n  const returnFiber = workInProgress.return;\n  if (returnFiber !== null) {\n    const numberOfForks = 1;\n    const slotIndex = 0;\n    pushTreeFork(workInProgress, numberOfForks);\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\n  }\n}\n\nfunction getBitLength(number: number): number {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id: number) {\n  return 1 << (getBitLength(id) - 1);\n}\n\nexport function popTreeContext(workInProgress: Fiber) {\n  // Restore the previous values.\n\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\n\nexport function getSuspendedTreeContext(): TreeContext | null {\n  warnIfNotHydrating();\n  if (treeContextProvider !== null) {\n    return {\n      id: treeContextId,\n      overflow: treeContextOverflow,\n    };\n  } else {\n    return null;\n  }\n}\n\nexport function restoreSuspendedTreeContext(\n  workInProgress: Fiber,\n  suspendedContext: TreeContext,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextId = suspendedContext.id;\n  treeContextOverflow = suspendedContext.overflow;\n  treeContextProvider = workInProgress;\n}\n\nfunction warnIfNotHydrating() {\n  if (__DEV__) {\n    if (!getIsHydrating()) {\n      console.error(\n        'Expected to be hydrating. This is a bug in React. Please file ' +\n          'an issue.',\n      );\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport {NoMode, ConcurrentMode} from './ReactTypeOfMode';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {TreeContext} from './ReactFiberTreeContext.old';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {\n  ChildDeletion,\n  Placement,\n  Hydrating,\n  NoFlags,\n  DidCapture,\n} from './ReactFiberFlags';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  getFirstHydratableChildWithinContainer,\n  getFirstHydratableChildWithinSuspenseInstance,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  shouldDeleteUnhydratedTailInstances,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateInstanceWithinContainer,\n  didNotHydrateInstanceWithinSuspenseInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableInstanceWithinContainer,\n  didNotFindHydratableTextInstanceWithinContainer,\n  didNotFindHydratableSuspenseInstanceWithinContainer,\n  didNotFindHydratableInstanceWithinSuspenseInstance,\n  didNotFindHydratableTextInstanceWithinSuspenseInstance,\n  didNotFindHydratableSuspenseInstanceWithinSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {OffscreenLane} from './ReactFiberLane.old';\nimport {\n  getSuspendedTreeContext,\n  restoreSuspendedTreeContext,\n} from './ReactFiberTreeContext.old';\nimport {queueRecoverableErrors} from './ReactFiberWorkLoop.old';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\n// This flag allows for warning supression when we expect there to be mismatches\n// due to earlier mismatches or a suspended fiber.\nlet didSuspendOrErrorDEV: boolean = false;\n\n// Hydration errors that were thrown inside this boundary\nlet hydrationErrors: Array<CapturedValue<mixed>> | null = null;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nexport function markDidThrowWhileHydratingDEV() {\n  if (__DEV__) {\n    didSuspendOrErrorDEV = true;\n  }\n}\n\nexport function didSuspendOrErrorWhileHydratingDEV() {\n  if (__DEV__) {\n    return didSuspendOrErrorDEV;\n  }\n  return false;\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance: Container = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChildWithinContainer(\n    parentInstance,\n  );\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n  treeContext: TreeContext | null,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(\n    suspenseInstance,\n  );\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n  return true;\n}\n\nfunction warnUnhydratedInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        didNotHydrateInstanceWithinContainer(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      }\n      case HostComponent: {\n        const isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n          // TODO: Delete this argument when we remove the legacy root API.\n          isConcurrentMode,\n        );\n        break;\n      }\n      case SuspenseComponent: {\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\n        if (suspenseState.dehydrated !== null)\n          didNotHydrateInstanceWithinSuspenseInstance(\n            suspenseState.dehydrated,\n            instance,\n          );\n        break;\n      }\n    }\n  }\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  warnUnhydratedInstance(returnFiber, instance);\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n\n  const deletions = returnFiber.deletions;\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction warnNonhydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  if (__DEV__) {\n    if (didSuspendOrErrorDEV) {\n      // Inside a boundary that already suspended. We're currently rendering the\n      // siblings of a suspended node. The mismatch may be due to the missing\n      // data, so it's probably a false positive.\n      return;\n    }\n\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstanceWithinContainer(\n              parentContainer,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstanceWithinContainer(\n              parentContainer,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstanceWithinContainer(\n              parentContainer,\n            );\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent: {\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            const isConcurrentMode =\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n              // TODO: Delete this argument when we remove the legacy root API.\n              isConcurrentMode,\n            );\n            break;\n          }\n          case HostText: {\n            const text = fiber.pendingProps;\n            const isConcurrentMode =\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n              // TODO: Delete this argument when we remove the legacy root API.\n              isConcurrentMode,\n            );\n            break;\n          }\n          case SuspenseComponent: {\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n          }\n        }\n        break;\n      }\n      case SuspenseComponent: {\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\n        const parentInstance = suspenseState.dehydrated;\n        if (parentInstance !== null)\n          switch (fiber.tag) {\n            case HostComponent:\n              const type = fiber.type;\n              const props = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinSuspenseInstance(\n                parentInstance,\n                type,\n                props,\n              );\n              break;\n            case HostText:\n              const text = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinSuspenseInstance(\n                parentInstance,\n                text,\n              );\n              break;\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(\n                parentInstance,\n              );\n              break;\n          }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  warnNonhydratedInstance(returnFiber, fiber);\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        hydrationParentFiber = fiber;\n        nextHydratableInstance = getFirstHydratableChild(instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        hydrationParentFiber = fiber;\n        // Text Instances don't have children so there's nothing to hydrate.\n        nextHydratableInstance = null;\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n        nextInstance,\n      );\n      if (suspenseInstance !== null) {\n        const suspenseState: SuspenseState = {\n          dehydrated: suspenseInstance,\n          treeContext: getSuspendedTreeContext(),\n          retryLane: OffscreenLane,\n        };\n        fiber.memoizedState = suspenseState;\n        // Store the dehydrated fragment as a child fiber.\n        // This simplifies the code for getHostSibling and deleting nodes,\n        // since it doesn't have to consider all Suspense boundaries and\n        // check if they're dehydrated ones or not.\n        const dehydratedFragment = createFiberFromDehydratedFragment(\n          suspenseInstance,\n        );\n        dehydratedFragment.return = fiber;\n        fiber.child = dehydratedFragment;\n        hydrationParentFiber = fiber;\n        // While a Suspense Instance does have children, we won't step into\n        // it during the first pass. Instead, we'll reenter it later.\n        nextHydratableInstance = null;\n        return true;\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction shouldClientRenderOnMismatch(fiber: Fiber) {\n  return (\n    (fiber.mode & ConcurrentMode) !== NoMode &&\n    (fiber.flags & DidCapture) === NoFlags\n  );\n}\n\nfunction throwOnHydrationMismatch(fiber: Fiber) {\n  throw new Error(\n    'Hydration failed because the initial UI does not match what was ' +\n      'rendered on the server.',\n  );\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\n      throwOnHydrationMismatch(fiber);\n    }\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\n      throwOnHydrationMismatch(fiber);\n    }\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    const prevHydrationParentFiber: Fiber = (hydrationParentFiber: any);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n  }\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n    shouldWarnIfMismatchDev,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  const shouldUpdate = hydrateTextInstance(\n    textInstance,\n    textContent,\n    fiber,\n    shouldWarnIfMismatchDev,\n  );\n  if (shouldUpdate) {\n    // We assume that prepareToHydrateHostTextInstance is called in a context where the\n    // hydration parent is the parent host component of this host text.\n    const returnFiber = hydrationParentFiber;\n    if (returnFiber !== null) {\n      switch (returnFiber.tag) {\n        case HostRoot: {\n          const parentContainer = returnFiber.stateNode.containerInfo;\n          const isConcurrentMode =\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotMatchHydratedContainerTextInstance(\n            parentContainer,\n            textInstance,\n            textContent,\n            // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode,\n            shouldWarnIfMismatchDev,\n          );\n          break;\n        }\n        case HostComponent: {\n          const parentType = returnFiber.type;\n          const parentProps = returnFiber.memoizedProps;\n          const parentInstance = returnFiber.stateNode;\n          const isConcurrentMode =\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotMatchHydratedTextInstance(\n            parentType,\n            parentProps,\n            parentInstance,\n            textInstance,\n            textContent,\n            // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode,\n            shouldWarnIfMismatchDev,\n          );\n          break;\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n  if (\n    fiber.tag !== HostRoot &&\n    (fiber.tag !== HostComponent ||\n      (shouldDeleteUnhydratedTailInstances(fiber.type) &&\n        !shouldSetTextContent(fiber.type, fiber.memoizedProps)))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    if (nextInstance) {\n      if (shouldClientRenderOnMismatch(fiber)) {\n        warnIfUnhydratedTailNodes(fiber);\n        throwOnHydrationMismatch(fiber);\n      } else {\n        while (nextInstance) {\n          deleteHydratableInstance(fiber, nextInstance);\n          nextInstance = getNextHydratableSibling(nextInstance);\n        }\n      }\n    }\n  }\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction hasUnhydratedTailNodes() {\n  return isHydrating && nextHydratableInstance !== null;\n}\n\nfunction warnIfUnhydratedTailNodes(fiber: Fiber) {\n  let nextInstance = nextHydratableInstance;\n  while (nextInstance) {\n    warnUnhydratedInstance(fiber, nextInstance);\n    nextInstance = getNextHydratableSibling(nextInstance);\n  }\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n  didSuspendOrErrorDEV = false;\n}\n\nexport function upgradeHydrationErrorsToRecoverable(): void {\n  if (hydrationErrors !== null) {\n    // Successfully completed a forced client render. The errors that occurred\n    // during the hydration attempt are now recovered. We will log them in\n    // commit phase, once the entire tree has finished.\n    queueRecoverableErrors(hydrationErrors);\n    hydrationErrors = null;\n  }\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport function queueHydrationError(error: CapturedValue<mixed>): void {\n  if (hydrationErrors === null) {\n    hydrationErrors = [error];\n  } else {\n    hydrationErrors.push(error);\n  }\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  hasUnhydratedTailNodes,\n  warnIfUnhydratedTailNodes,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.new';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = null;\n\nexport function requestCurrentTransition(): Transition | null {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\nimport hasOwnProperty from './hasOwnProperty';\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    const currentKey = keysA[i];\n    if (\n      !hasOwnProperty.call(objB, currentKey) ||\n      !is(objA[currentKey], objB[currentKey])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber | null) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack =\n      fiber === null ? null : getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function getCurrentFiber(): Fiber | null {\n  if (__DEV__) {\n    return current;\n  }\n  return null;\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\n\ntype FiberArray = Array<Fiber>;\ntype FiberToFiberComponentsMap = Map<Fiber, FiberArray>;\n\nconst ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings(fiber: Fiber, instance: any): void {},\n  flushPendingUnsafeLifecycleWarnings(): void {},\n  recordLegacyContextWarning(fiber: Fiber, instance: any): void {},\n  flushLegacyContextWarning(): void {},\n  discardPendingWarnings(): void {},\n};\n\nif (__DEV__) {\n  const findStrictRoot = (fiber: Fiber): Fiber | null => {\n    let maybeStrictRoot = null;\n\n    let node = fiber;\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  const setToSortedString = set => {\n    const array = [];\n    set.forEach(value => {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  let pendingComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingComponentWillUpdateWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillUpdateWarnings: Array<Fiber> = [];\n\n  // Tracks components we have already warned about.\n  const didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (\n      typeof instance.componentWillMount === 'function' &&\n      // Don't warn about react-lifecycles-compat polyfilled components.\n      instance.componentWillMount.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillMount === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillReceiveProps === 'function' &&\n      instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillUpdate === 'function' &&\n      instance.componentWillUpdate.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillUpdate === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = () => {\n    // We do an initial pass to gather component names\n    const componentWillMountUniqueNames = new Set();\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(fiber => {\n        componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    const UNSAFE_componentWillMountUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(fiber => {\n        UNSAFE_componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    const componentWillReceivePropsUniqueNames = new Set();\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(fiber => {\n        componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    const UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(fiber => {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    const componentWillUpdateUniqueNames = new Set();\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(fiber => {\n        componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    const UNSAFE_componentWillUpdateUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(fiber => {\n        UNSAFE_componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    }\n\n    // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillMountUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillReceivePropsUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, \" +\n          'refactor your code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillUpdateUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillMountUniqueNames);\n\n      console.warn(\n        'componentWillMount has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        componentWillReceivePropsUniqueNames,\n      );\n\n      console.warn(\n        'componentWillReceiveProps has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, refactor your \" +\n          'code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillUpdateUniqueNames);\n\n      console.warn(\n        'componentWillUpdate has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n  };\n\n  let pendingLegacyContextWarning: FiberToFiberComponentsMap = new Map();\n\n  // Tracks components we have already warned about.\n  const didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    const strictRoot = findStrictRoot(fiber);\n    if (strictRoot === null) {\n      console.error(\n        'Expected to find a StrictMode component in a strict mode tree. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n      return;\n    }\n\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    let warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (\n      fiber.type.contextTypes != null ||\n      fiber.type.childContextTypes != null ||\n      (instance !== null && typeof instance.getChildContext === 'function')\n    ) {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = () => {\n    ((pendingLegacyContextWarning: any): FiberToFiberComponentsMap).forEach(\n      (fiberArray: FiberArray, strictRoot) => {\n        if (fiberArray.length === 0) {\n          return;\n        }\n        const firstFiber = fiberArray[0];\n\n        const uniqueNames = new Set();\n        fiberArray.forEach(fiber => {\n          uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n          didWarnAboutLegacyContext.add(fiber.type);\n        });\n\n        const sortedNames = setToSortedString(uniqueNames);\n\n        try {\n          setCurrentDebugFiberInDEV(firstFiber);\n          console.error(\n            'Legacy context API has been detected within a strict-mode tree.' +\n              '\\n\\nThe old API will be supported in all 16.x releases, but applications ' +\n              'using it should migrate to the new version.' +\n              '\\n\\nPlease update the following components: %s' +\n              '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context',\n            sortedNames,\n          );\n        } finally {\n          resetCurrentDebugFiberInDEV();\n        }\n      },\n    );\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = () => {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\nexport default ReactStrictModeWarnings;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value: mixed): string {\n  if (__DEV__) {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    const hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    const type =\n      (hasToStringTag && (value: any)[Symbol.toStringTag]) ||\n      (value: any).constructor.name ||\n      'Object';\n    return type;\n  }\n}\n\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction willCoercionThrow(value: mixed): boolean {\n  if (__DEV__) {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value: mixed) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + (value: any);\n}\n\nexport function checkAttributeStringCoercion(\n  value: mixed,\n  attributeName: string,\n) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided `%s` attribute is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        attributeName,\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkKeyStringCoercion(value: mixed) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided key is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkPropStringCoercion(value: mixed, propName: string) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided `%s` prop is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        propName,\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkCSSPropertyStringCoercion(value: mixed, propName: string) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided `%s` CSS property is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        propName,\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkHtmlStringCoercion(value: mixed) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided HTML markup uses a value of unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkFormFieldValueStringCoercion(value: mixed) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'Form field values (value, checked, defaultValue, or defaultChecked props)' +\n          ' must be strings, not %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport assign from 'shared/assign';\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\nimport type {\n  Fiber,\n  ContextDependency,\n  Dependencies,\n} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SharedQueue} from './ReactFiberClassUpdateQueue.old';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  NoFlags,\n  DidPropagateContext,\n  NeedsPropagation,\n} from './ReactFiberFlags';\n\nimport is from 'shared/objectIs';\nimport {createUpdate, ForceUpdate} from './ReactFiberClassUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  enableLazyContextPropagation,\n  enableServerContext,\n} from 'shared/ReactFeatureFlags';\nimport {REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED} from 'shared/ReactSymbols';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastFullyObservedContext: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(\n  providerFiber: Fiber,\n  context: ReactContext<T>,\n  nextValue: T,\n): void {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(\n  context: ReactContext<any>,\n  providerFiber: Fiber,\n): void {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n  if (isPrimaryRenderer) {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue = context._defaultValue;\n    } else {\n      context._currentValue = currentValue;\n    }\n  } else {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue2 = context._defaultValue;\n    } else {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\n\nexport function scheduleContextWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n  propagationRoot: Fiber,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated.\n      // Normally, this would mean that the rest of the\n      // ancestor path already has sufficient priority.\n      // However, this is not necessarily true inside offscreen\n      // or fallback trees because childLanes may be inconsistent\n      // with the surroundings. This is why we continue the loop.\n    }\n    if (node === propagationRoot) {\n      break;\n    }\n    node = node.return;\n  }\n  if (__DEV__) {\n    if (node !== propagationRoot) {\n      console.error(\n        'Expected to find the propagation root when scheduling context work. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n\nexport function propagateContextChange<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  if (enableLazyContextPropagation) {\n    // TODO: This path is only used by Cache components. Update\n    // lazilyPropagateParentContextChanges to look for Cache components so they\n    // can take advantage of lazy propagation.\n    const forcePropagateEntireTree = true;\n    propagateContextChanges(\n      workInProgress,\n      [context],\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  } else {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  // Only used by eager implementation\n  if (enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n\n            // Inlined `enqueueUpdate` to remove interleaved update check\n            const updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n              // Only occurs if the fiber has been unmounted.\n            } else {\n              const sharedQueue: SharedQueue<any> = (updateQueue: any).shared;\n              const pending = sharedQueue.pending;\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleContextWorkOnParentPath(\n            fiber.return,\n            renderLanes,\n            workInProgress,\n          );\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nfunction propagateContextChanges<T>(\n  workInProgress: Fiber,\n  contexts: Array<any>,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n): void {\n  // Only used by lazy implementation\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dep = list.firstContext;\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context: ReactContext<T> = contexts[i];\n          // Check if the context matches.\n          // TODO: Compare selected values to bail out early.\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleContextWorkOnParentPath(\n              consumer.return,\n              renderLanes,\n              workInProgress,\n            );\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            }\n\n            // Since we already found a match, we can stop traversing the\n            // dependency list.\n            break findChangedDep;\n          }\n        }\n        dep = dependency.next;\n      }\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\nexport function propagateParentContextChangesToDeferredTree(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\nfunction propagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n) {\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n\n  // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n  let contexts = null;\n  let parent = workInProgress;\n  let isInsidePropagationBailout = false;\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n\n      if (currentParent === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      const oldProps = currentParent.memoizedProps;\n      if (oldProps !== null) {\n        const providerType: ReactProviderType<any> = parent.type;\n        const context: ReactContext<any> = providerType._context;\n\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    }\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(\n      workInProgress,\n      contexts,\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  }\n\n  // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them —\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred — that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(currentDependencies: Dependencies) {\n  if (!enableLazyContextPropagation) {\n    return false;\n  }\n  // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n  let dependency = currentDependencies.firstContext;\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer\n      ? context._currentValue\n      : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n    dependency = dependency.next;\n  }\n  return false;\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    if (enableLazyContextPropagation) {\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    } else {\n      const firstContext = dependencies.firstContext;\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        }\n        // Reset the work-in-progress list\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\n\nexport function readContext<T>(context: ReactContext<T>): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  const value = isPrimaryRenderer\n    ? context._currentValue\n    : context._currentValue2;\n\n  if (lastFullyObservedContext === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else {\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      memoizedValue: value,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error(\n          'Context can only be read while React is rendering. ' +\n            'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n            'In function components, you can read it directly in the function body, but not ' +\n            'inside Hooks like useReducer() or useMemo().',\n        );\n      }\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n      };\n      if (enableLazyContextPropagation) {\n        currentlyRenderingFiber.flags |= NeedsPropagation;\n      }\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  UpdateQueue as HookQueue,\n  Update as HookUpdate,\n} from './ReactFiberHooks.old';\nimport type {\n  SharedQueue as ClassQueue,\n  Update as ClassUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {OffscreenInstance} from './ReactFiberOffscreenComponent';\n\nimport {\n  warnAboutUpdateOnNotYetMountedFiberInDEV,\n  throwIfInfiniteUpdateLoopDetected,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoLane,\n  NoLanes,\n  mergeLanes,\n  markHiddenUpdate,\n} from './ReactFiberLane.old';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\nimport {HostRoot, OffscreenComponent} from './ReactWorkTags';\nimport {OffscreenVisible} from './ReactFiberOffscreenComponent';\n\nexport type ConcurrentUpdate = {\n  next: ConcurrentUpdate,\n  lane: Lane,\n};\n\ntype ConcurrentQueue = {\n  pending: ConcurrentUpdate | null,\n};\n\n// If a render is in progress, and we receive an update from a concurrent event,\n// we wait until the current render is over (either finished or interrupted)\n// before adding it to the fiber/hook queue. Push to this array so we can\n// access the queue, fiber, update, et al later.\nconst concurrentQueues: Array<any> = [];\nlet concurrentQueuesIndex = 0;\n\nlet concurrentlyUpdatedLanes: Lanes = NoLanes;\n\nexport function finishQueueingConcurrentUpdates(): void {\n  const endIndex = concurrentQueuesIndex;\n  concurrentQueuesIndex = 0;\n\n  concurrentlyUpdatedLanes = NoLanes;\n\n  let i = 0;\n  while (i < endIndex) {\n    const fiber: Fiber = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const queue: ConcurrentQueue = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const update: ConcurrentUpdate = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const lane: Lane = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n\n    if (queue !== null && update !== null) {\n      const pending = queue.pending;\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n      queue.pending = update;\n    }\n\n    if (lane !== NoLane) {\n      markUpdateLaneFromFiberToRoot(fiber, update, lane);\n    }\n  }\n}\n\nexport function getConcurrentlyUpdatedLanes(): Lanes {\n  return concurrentlyUpdatedLanes;\n}\n\nfunction enqueueUpdate(\n  fiber: Fiber,\n  queue: ConcurrentQueue | null,\n  update: ConcurrentUpdate | null,\n  lane: Lane,\n) {\n  // Don't update the `childLanes` on the return path yet. If we already in\n  // the middle of rendering, wait until after it has completed.\n  concurrentQueues[concurrentQueuesIndex++] = fiber;\n  concurrentQueues[concurrentQueuesIndex++] = queue;\n  concurrentQueues[concurrentQueuesIndex++] = update;\n  concurrentQueues[concurrentQueuesIndex++] = lane;\n\n  concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane);\n\n  // The fiber's `lane` field is used in some places to check if any work is\n  // scheduled, to perform an eager bailout, so we need to update it immediately.\n  // TODO: We should probably move this to the \"shared\" queue instead.\n  fiber.lanes = mergeLanes(fiber.lanes, lane);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n}\n\nexport function enqueueConcurrentHookUpdate<S, A>(\n  fiber: Fiber,\n  queue: HookQueue<S, A>,\n  update: HookUpdate<S, A>,\n  lane: Lane,\n): FiberRoot | null {\n  const concurrentQueue: ConcurrentQueue = (queue: any);\n  const concurrentUpdate: ConcurrentUpdate = (update: any);\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\n  return getRootForUpdatedFiber(fiber);\n}\n\nexport function enqueueConcurrentHookUpdateAndEagerlyBailout<S, A>(\n  fiber: Fiber,\n  queue: HookQueue<S, A>,\n  update: HookUpdate<S, A>,\n): void {\n  // This function is used to queue an update that doesn't need a rerender. The\n  // only reason we queue it is in case there's a subsequent higher priority\n  // update that causes it to be rebased.\n  const lane = NoLane;\n  const concurrentQueue: ConcurrentQueue = (queue: any);\n  const concurrentUpdate: ConcurrentUpdate = (update: any);\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\n}\n\nexport function enqueueConcurrentClassUpdate<State>(\n  fiber: Fiber,\n  queue: ClassQueue<State>,\n  update: ClassUpdate<State>,\n  lane: Lane,\n): FiberRoot | null {\n  const concurrentQueue: ConcurrentQueue = (queue: any);\n  const concurrentUpdate: ConcurrentUpdate = (update: any);\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\n  return getRootForUpdatedFiber(fiber);\n}\n\nexport function enqueueConcurrentRenderForLane(\n  fiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  enqueueUpdate(fiber, null, null, lane);\n  return getRootForUpdatedFiber(fiber);\n}\n\n// Calling this function outside this module should only be done for backwards\n// compatibility and should always be accompanied by a warning.\nexport function unsafe_markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // NOTE: For Hyrum's Law reasons, if an infinite update loop is detected, it\n  // should throw before `markUpdateLaneFromFiberToRoot` is called. But this is\n  // undefined behavior and we can change it if we need to; it just so happens\n  // that, at the time of this writing, there's an internal product test that\n  // happens to rely on this.\n  const root = getRootForUpdatedFiber(sourceFiber);\n  markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);\n  return root;\n}\n\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  update: ConcurrentUpdate | null,\n  lane: Lane,\n): void {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  // Walk the parent path to the root and update the child lanes.\n  let isHidden = false;\n  let parent = sourceFiber.return;\n  let node = sourceFiber;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    }\n\n    if (parent.tag === OffscreenComponent) {\n      // Check if this offscreen boundary is currently hidden.\n      //\n      // The instance may be null if the Offscreen parent was unmounted. Usually\n      // the parent wouldn't be reachable in that case because we disconnect\n      // fibers from the tree when they are deleted. However, there's a weird\n      // edge case where setState is called on a fiber that was interrupted\n      // before it ever mounted. Because it never mounts, it also never gets\n      // deleted. Because it never gets deleted, its return pointer never gets\n      // disconnected. Which means it may be attached to a deleted Offscreen\n      // parent node. (This discovery suggests it may be better for memory usage\n      // if we don't attach the `return` pointer until the commit phase, though\n      // in order to do that we'd need some other way to track the return\n      // pointer during the initial render, like on the stack.)\n      //\n      // This case is always accompanied by a warning, but we still need to\n      // account for it. (There may be other cases that we haven't discovered,\n      // too.)\n      const offscreenInstance: OffscreenInstance | null = parent.stateNode;\n      if (\n        offscreenInstance !== null &&\n        !(offscreenInstance.visibility & OffscreenVisible)\n      ) {\n        isHidden = true;\n      }\n    }\n\n    node = parent;\n    parent = parent.return;\n  }\n\n  if (isHidden && update !== null && node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    markHiddenUpdate(root, update, lane);\n  }\n}\n\nfunction getRootForUpdatedFiber(sourceFiber: Fiber): FiberRoot | null {\n  // TODO: We will detect and infinite update loop and throw even if this fiber\n  // has already unmounted. This isn't really necessary but it happens to be the\n  // current behavior we've used for several release cycles. Consider not\n  // performing this check if the updated fiber already unmounted, since it's\n  // not possible for that to cause an infinite update loop.\n  throwIfInfiniteUpdateLoopDetected();\n\n  // When a setState happens, we must ensure the root is scheduled. Because\n  // update queues do not have a backpointer to the root, the only way to do\n  // this currently is to walk up the return path. This used to not be a big\n  // deal because we would have to walk up the return path to set\n  // the `childLanes`, anyway, but now those two traversals happen at\n  // different times.\n  // TODO: Consider adding a `root` backpointer on the update queue.\n  detectUpdateOnUnmountedFiber(sourceFiber, sourceFiber);\n  let node = sourceFiber;\n  let parent = node.return;\n  while (parent !== null) {\n    detectUpdateOnUnmountedFiber(sourceFiber, node);\n    node = parent;\n    parent = node.return;\n  }\n  return node.tag === HostRoot ? (node.stateNode: FiberRoot) : null;\n}\n\nfunction detectUpdateOnUnmountedFiber(sourceFiber: Fiber, parent: Fiber) {\n  if (__DEV__) {\n    const alternate = parent.alternate;\n    if (\n      alternate === null &&\n      (parent.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  NoLanes,\n  OffscreenLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  isTransitionLane,\n  intersectLanes,\n  markRootEntangled,\n} from './ReactFiberLane.old';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {\n  Callback,\n  Visibility,\n  ShouldCapture,\n  DidCapture,\n} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  markSkippedUpdateLanes,\n  isUnsafeClassRenderPhaseUpdate,\n  getWorkInProgressRootRenderLanes,\n} from './ReactFiberWorkLoop.old';\nimport {\n  enqueueConcurrentClassUpdate,\n  unsafe_markUpdateLaneFromFiberToRoot,\n} from './ReactFiberConcurrentUpdates.old';\nimport {setIsStrictModeForDevtools} from './ReactFiberDevToolsHook.old';\n\nimport assign from 'shared/assign';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\nexport type SharedQueue<State> = {|\n  pending: Update<State> | null,\n  lanes: Lanes,\n  hiddenCallbacks: Array<() => mixed> | null,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  callbacks: Array<() => mixed> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      lanes: NoLanes,\n      hiddenCallbacks: null,\n    },\n    callbacks: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      callbacks: null,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(\n  fiber: Fiber,\n  update: Update<State>,\n  lane: Lane,\n): FiberRoot | null {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return null;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n\n  if (isUnsafeClassRenderPhaseUpdate(fiber)) {\n    // This is an unsafe render phase update. Add directly to the update\n    // queue so we can process it immediately during the current render.\n    const pending = sharedQueue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    sharedQueue.pending = update;\n\n    // Update the childLanes even though we're most likely already rendering\n    // this fiber. This is for backwards compatibility in the case where you\n    // update a different component during render phase than the one that is\n    // currently renderings (a pattern that is accompanied by a warning).\n    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n  } else {\n    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n  }\n}\n\nexport function entangleTransitions(root: FiberRoot, fiber: Fiber, lane: Lane) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<mixed> = (updateQueue: any).shared;\n  if (isTransitionLane(lane)) {\n    let queueLanes = sharedQueue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            // When this update is rebased, we should not fire its\n            // callback again.\n            callback: null,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        callbacks: currentQueue.callbacks,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      // TODO: Don't need this field anymore\n      const updateEventTime = update.eventTime;\n\n      // An extra OffscreenLane bit is added to updates that were made to\n      // a hidden tree, so that we can distinguish them from updates that were\n      // already there when the tree was hidden.\n      const updateLane = removeLanes(update.lane, OffscreenLane);\n      const isHiddenUpdate = updateLane !== update.lane;\n\n      // Check if this update was made while the tree was hidden. If so, then\n      // it's not a \"base\" update and we should disregard the extra base lanes\n      // that were added to renderLanes when we entered the Offscreen tree.\n      const shouldSkipUpdate = isHiddenUpdate\n        ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\n        : !isSubsetOfLanes(renderLanes, updateLane);\n\n      if (shouldSkipUpdate) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n\n            // When this update is rebased, we should not fire its\n            // callback again.\n            callback: null,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (callback !== null) {\n          workInProgress.flags |= Callback;\n          if (isHiddenUpdate) {\n            workInProgress.flags |= Visibility;\n          }\n          const callbacks = queue.callbacks;\n          if (callbacks === null) {\n            queue.callbacks = [callback];\n          } else {\n            callbacks.push(callback);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    }\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (typeof callback !== 'function') {\n    throw new Error(\n      'Invalid argument passed as callback. Expected a function. Instead ' +\n        `received: ${callback}`,\n    );\n  }\n\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function deferHiddenCallbacks<State>(\n  updateQueue: UpdateQueue<State>,\n): void {\n  // When an update finishes on a hidden component, its callback should not\n  // be fired until/unless the component is made visible again. Stash the\n  // callback on the shared queue object so it can be fired later.\n  const newHiddenCallbacks = updateQueue.callbacks;\n  if (newHiddenCallbacks !== null) {\n    const existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n    if (existingHiddenCallbacks === null) {\n      updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;\n    } else {\n      updateQueue.shared.hiddenCallbacks = existingHiddenCallbacks.concat(\n        newHiddenCallbacks,\n      );\n    }\n  }\n}\n\nexport function commitHiddenCallbacks<State>(\n  updateQueue: UpdateQueue<State>,\n  context: any,\n): void {\n  // This component is switching from hidden -> visible. Commit any callbacks\n  // that were previously deferred.\n  const hiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n  if (hiddenCallbacks !== null) {\n    updateQueue.shared.hiddenCallbacks = null;\n    for (let i = 0; i < hiddenCallbacks.length; i++) {\n      const callback = hiddenCallbacks[i];\n      callCallback(callback, context);\n    }\n  }\n}\n\nexport function commitCallbacks<State>(\n  updateQueue: UpdateQueue<State>,\n  context: any,\n): void {\n  const callbacks = updateQueue.callbacks;\n  if (callbacks !== null) {\n    updateQueue.callbacks = null;\n    for (let i = 0; i < callbacks.length; i++) {\n      const callback = callbacks[i];\n      callCallback(callback, context);\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport * as React from 'react';\nimport {\n  LayoutStatic,\n  MountLayoutDev,\n  Update,\n  Snapshot,\n} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport assign from 'shared/assign';\nimport isArray from 'shared/isArray';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  DebugTracingMode,\n  NoMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  entangleTransitions,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactFiberClassUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook.old';\n\nconst fakeInternalInstance = {};\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentNameFromType(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      throw new Error(\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n  let partialState = getDerivedStateFromProps(nextProps, prevState);\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    let shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(\n            newProps,\n            newState,\n            nextContext,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentNameFromType(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentNameFromType(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentNameFromType(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentNameFromType(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentNameFromType(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  let instance = new ctor(props, context);\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentNameFromType(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentNameFromFiber(workInProgress) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentNameFromFiber(workInProgress) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    let fiberFlags: Flags = Update | LayoutStatic;\n    if (\n      __DEV__ &&\n      enableStrictEffects &&\n      (workInProgress.mode & StrictEffectsMode) !== NoMode\n    ) {\n      fiberFlags |= MountLayoutDev;\n    }\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update | LayoutStatic;\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update | LayoutStatic;\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update | LayoutStatic;\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing() &&\n    !(\n      enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies)\n    )\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    ) ||\n    // TODO: In some cases, we'll end up checking if context has changed twice,\n    // both before and after `shouldComponentUpdate` has been called. Not ideal,\n    // but I'm loath to refactor this function. This only happens for memoized\n    // components so it's not that common.\n    (enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies));\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {Placement, ChildDeletion, Forked} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\nimport {ClassComponent, HostText, HostPortal, Fragment} from './ReactWorkTags';\nimport isArray from 'shared/isArray';\nimport {warnAboutStringRefs} from 'shared/ReactFeatureFlags';\nimport {checkPropStringCoercion} from 'shared/CheckStringCoercion';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {pushTreeFork} from './ReactFiberTreeContext.old';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n\n    if (typeof child._store !== 'object') {\n      throw new Error(\n        'React Component in warnForMissingKey should have a _store. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    child._store.validated = true;\n\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName =\n          getComponentNameFromFiber(returnFiber) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n\n        if (ownerFiber.tag !== ClassComponent) {\n          throw new Error(\n            'Function components cannot have string refs. ' +\n              'We recommend using useRef() instead. ' +\n              'Learn more about using refs safely here: ' +\n              'https://reactjs.org/link/strict-mode-string-ref',\n          );\n        }\n\n        inst = ownerFiber.stateNode;\n      }\n\n      if (!inst) {\n        throw new Error(\n          `Missing owner for string ref ${mixedRef}. This error is likely caused by a ` +\n            'bug in React. Please file an issue.',\n        );\n      }\n      // Assigning this to a const so Flow knows it won't change in the closure\n      const resolvedInst = inst;\n\n      if (__DEV__) {\n        checkPropStringCoercion(mixedRef, 'ref');\n      }\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = resolvedInst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = resolvedInst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      if (typeof mixedRef !== 'string') {\n        throw new Error(\n          'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n        );\n      }\n\n      if (!element._owner) {\n        throw new Error(\n          `Element ref was specified as a string (${mixedRef}) but no owner was set. This could happen for one of` +\n            ' the following reasons:\\n' +\n            '1. You may be adding a ref to a function component\\n' +\n            \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n            '3. You have multiple copies of React loaded\\n' +\n            'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        );\n      }\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  const childString = Object.prototype.toString.call(newChild);\n\n  throw new Error(\n    `Objects are not valid as a React child (found: ${\n      childString === '[object Object]'\n        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n        : childString\n    }). ` +\n      'If you meant to render a collection of children, use an array ' +\n      'instead.',\n  );\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  const payload = lazyType._payload;\n  const init = lazyType._init;\n  return init(payload);\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const elementType = element.type;\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(\n        returnFiber,\n        current,\n        element.props.children,\n        lanes,\n        element.key,\n      );\n    }\n    if (current !== null) {\n      if (\n        current.elementType === elementType ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__\n          ? isCompatibleFamilyForHotReloading(current, element)\n          : false) ||\n        // Lazy types should reconcile their resolved type.\n        // We need to do this after the Hot Reloading check above,\n        // because hot reloading has different semantics than prod because\n        // it doesn't resuspend. So we can't let the call below suspend.\n        (typeof elementType === 'object' &&\n          elementType !== null &&\n          elementType.$$typeof === REACT_LAZY_TYPE &&\n          resolveLazy(elementType) === current.type)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return createChild(returnFiber, init(payload), lanes);\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return updateFromMap(\n            existingChildren,\n            returnFiber,\n            newIdx,\n            init(payload),\n            lanes,\n          );\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          const payload = child._payload;\n          const init = (child._init: any);\n          warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n          break;\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw new Error(\n        'An object is not an iterable. This error is likely caused by a bug in ' +\n          'React. Please file an issue.',\n      );\n    }\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        const elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        } else {\n          if (\n            child.elementType === elementType ||\n            // Keep this check inline so it only runs on the false path:\n            (__DEV__\n              ? isCompatibleFamilyForHotReloading(child, element)\n              : false) ||\n            // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            (typeof elementType === 'object' &&\n              elementType !== null &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              resolveLazy(elementType) === child.type)\n          ) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props);\n            existing.ref = coerceRef(returnFiber, child, element);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          // TODO: This function is supposed to be non-recursive.\n          return reconcileChildFibers(\n            returnFiber,\n            currentFirstChild,\n            init(payload),\n            lanes,\n          );\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw new Error('Resuming work not yet implemented.');\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  if (c === NO_CONTEXT) {\n    throw new Error(\n      'Expected host context to exist. This error is likely caused by a bug ' +\n        'in React. Please file an issue.',\n    );\n  }\n\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nimport {getRenderLanes, setRenderLanes} from './ReactFiberWorkLoop.old';\nimport {NoLanes, mergeLanes} from './ReactFiberLane.old';\n\n// TODO: Remove `renderLanes` context in favor of hidden context\ntype HiddenContext = {\n  // Represents the lanes that must be included when processing updates in\n  // order to reveal the hidden content.\n  // TODO: Remove `subtreeLanes` context from work loop in favor of this one.\n  baseLanes: number,\n};\n\n// TODO: This isn't being used yet, but it's intended to replace the\n// InvisibleParentContext that is currently managed by SuspenseContext.\nexport const currentTreeHiddenStackCursor: StackCursor<HiddenContext | null> = createCursor(\n  null,\n);\nexport const prevRenderLanesStackCursor: StackCursor<Lanes> = createCursor(\n  NoLanes,\n);\n\nexport function pushHiddenContext(fiber: Fiber, context: HiddenContext): void {\n  const prevRenderLanes = getRenderLanes();\n  push(prevRenderLanesStackCursor, prevRenderLanes, fiber);\n  push(currentTreeHiddenStackCursor, context, fiber);\n\n  // When rendering a subtree that's currently hidden, we must include all\n  // lanes that would have rendered if the hidden subtree hadn't been deferred.\n  // That is, in order to reveal content from hidden -> visible, we must commit\n  // all the updates that we skipped when we originally hid the tree.\n  setRenderLanes(mergeLanes(prevRenderLanes, context.baseLanes));\n}\n\nexport function reuseHiddenContextOnStack(fiber: Fiber): void {\n  // This subtree is not currently hidden, so we don't need to add any lanes\n  // to the render lanes. But we still need to push something to avoid a\n  // context mismatch. Reuse the existing context on the stack.\n  push(prevRenderLanesStackCursor, getRenderLanes(), fiber);\n  push(\n    currentTreeHiddenStackCursor,\n    currentTreeHiddenStackCursor.current,\n    fiber,\n  );\n}\n\nexport function popHiddenContext(fiber: Fiber): void {\n  // Restore the previous render lanes from the stack\n  setRenderLanes(prevRenderLanesStackCursor.current);\n\n  pop(currentTreeHiddenStackCursor, fiber);\n  pop(prevRenderLanesStackCursor, fiber);\n}\n\nexport function isCurrentTreeHidden() {\n  return currentTreeHiddenStackCursor.current !== null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {enableSuspenseAvoidThisFallback} from 'shared/ReactFeatureFlags';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {isCurrentTreeHidden} from './ReactFiberHiddenContext.old';\nimport {SuspenseComponent, OffscreenComponent} from './ReactWorkTags';\n\n// The Suspense handler is the boundary that should capture if something\n// suspends, i.e. it's the nearest `catch` block on the stack.\nconst suspenseHandlerStackCursor: StackCursor<Fiber | null> = createCursor(\n  null,\n);\n\nfunction shouldAvoidedBoundaryCapture(\n  workInProgress: Fiber,\n  handlerOnStack: Fiber,\n  props: any,\n): boolean {\n  if (enableSuspenseAvoidThisFallback) {\n    // If the parent is already showing content, and we're not inside a hidden\n    // tree, then we should show the avoided fallback.\n    if (handlerOnStack.alternate !== null && !isCurrentTreeHidden()) {\n      return true;\n    }\n\n    // If the handler on the stack is also an avoided boundary, then we should\n    // favor this inner one.\n    if (\n      handlerOnStack.tag === SuspenseComponent &&\n      handlerOnStack.memoizedProps.unstable_avoidThisFallback === true\n    ) {\n      return true;\n    }\n\n    // If this avoided boundary is dehydrated, then it should capture.\n    const suspenseState: SuspenseState | null = workInProgress.memoizedState;\n    if (suspenseState !== null && suspenseState.dehydrated !== null) {\n      return true;\n    }\n  }\n\n  // If none of those cases apply, then we should avoid this fallback and show\n  // the outer one instead.\n  return false;\n}\n\nexport function pushPrimaryTreeSuspenseHandler(handler: Fiber): void {\n  const props = handler.pendingProps;\n  const handlerOnStack = suspenseHandlerStackCursor.current;\n  if (\n    enableSuspenseAvoidThisFallback &&\n    props.unstable_avoidThisFallback === true &&\n    handlerOnStack !== null &&\n    !shouldAvoidedBoundaryCapture(handler, handlerOnStack, props)\n  ) {\n    // This boundary should not capture if something suspends. Reuse the\n    // existing handler on the stack.\n    push(suspenseHandlerStackCursor, handlerOnStack, handler);\n  } else {\n    // Push this handler onto the stack.\n    push(suspenseHandlerStackCursor, handler, handler);\n  }\n}\n\nexport function pushFallbackTreeSuspenseHandler(fiber: Fiber): void {\n  // We're about to render the fallback. If something in the fallback suspends,\n  // it's akin to throwing inside of a `catch` block. This boundary should not\n  // capture. Reuse the existing handler on the stack.\n  reuseSuspenseHandlerOnStack(fiber);\n}\n\nexport function pushOffscreenSuspenseHandler(fiber: Fiber): void {\n  if (fiber.tag === OffscreenComponent) {\n    push(suspenseHandlerStackCursor, fiber, fiber);\n  } else {\n    // This is a LegacyHidden component.\n    reuseSuspenseHandlerOnStack(fiber);\n  }\n}\n\nexport function reuseSuspenseHandlerOnStack(fiber: Fiber) {\n  push(suspenseHandlerStackCursor, getSuspenseHandler(), fiber);\n}\n\nexport function getSuspenseHandler(): Fiber | null {\n  return suspenseHandlerStackCursor.current;\n}\n\nexport function popSuspenseHandler(fiber: Fiber): void {\n  pop(suspenseHandlerStackCursor, fiber);\n}\n\n// SuspenseList context\n// TODO: Move to a separate module? We may change the SuspenseList\n// implementation to hide/show in the commit phase, anyway.\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseListContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseListContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseListContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function pushSuspenseListContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseListContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {TreeContext} from './ReactFiberTreeContext.old';\n\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n  unstable_name?: string,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  treeContext: null | TreeContext,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n|};\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*   */ 0b0000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b0001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Insertion = /*  */ 0b0010;\nexport const Layout = /*    */ 0b0100;\nexport const Passive = /*   */ 0b1000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\n\nimport {enableCache} from 'shared/ReactFeatureFlags';\nimport {REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\n\nimport {pushProvider, popProvider} from './ReactFiberNewContext.old';\nimport * as Scheduler from 'scheduler';\n\n// In environments without AbortController (e.g. tests)\n// replace it with a lightweight shim that only has the features we use.\nconst AbortControllerLocal = enableCache\n  ? typeof AbortController !== 'undefined'\n    ? AbortController\n    : (function AbortControllerShim() {\n        const listeners = [];\n        const signal = (this.signal = {\n          aborted: false,\n          addEventListener: (type, listener) => {\n            listeners.push(listener);\n          },\n        });\n\n        this.abort = () => {\n          signal.aborted = true;\n          listeners.forEach(listener => listener());\n        };\n      }: AbortController)\n  : (null: any);\n\nexport type Cache = {|\n  controller: AbortControllerLocal,\n  data: Map<() => mixed, mixed>,\n  refCount: number,\n|};\n\nexport type CacheComponentState = {|\n  +parent: Cache,\n  +cache: Cache,\n|};\n\nexport type SpawnedCachePool = {|\n  +parent: Cache,\n  +pool: Cache,\n|};\n\n// Intentionally not named imports because Rollup would\n// use dynamic dispatch for CommonJS interop named imports.\nconst {\n  unstable_scheduleCallback: scheduleCallback,\n  unstable_NormalPriority: NormalPriority,\n} = Scheduler;\n\nexport const CacheContext: ReactContext<Cache> = enableCache\n  ? {\n      $$typeof: REACT_CONTEXT_TYPE,\n      // We don't use Consumer/Provider for Cache components. So we'll cheat.\n      Consumer: (null: any),\n      Provider: (null: any),\n      // We'll initialize these at the root.\n      _currentValue: (null: any),\n      _currentValue2: (null: any),\n      _threadCount: 0,\n      _defaultValue: (null: any),\n      _globalName: (null: any),\n    }\n  : (null: any);\n\nif (__DEV__ && enableCache) {\n  CacheContext._currentRenderer = null;\n  CacheContext._currentRenderer2 = null;\n}\n\n// Creates a new empty Cache instance with a ref-count of 0. The caller is responsible\n// for retaining the cache once it is in use (retainCache), and releasing the cache\n// once it is no longer needed (releaseCache).\nexport function createCache(): Cache {\n  if (!enableCache) {\n    return (null: any);\n  }\n  const cache: Cache = {\n    controller: new AbortControllerLocal(),\n    data: new Map(),\n    refCount: 0,\n  };\n\n  return cache;\n}\n\nexport function retainCache(cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  if (__DEV__) {\n    if (cache.controller.signal.aborted) {\n      console.warn(\n        'A cache instance was retained after it was already freed. ' +\n          'This likely indicates a bug in React.',\n      );\n    }\n  }\n  cache.refCount++;\n}\n\n// Cleanup a cache instance, potentially freeing it if there are no more references\nexport function releaseCache(cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  cache.refCount--;\n  if (__DEV__) {\n    if (cache.refCount < 0) {\n      console.warn(\n        'A cache instance was released after it was already freed. ' +\n          'This likely indicates a bug in React.',\n      );\n    }\n  }\n  if (cache.refCount === 0) {\n    scheduleCallback(NormalPriority, () => {\n      cache.controller.abort();\n    });\n  }\n}\n\nexport function pushCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  pushProvider(workInProgress, CacheContext, cache);\n}\n\nexport function popCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  popProvider(CacheContext, workInProgress);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n  StartTransitionOptions,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher, HookType} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  enableCache,\n  enableUseRefAccessWarning,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableUseMutableSource,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  SyncLane,\n  OffscreenLane,\n  NoLanes,\n  isSubsetOfLanes,\n  includesBlockingLane,\n  includesOnlyNonUrgentLanes,\n  claimNextTransitionLane,\n  mergeLanes,\n  removeLanes,\n  intersectLanes,\n  isTransitionLane,\n  markRootEntangled,\n  markRootMutableRead,\n  NoTimestamp,\n} from './ReactFiberLane.old';\nimport {\n  ContinuousEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  higherEventPriority,\n} from './ReactEventPriorities.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {HostRoot, CacheComponent} from './ReactWorkTags';\nimport {\n  LayoutStatic as LayoutStaticEffect,\n  MountLayoutDev as MountLayoutDevEffect,\n  MountPassiveDev as MountPassiveDevEffect,\n  Passive as PassiveEffect,\n  PassiveStatic as PassiveStaticEffect,\n  StaticMask as StaticMaskEffect,\n  Update as UpdateEffect,\n  StoreConsistency,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n  Insertion as HookInsertion,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  getWorkInProgressRootRenderLanes,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  markSkippedUpdateLanes,\n} from './ReactFiberWorkLoop.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport is from 'shared/objectIs';\nimport isArray from 'shared/isArray';\nimport {\n  markWorkInProgressReceivedUpdate,\n  checkIfWorkInProgressReceivedUpdate,\n} from './ReactFiberBeginWork.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './ReactFiberDevToolsHook.old';\nimport {createCache, CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createUpdate as createLegacyQueueUpdate,\n  enqueueUpdate as enqueueLegacyQueueUpdate,\n  entangleTransitions as entangleLegacyQueueTransitions,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  enqueueConcurrentHookUpdate,\n  enqueueConcurrentHookUpdateAndEagerlyBailout,\n  enqueueConcurrentRenderForLane,\n} from './ReactFiberConcurrentUpdates.old';\nimport {getTreeId} from './ReactFiberTreeContext.old';\nimport {now} from './Scheduler';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport type Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  hasEagerState: boolean,\n  eagerState: S | null,\n  next: Update<S, A>,\n|};\n\nexport type UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  lanes: Lanes,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnUncachedGetSnapshot;\nif (__DEV__) {\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: any,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\ntype StoreInstance<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\ntype StoreConsistencyCheck<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\nexport type FunctionComponentUpdateQueue = {|\n  lastEffect: Effect | null,\n  stores: Array<StoreConsistencyCheck<any>> | null,\n|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n// Counts the number of useId hooks in this component.\nlet localIdCounter: number = 0;\n// Used for ids that are generated completely client-side (i.e. not during\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\nlet globalClientIdCounter: number = 0;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  throw new Error(\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      localIdCounter = 0;\n\n      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n        throw new Error(\n          'Too many re-renders. React limits the number of renders to prevent ' +\n            'an infinite loop.',\n        );\n      }\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n    if (\n      current !== null &&\n      (current.flags & StaticMaskEffect) !==\n        (workInProgress.flags & StaticMaskEffect) &&\n      // Disable this warning in legacy mode, because legacy Suspense is weird\n      // and creates false positives. To make this work in legacy mode, we'd\n      // need to mark fibers that commit in an incomplete state, somehow. For\n      // now I'll disable the warning that most of the bugs that would trigger\n      // it are either exclusive to concurrent mode or exist in both.\n      (current.mode & ConcurrentMode) !== NoMode\n    ) {\n      console.error(\n        'Internal React error: Expected static flag was missing. Please ' +\n          'notify the React team.',\n      );\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n  // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  if (didRenderTooFewHooks) {\n    throw new Error(\n      'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n        'early return statement.',\n    );\n  }\n\n  if (enableLazyContextPropagation) {\n    if (current !== null) {\n      if (!checkIfWorkInProgressReceivedUpdate()) {\n        // If there were no changes to props or state, we need to check if there\n        // was a context change. We didn't already do this because there's no\n        // 1:1 correspondence between dependencies and hooks. Although, because\n        // there almost always is in the common case (`readContext` is an\n        // internal API), we could compare in there. OTOH, we only hit this case\n        // if everything else bails out, so on the whole it might be better to\n        // keep the comparison out of the common path.\n        const currentDependencies = current.dependencies;\n        if (\n          currentDependencies !== null &&\n          checkIfContextChanged(currentDependencies)\n        ) {\n          markWorkInProgressReceivedUpdate();\n        }\n      }\n    }\n  }\n  return children;\n}\n\nexport function checkDidRenderIdHook() {\n  // This should be called immediately after every renderWithHooks call.\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n  // separate function to avoid using an array tuple.\n  const didRenderIdHook = localIdCounter !== 0;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (workInProgress.mode & StrictEffectsMode) !== NoMode\n  ) {\n    workInProgress.flags &= ~(\n      MountPassiveDevEffect |\n      MountLayoutDevEffect |\n      PassiveEffect |\n      UpdateEffect\n    );\n  } else {\n    workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  }\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n  localIdCounter = 0;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    if (nextCurrentHook === null) {\n      throw new Error('Rendered more hooks than during the previous render.');\n    }\n\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n    stores: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, A> = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchReducerAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      // An extra OffscreenLane bit is added to updates that were made to\n      // a hidden tree, so that we can distinguish them from updates that were\n      // already there when the tree was hidden.\n      const updateLane = removeLanes(update.lane, OffscreenLane);\n      const isHiddenUpdate = updateLane !== update.lane;\n\n      // Check if this update was made while the tree was hidden. If so, then\n      // it's not a \"base\" update and we should disregard the extra base lanes\n      // that were added to renderLanes when we entered the Offscreen tree.\n      const shouldSkipUpdate = isHiddenUpdate\n        ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\n        : !isSubsetOfLanes(renderLanes, updateLane);\n\n      if (shouldSkipUpdate) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            hasEagerState: update.hasEagerState,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubscribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    // Intentioally throw an error to force React to retry synchronously. During\n    // the synchronous retry, it will block interleaved mutations, so we should\n    // get a consistent read. Therefore, the following error should never be\n    // visible to the user.\n\n    // We expect this error not to be thrown during the synchronous retry,\n    // because we blocked interleaved mutations.\n    throw new Error(\n      'Cannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n\n  if (root === null) {\n    throw new Error(\n      'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n    );\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubscribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue: UpdateQueue<Snapshot, BasicStateAction<Snapshot>> = {\n      pending: null,\n      lanes: NoLanes,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchSetState.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubscribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const hook = mountWorkInProgressHook();\n\n  let nextSnapshot;\n  const isHydrating = getIsHydrating();\n  if (isHydrating) {\n    if (getServerSnapshot === undefined) {\n      throw new Error(\n        'Missing getServerSnapshot, which is required for ' +\n          'server-rendered content. Will revert to client rendering.',\n      );\n    }\n    nextSnapshot = getServerSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        if (nextSnapshot !== getServerSnapshot()) {\n          console.error(\n            'The result of getServerSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n  } else {\n    nextSnapshot = getSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        const cachedSnapshot = getSnapshot();\n        if (!is(nextSnapshot, cachedSnapshot)) {\n          console.error(\n            'The result of getSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n    const root: FiberRoot | null = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  hook.memoizedState = nextSnapshot;\n  const inst: StoreInstance<T> = {\n    value: nextSnapshot,\n    getSnapshot,\n  };\n  hook.queue = inst;\n\n  // Schedule an effect to subscribe to the store.\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\n\n  // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n  // TODO: We can move this to the passive phase once we add a pre-commit\n  // consistency check. See the next comment.\n  fiber.flags |= PassiveEffect;\n  pushEffect(\n    HookHasEffect | HookPassive,\n    updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n    undefined,\n    null,\n  );\n\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const hook = updateWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  const nextSnapshot = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedSnapshot = getSnapshot();\n      if (!is(nextSnapshot, cachedSnapshot)) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n  const prevSnapshot = hook.memoizedState;\n  const snapshotChanged = !is(prevSnapshot, nextSnapshot);\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n  const inst = hook.queue;\n\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n    subscribe,\n  ]);\n\n  // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n  if (\n    inst.getSnapshot !== getSnapshot ||\n    snapshotChanged ||\n    // Check if the susbcribe function changed. We can save some memory by\n    // checking whether we scheduled a subscription effect above.\n    (workInProgressHook !== null &&\n      workInProgressHook.memoizedState.tag & HookHasEffect)\n  ) {\n    fiber.flags |= PassiveEffect;\n    pushEffect(\n      HookHasEffect | HookPassive,\n      updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n      undefined,\n      null,\n    );\n\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    const root: FiberRoot | null = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck<T>(\n  fiber: Fiber,\n  getSnapshot: () => T,\n  renderedSnapshot: T,\n) {\n  fiber.flags |= StoreConsistency;\n  const check: StoreConsistencyCheck<T> = {\n    getSnapshot,\n    value: renderedSnapshot,\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.stores = [check];\n  } else {\n    const stores = componentUpdateQueue.stores;\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance<T>(\n  fiber: Fiber,\n  inst: StoreInstance<T>,\n  nextSnapshot: T,\n  getSnapshot: () => T,\n) {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot;\n\n  // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  const handleStoreChange = () => {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  };\n  // Subscribe to the store and return a clean-up function.\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n  }\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchSetState.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nlet stackContainsErrorMessage: boolean | null = null;\n\nfunction getCallerStackFrame(): string {\n  // eslint-disable-next-line react-internal/prod-error-codes\n  const stackFrames = new Error('Error message').stack.split('\\n');\n\n  // Some browsers (e.g. Chrome) include the error message in the stack\n  // but others (e.g. Firefox) do not.\n  if (stackContainsErrorMessage === null) {\n    stackContainsErrorMessage = stackFrames[0].includes('Error message');\n  }\n\n  return stackContainsErrorMessage\n    ? stackFrames.slice(3, 4).join('\\n')\n    : stackFrames.slice(2, 3).join('\\n');\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  if (enableUseRefAccessWarning) {\n    if (__DEV__) {\n      // Support lazy initialization pattern shown in docs.\n      // We need to store the caller stack frame so that we don't warn on subsequent renders.\n      let hasBeenInitialized = initialValue != null;\n      let lazyInitGetterStack = null;\n      let didCheckForLazyInit = false;\n\n      // Only warn once per component+hook.\n      let didWarnAboutRead = false;\n      let didWarnAboutWrite = false;\n\n      let current = initialValue;\n      const ref = {\n        get current() {\n          if (!hasBeenInitialized) {\n            didCheckForLazyInit = true;\n            lazyInitGetterStack = getCallerStackFrame();\n          } else if (currentlyRenderingFiber !== null && !didWarnAboutRead) {\n            if (\n              lazyInitGetterStack === null ||\n              lazyInitGetterStack !== getCallerStackFrame()\n            ) {\n              didWarnAboutRead = true;\n              console.warn(\n                '%s: Unsafe read of a mutable value during render.\\n\\n' +\n                  'Reading from a ref during render is only safe if:\\n' +\n                  '1. The ref value has not been updated, or\\n' +\n                  '2. The ref holds a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n          return current;\n        },\n        set current(value) {\n          if (currentlyRenderingFiber !== null && !didWarnAboutWrite) {\n            if (hasBeenInitialized || !didCheckForLazyInit) {\n              didWarnAboutWrite = true;\n              console.warn(\n                '%s: Unsafe write of a mutable value during render.\\n\\n' +\n                  'Writing to a ref during render is only safe if the ref holds ' +\n                  'a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n\n          hasBeenInitialized = true;\n          current = value;\n        },\n      };\n      Object.seal(ref);\n      hook.memoizedState = ref;\n      return ref;\n    } else {\n      const ref = {current: initialValue};\n      hook.memoizedState = ref;\n      return ref;\n    }\n  } else {\n    const ref = {current: initialValue};\n    hook.memoizedState = ref;\n    return ref;\n  }\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    return mountEffectImpl(\n      MountPassiveDevEffect | PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  } else {\n    return mountEffectImpl(\n      PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  }\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(PassiveEffect, HookPassive, create, deps);\n}\n\nfunction mountInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return mountEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction updateInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  let fiberFlags: Flags = UpdateEffect | LayoutStaticEffect;\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(fiberFlags, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  let fiberFlags: Flags = UpdateEffect | LayoutStaticEffect;\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(\n    fiberFlags,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = value;\n  return value;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const hook = updateWorkInProgressHook();\n  const resolvedCurrentHook: Hook = (currentHook: any);\n  const prevValue: T = resolvedCurrentHook.memoizedState;\n  return updateDeferredValueImpl(hook, prevValue, value);\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const hook = updateWorkInProgressHook();\n  if (currentHook === null) {\n    // This is a rerender during a mount.\n    hook.memoizedState = value;\n    return value;\n  } else {\n    // This is a rerender during an update.\n    const prevValue: T = currentHook.memoizedState;\n    return updateDeferredValueImpl(hook, prevValue, value);\n  }\n}\n\nfunction updateDeferredValueImpl<T>(hook: Hook, prevValue: T, value: T): T {\n  const shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n  if (shouldDeferValue) {\n    // This is an urgent update. If the value has changed, keep using the\n    // previous value and spawn a deferred render to update it later.\n\n    if (!is(value, prevValue)) {\n      // Schedule a deferred render\n      const deferredLane = claimNextTransitionLane();\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        deferredLane,\n      );\n      markSkippedUpdateLanes(deferredLane);\n\n      // Set this to true to indicate that the rendered value is inconsistent\n      // from the latest value. The name \"baseState\" doesn't really match how we\n      // use it because we're reusing a state hook field instead of creating a\n      // new one.\n      hook.baseState = true;\n    }\n\n    // Reuse the previous value\n    return prevValue;\n  } else {\n    // This is not an urgent update, so we can use the latest value regardless\n    // of what it is. No need to defer it.\n\n    // However, if we're currently inside a spawned render, then we need to mark\n    // this as an update to prevent the fiber from bailing out.\n    //\n    // `baseState` is true when the current value is different from the rendered\n    // value. The name doesn't really match how we use it because we're reusing\n    // a state hook field instead of creating a new one.\n    if (hook.baseState) {\n      // Flip this back to false.\n      hook.baseState = false;\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = value;\n    return value;\n  }\n}\n\nfunction startTransition(setPending, callback, options) {\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(\n    higherEventPriority(previousPriority, ContinuousEventPriority),\n  );\n\n  setPending(true);\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = {};\n  const currentTransition = ReactCurrentBatchConfig.transition;\n\n  if (enableTransitionTracing) {\n    if (options !== undefined && options.name !== undefined) {\n      ReactCurrentBatchConfig.transition.name = options.name;\n      ReactCurrentBatchConfig.transition.startTime = now();\n    }\n  }\n\n  if (__DEV__) {\n    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n  }\n\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    if (__DEV__) {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        const updatedFibersCount = currentTransition._updatedFibers.size;\n        if (updatedFibersCount > 10) {\n          console.warn(\n            'Detected a large number of updates inside startTransition. ' +\n              'If this is due to a subscription please re-write it to use React provided hooks. ' +\n              'Otherwise concurrent mode guarantees are off the table.',\n          );\n        }\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method never changes.\n  const start = startTransition.bind(null, setPending);\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending] = updateState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending] = rerenderState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction mountId(): string {\n  const hook = mountWorkInProgressHook();\n\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n  const identifierPrefix = root.identifierPrefix;\n\n  let id;\n  if (getIsHydrating()) {\n    const treeId = getTreeId();\n\n    // Use a captial R prefix for server-generated ids.\n    id = ':' + identifierPrefix + 'R' + treeId;\n\n    // Unless this is the first id at this level, append a number at the end\n    // that represents the position of this useId hook among all the useId\n    // hooks for this fiber.\n    const localId = localIdCounter++;\n    if (localId > 0) {\n      id += 'H' + localId.toString(32);\n    }\n\n    id += ':';\n  } else {\n    // Use a lowercase r prefix for client-generated ids.\n    const globalClientId = globalClientIdCounter++;\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId(): string {\n  const hook = updateWorkInProgressHook();\n  const id: string = hook.memoizedState;\n  return id;\n}\n\nfunction mountRefresh() {\n  const hook = mountWorkInProgressHook();\n  const refresh = (hook.memoizedState = refreshCache.bind(\n    null,\n    currentlyRenderingFiber,\n  ));\n  return refresh;\n}\n\nfunction updateRefresh() {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction refreshCache<T>(fiber: Fiber, seedKey: ?() => T, seedValue: T) {\n  if (!enableCache) {\n    return;\n  }\n  // TODO: Does Cache work in legacy mode? Should decide and write a test.\n  // TODO: Consider warning if the refresh is at discrete priority, or if we\n  // otherwise suspect that it wasn't batched properly.\n  let provider = fiber.return;\n  while (provider !== null) {\n    switch (provider.tag) {\n      case CacheComponent:\n      case HostRoot: {\n        // Schedule an update on the cache boundary to trigger a refresh.\n        const lane = requestUpdateLane(provider);\n        const eventTime = requestEventTime();\n        const refreshUpdate = createLegacyQueueUpdate(eventTime, lane);\n        const root = enqueueLegacyQueueUpdate(provider, refreshUpdate, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, provider, lane, eventTime);\n          entangleLegacyQueueTransitions(root, provider, lane);\n        }\n\n        // TODO: If a refresh never commits, the new cache created here must be\n        // released. A simple case is start refreshing a cache boundary, but then\n        // unmount that boundary before the refresh completes.\n        const seededCache = createCache();\n        if (seedKey !== null && seedKey !== undefined && root !== null) {\n          // Seed the cache with the value passed by the caller. This could be\n          // from a server mutation, or it could be a streaming response.\n          seededCache.data.set(seedKey, seedValue);\n        }\n\n        const payload = {\n          cache: seededCache,\n        };\n        refreshUpdate.payload = payload;\n        return;\n      }\n    }\n    provider = provider.return;\n  }\n  // TODO: Warn if unmounted?\n}\n\nfunction dispatchReducerAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      const eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction dispatchSetState<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const alternate = fiber.alternate;\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            // TODO: Do we still need to entangle transitions in this case?\n            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update);\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      const eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction isRenderPhaseUpdate(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  return (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  );\n}\n\nfunction enqueueRenderPhaseUpdate<S, A>(\n  queue: UpdateQueue<S, A>,\n  update: Update<S, A>,\n) {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  const pending = queue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  queue.pending = update;\n}\n\n// TODO: Move to ReactFiberConcurrentUpdates?\nfunction entangleTransitionUpdate<S, A>(\n  root: FiberRoot,\n  queue: UpdateQueue<S, A>,\n  lane: Lane,\n) {\n  if (isTransitionLane(lane)) {\n    let queueLanes = queue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nfunction markUpdateInDevTools(fiber, lane, action) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentNameFromFiber(fiber) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nfunction getCacheSignal(): AbortSignal {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  return cache.controller.signal;\n}\n\nfunction getCacheForType<T>(resourceType: () => T): T {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  let cacheForType: T | void = (cache.data.get(resourceType): any);\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.data.set(resourceType, cacheForType);\n  }\n  return cacheForType;\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (ContextOnlyDispatcher: Dispatcher).getCacheSignal = getCacheSignal;\n  (ContextOnlyDispatcher: Dispatcher).getCacheForType = getCacheForType;\n  (ContextOnlyDispatcher: Dispatcher).useCacheRefresh = throwInvalidHookError;\n}\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useInsertionEffect: mountInsertionEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useSyncExternalStore: mountSyncExternalStore,\n  useId: mountId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnMount: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnMount: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnMount: Dispatcher).useCacheRefresh = mountRefresh;\n}\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnUpdate: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnRerender: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnRerender: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnRerender: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      mountHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {HostRoot, Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  isCurrentUpdateNested(): boolean,\n  markNestedUpdateScheduled(): void,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  syncNestedUpdateFlag(): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\nlet currentUpdateIsNested: boolean = false;\nlet nestedUpdateScheduled: boolean = false;\n\nfunction isCurrentUpdateNested(): boolean {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  isCurrentUpdateNested,\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  resetNestedUpdateFlag,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n  digest: string | null,\n|};\n\nexport function createCapturedValueAtFiber<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n    digest: null,\n  };\n}\n\nexport function createCapturedValue<T>(\n  value: T,\n  digest: ?string,\n  stack: ?string,\n): CapturedValue<T> {\n  return {\n    value,\n    source: null,\n    stack: stack != null ? stack : null,\n    digest: digest != null ? digest : null,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  return true;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {HostRoot} from 'react-reconciler/src/ReactWorkTags';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentNameFromFiber(source) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        const errorBoundaryName =\n          getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactFiberClassUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {OffscreenQueue} from './ReactFiberOffscreenComponent';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostRoot,\n  IncompleteClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  SuspenseComponent,\n  OffscreenComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n  ForceClientRender,\n} from './ReactFiberFlags';\nimport {NoMode, ConcurrentMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableLazyContextPropagation,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValueAtFiber} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {getSuspenseHandler} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  renderDidSuspendDelayIfPossible,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n  restorePendingUpdaters,\n} from './ReactFiberWorkLoop.old';\nimport {propagateParentContextChangesToDeferredTree} from './ReactFiberNewContext.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n  includesSyncLane,\n} from './ReactFiberLane.old';\nimport {\n  getIsHydrating,\n  markDidThrowWhileHydratingDEV,\n  queueHydrationError,\n} from './ReactFiberHydrationContext.old';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      return getDerivedStateFromError(error);\n    };\n    update.callback = () => {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentNameFromFiber(fiber) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber: Fiber, rootRenderLanes: Lanes) {\n  if (enableLazyContextPropagation) {\n    const currentSourceFiber = sourceFiber.alternate;\n    if (currentSourceFiber !== null) {\n      // Since we never visited the children of the suspended component, we\n      // need to propagate the context change now, to ensure that we visit\n      // them during the retry.\n      //\n      // We don't have to do this for errors because we retry errors without\n      // committing in between. So this is specific to Suspense.\n      propagateParentContextChangesToDeferredTree(\n        currentSourceFiber,\n        sourceFiber,\n        rootRenderLanes,\n      );\n    }\n  }\n\n  // Reset the memoizedState to what it was before we attempted to render it.\n  // A legacy mode Suspense quirk, only relevant to hook components.\n  const tag = sourceFiber.tag;\n  if (\n    (sourceFiber.mode & ConcurrentMode) === NoMode &&\n    (tag === FunctionComponent ||\n      tag === ForwardRef ||\n      tag === SimpleMemoComponent)\n  ) {\n    const currentSource = sourceFiber.alternate;\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction markSuspenseBoundaryShouldCapture(\n  suspenseBoundary: Fiber,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  root: FiberRoot,\n  rootRenderLanes: Lanes,\n): Fiber | null {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n      // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (sourceFiber.tag === ClassComponent) {\n        const currentSourceFiber = sourceFiber.alternate;\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          const update = createUpdate(NoTimestamp, SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update, SyncLane);\n        }\n      }\n\n      // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n    return suspenseBoundary;\n  }\n  // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n  suspenseBoundary.flags |= ShouldCapture;\n  // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    // This is a wakeable. The component suspended.\n    const wakeable: Wakeable = (value: any);\n    resetSuspendedComponent(sourceFiber, rootRenderLanes);\n\n    if (__DEV__) {\n      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n        markDidThrowWhileHydratingDEV();\n      }\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(sourceFiber) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    const suspenseBoundary = getSuspenseHandler();\n    if (suspenseBoundary !== null) {\n      switch (suspenseBoundary.tag) {\n        case SuspenseComponent: {\n          suspenseBoundary.flags &= ~ForceClientRender;\n          markSuspenseBoundaryShouldCapture(\n            suspenseBoundary,\n            returnFiber,\n            sourceFiber,\n            root,\n            rootRenderLanes,\n          );\n          // Retry listener\n          //\n          // If the fallback does commit, we need to attach a different type of\n          // listener. This one schedules an update on the Suspense boundary to\n          // turn the fallback state off.\n          //\n          // Stash the wakeable on the boundary fiber so we can access it in the\n          // commit phase.\n          //\n          // When the wakeable resolves, we'll attempt to render the boundary\n          // again (\"retry\").\n          const wakeables: Set<Wakeable> | null = (suspenseBoundary.updateQueue: any);\n          if (wakeables === null) {\n            suspenseBoundary.updateQueue = new Set([wakeable]);\n          } else {\n            wakeables.add(wakeable);\n          }\n          break;\n        }\n        case OffscreenComponent: {\n          if (suspenseBoundary.mode & ConcurrentMode) {\n            suspenseBoundary.flags |= ShouldCapture;\n            const offscreenQueue: OffscreenQueue | null = (suspenseBoundary.updateQueue: any);\n            if (offscreenQueue === null) {\n              const newOffscreenQueue: OffscreenQueue = {\n                transitions: null,\n                markerInstances: null,\n                wakeables: new Set([wakeable]),\n              };\n              suspenseBoundary.updateQueue = newOffscreenQueue;\n            } else {\n              const wakeables = offscreenQueue.wakeables;\n              if (wakeables === null) {\n                offscreenQueue.wakeables = new Set([wakeable]);\n              } else {\n                wakeables.add(wakeable);\n              }\n            }\n            break;\n          }\n        }\n        // eslint-disable-next-line no-fallthrough\n        default: {\n          throw new Error(\n            `Unexpected Suspense handler tag (${suspenseBoundary.tag}). This ` +\n              'is a bug in React.',\n          );\n        }\n      }\n      // We only attach ping listeners in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n      if (suspenseBoundary.mode & ConcurrentMode) {\n        attachPingListener(root, wakeable, rootRenderLanes);\n      }\n      return;\n    } else {\n      // No boundary was found. Unless this is a sync update, this is OK.\n      // We can suspend and wait for more data to arrive.\n\n      if (!includesSyncLane(rootRenderLanes)) {\n        // This is not a sync update. Suspend. Since we're not activating a\n        // Suspense boundary, this will unwind all the way to the root without\n        // performing a second pass to render a fallback. (This is arguably how\n        // refresh transitions should work, too, since we're not going to commit\n        // the fallbacks anyway.)\n        //\n        // This case also applies to initial hydration.\n        attachPingListener(root, wakeable, rootRenderLanes);\n        renderDidSuspendDelayIfPossible();\n        return;\n      }\n\n      // This is a sync/discrete update. We treat this case like an error\n      // because discrete renders are expected to produce a complete tree\n      // synchronously to maintain consistency with external state.\n      const uncaughtSuspenseError = new Error(\n        'A component suspended while responding to synchronous input. This ' +\n          'will cause the UI to be replaced with a loading indicator. To ' +\n          'fix, updates that suspend should be wrapped ' +\n          'with startTransition.',\n      );\n\n      // If we're outside a transition, fall through to the regular error path.\n      // The error will be caught by the nearest suspense boundary.\n      value = uncaughtSuspenseError;\n    }\n  } else {\n    // This is a regular error, not a Suspense wakeable.\n    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n      markDidThrowWhileHydratingDEV();\n      const suspenseBoundary = getSuspenseHandler();\n      // If the error was thrown during hydration, we may be able to recover by\n      // discarding the dehydrated content and switching to a client render.\n      // Instead of surfacing the error, find the nearest Suspense boundary\n      // and render it again without hydration.\n      if (suspenseBoundary !== null) {\n        if ((suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n          // Set a flag to indicate that we should try rendering the normal\n          // children again, not the fallback.\n          suspenseBoundary.flags |= ForceClientRender;\n        }\n        markSuspenseBoundaryShouldCapture(\n          suspenseBoundary,\n          returnFiber,\n          sourceFiber,\n          root,\n          rootRenderLanes,\n        );\n\n        // Even though the user may not be affected by this error, we should\n        // still log it so it can be fixed.\n        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n        return;\n      }\n    } else {\n      // Otherwise, fall through to the error path.\n    }\n  }\n\n  value = createCapturedValueAtFiber(value, sourceFiber);\n  renderDidError(value);\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\nimport {enableCache, enableTransitionTracing} from 'shared/ReactFeatureFlags';\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  getWorkInProgressRoot,\n  getWorkInProgressTransitions,\n} from './ReactFiberWorkLoop.old';\nimport {\n  createCache,\n  retainCache,\n  CacheContext,\n} from './ReactFiberCacheComponent.old';\n\n// When retrying a Suspense/Offscreen boundary, we restore the cache that was\n// used during the previous render by placing it here, on the stack.\nconst resumedCache: StackCursor<Cache | null> = createCursor(null);\n\n// During the render/synchronous commit phase, we don't actually process the\n// transitions. Therefore, we want to lazily combine transitions. Instead of\n// comparing the arrays of transitions when we combine them and storing them\n// and filtering out the duplicates, we will instead store the unprocessed transitions\n// in an array and actually filter them in the passive phase.\nconst transitionStack: StackCursor<Array<Transition> | null> = createCursor(\n  null,\n);\n\nfunction peekCacheFromPool(): Cache | null {\n  if (!enableCache) {\n    return (null: any);\n  }\n\n  // Check if the cache pool already has a cache we can use.\n\n  // If we're rendering inside a Suspense boundary that is currently hidden,\n  // we should use the same cache that we used during the previous render, if\n  // one exists.\n  const cacheResumedFromPreviousRender = resumedCache.current;\n  if (cacheResumedFromPreviousRender !== null) {\n    return cacheResumedFromPreviousRender;\n  }\n\n  // Otherwise, check the root's cache pool.\n  const root = (getWorkInProgressRoot(): any);\n  const cacheFromRootCachePool = root.pooledCache;\n\n  return cacheFromRootCachePool;\n}\n\nexport function requestCacheFromPool(renderLanes: Lanes): Cache {\n  // Similar to previous function, except if there's not already a cache in the\n  // pool, we allocate a new one.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool !== null) {\n    return cacheFromPool;\n  }\n\n  // Create a fresh cache and add it to the root cache pool. A cache can have\n  // multiple owners:\n  // - A cache pool that lives on the FiberRoot. This is where all fresh caches\n  //   are originally created (TODO: except during refreshes, until we implement\n  //   this correctly). The root takes ownership immediately when the cache is\n  //   created. Conceptually, root.pooledCache is an Option<Arc<Cache>> (owned),\n  //   and the return value of this function is a &Arc<Cache> (borrowed).\n  // - One of several fiber types: host root, cache boundary, suspense\n  //   component. These retain and release in the commit phase.\n\n  const root = (getWorkInProgressRoot(): any);\n  const freshCache = createCache();\n  root.pooledCache = freshCache;\n  retainCache(freshCache);\n  if (freshCache !== null) {\n    root.pooledCacheLanes |= renderLanes;\n  }\n  return freshCache;\n}\n\nexport function pushRootTransition(\n  workInProgress: Fiber,\n  root: FiberRoot,\n  renderLanes: Lanes,\n) {\n  if (enableTransitionTracing) {\n    const rootTransitions = getWorkInProgressTransitions();\n    push(transitionStack, rootTransitions, workInProgress);\n  }\n}\n\nexport function popRootTransition(\n  workInProgress: Fiber,\n  root: FiberRoot,\n  renderLanes: Lanes,\n) {\n  if (enableTransitionTracing) {\n    pop(transitionStack, workInProgress);\n  }\n}\n\nexport function pushTransition(\n  offscreenWorkInProgress: Fiber,\n  prevCachePool: SpawnedCachePool | null,\n  newTransitions: Array<Transition> | null,\n): void {\n  if (enableCache) {\n    if (prevCachePool === null) {\n      push(resumedCache, resumedCache.current, offscreenWorkInProgress);\n    } else {\n      push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);\n    }\n  }\n\n  if (enableTransitionTracing) {\n    if (transitionStack.current === null) {\n      push(transitionStack, newTransitions, offscreenWorkInProgress);\n    } else if (newTransitions === null) {\n      push(transitionStack, transitionStack.current, offscreenWorkInProgress);\n    } else {\n      push(\n        transitionStack,\n        transitionStack.current.concat(newTransitions),\n        offscreenWorkInProgress,\n      );\n    }\n  }\n}\n\nexport function popTransition(workInProgress: Fiber, current: Fiber | null) {\n  if (current !== null) {\n    if (enableTransitionTracing) {\n      pop(transitionStack, workInProgress);\n    }\n\n    if (enableCache) {\n      pop(resumedCache, workInProgress);\n    }\n  }\n}\n\nexport function getPendingTransitions(): Array<Transition> | null {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  return transitionStack.current;\n}\n\nexport function getSuspendedCache(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n  // This function is called when a Suspense boundary suspends. It returns the\n  // cache that would have been used to render fresh data during this render,\n  // if there was any, so that we can resume rendering with the same cache when\n  // we receive more data.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also save the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n\nexport function getOffscreenDeferredCache(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also store the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  ReactProviderType,\n  ReactContext,\n  ReactNodeList,\n} from 'shared/ReactTypes';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n  OffscreenQueue,\n  OffscreenInstance,\n} from './ReactFiberOffscreenComponent';\nimport type {\n  Cache,\n  CacheComponentState,\n  SpawnedCachePool,\n} from './ReactFiberCacheComponent.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\nimport {\n  enableCPUSuspense,\n  enableUseMutableSource,\n} from 'shared/ReactFeatureFlags';\n\nimport checkPropTypes from 'shared/checkPropTypes';\nimport {\n  markComponentRenderStarted,\n  markComponentRenderStopped,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook.old';\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  RefStatic,\n  ChildDeletion,\n  ForceUpdateForLegacySuspense,\n  StaticMask,\n  ShouldCapture,\n  ForceClientRender,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableCache,\n  enableLazyContextPropagation,\n  enableSchedulingProfiler,\n  enableTransitionTracing,\n  enableLegacyHidden,\n} from 'shared/ReactFeatureFlags';\nimport isArray from 'shared/isArray';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n  enqueueCapturedUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictLegacyMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  getSuspenseInstanceFallbackErrorDetails,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n  isPrimaryRenderer,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {shouldError, shouldSuspend} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseListContext,\n  ForceSuspenseFallback,\n  hasSuspenseListContext,\n  setDefaultShallowSuspenseListContext,\n  setShallowSuspenseListContext,\n  pushPrimaryTreeSuspenseHandler,\n  pushFallbackTreeSuspenseHandler,\n  pushOffscreenSuspenseHandler,\n  reuseSuspenseHandlerOnStack,\n  popSuspenseHandler,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  pushHiddenContext,\n  reuseHiddenContextOnStack,\n} from './ReactFiberHiddenContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  lazilyPropagateParentContextChanges,\n  propagateParentContextChangesToDeferredTree,\n  checkIfContextChanged,\n  readContext,\n  prepareToReadContext,\n  scheduleContextWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {\n  renderWithHooks,\n  checkDidRenderIdHook,\n  bailoutHooks,\n} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  getIsHydrating,\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n  queueHydrationError,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\nimport {pushCacheProvider, CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createCapturedValue,\n  createCapturedValueAtFiber,\n  type CapturedValue,\n} from './ReactCapturedValue';\nimport {createClassErrorUpdate} from './ReactFiberThrow.old';\nimport is from 'shared/objectIs';\nimport {\n  getForksAtLevel,\n  isForkedChild,\n  pushTreeId,\n  pushMaterializedTreeId,\n} from './ReactFiberTreeContext.old';\nimport {\n  requestCacheFromPool,\n  pushRootTransition,\n  getSuspendedCache,\n  pushTransition,\n  getOffscreenDeferredCache,\n  getPendingTransitions,\n} from './ReactFiberTransition.old';\nimport {\n  getMarkerInstances,\n  pushMarkerInstance,\n  pushRootMarkerInstance,\n} from './ReactFiberTracingMarkerComponent.old';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentNameFromType(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n    current,\n    renderLanes,\n  );\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentNameFromType(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n\n      // The props are shallowly equal. Reuse the previous props object, like we\n      // would during a normal fiber bailout.\n      //\n      // We don't have strong guarantees that the props object is referentially\n      // equal during updates where we can't bail out anyway — like if the props\n      // are shallowly equal, but there's a local state or context update in the\n      // same batch.\n      //\n      // However, as a principle, we should aim to make the behavior consistent\n      // across different ways of memoizing a component. For example, React.memo\n      // has a different internal Fiber layout if you pass a normal function\n      // component (SimpleMemoComponent) versus if you pass a different type\n      // like forwardRef (MemoComponent). But this is an implementation detail.\n      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n      // affect whether the props object is reused during a bailout.\n      workInProgress.pendingProps = nextProps = prevProps;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    (enableLegacyHidden && nextProps.mode === 'unstable-defer-without-hiding')\n  ) {\n    // Rendering a hidden tree.\n\n    const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n    if (didSuspend) {\n      // Something suspended inside a hidden tree\n\n      // Include the base lanes from the last render\n      const nextBaseLanes =\n        prevState !== null\n          ? mergeLanes(prevState.baseLanes, renderLanes)\n          : renderLanes;\n\n      if (current !== null) {\n        // Reset to the current children\n        let currentChild = (workInProgress.child = current.child);\n\n        // The current render suspended, but there may be other lanes with\n        // pending work. We can't read `childLanes` from the current Offscreen\n        // fiber because we reset it when it was deferred; however, we can read\n        // the pending lanes from the child fibers.\n        let currentChildLanes = NoLanes;\n        while (currentChild !== null) {\n          currentChildLanes = mergeLanes(\n            mergeLanes(currentChildLanes, currentChild.lanes),\n            currentChild.childLanes,\n          );\n          currentChild = currentChild.sibling;\n        }\n        const lanesWeJustAttempted = nextBaseLanes;\n        const remainingChildLanes = removeLanes(\n          currentChildLanes,\n          lanesWeJustAttempted,\n        );\n        workInProgress.childLanes = remainingChildLanes;\n      } else {\n        workInProgress.childLanes = NoLanes;\n        workInProgress.child = null;\n      }\n\n      return deferHiddenOffscreenComponent(\n        current,\n        workInProgress,\n        nextBaseLanes,\n        renderLanes,\n      );\n    }\n\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Consider how Offscreen should work with transitions in the future\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      if (enableCache) {\n        // push the cache pool even though we're going to bail out\n        // because otherwise there'd be a context mismatch\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n      reuseHiddenContextOnStack(workInProgress);\n      pushOffscreenSuspenseHandler(workInProgress);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n\n      // Schedule this fiber to re-render at Offscreen priority\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n\n      // Include the base lanes from the last render\n      const nextBaseLanes =\n        prevState !== null\n          ? mergeLanes(prevState.baseLanes, renderLanes)\n          : renderLanes;\n\n      return deferHiddenOffscreenComponent(\n        current,\n        workInProgress,\n        nextBaseLanes,\n        renderLanes,\n      );\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      if (enableCache && current !== null) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState !== null ? prevState.cachePool : null;\n        // TODO: Consider if and how Offscreen pre-rendering should\n        // be attributed to the transition that spawned it\n        pushTransition(workInProgress, prevCachePool, null);\n      }\n\n      // Push the lanes that were skipped when we bailed out.\n      if (prevState !== null) {\n        pushHiddenContext(workInProgress, prevState);\n      } else {\n        reuseHiddenContextOnStack(workInProgress);\n      }\n      pushOffscreenSuspenseHandler(workInProgress);\n    }\n  } else {\n    // Rendering a visible tree.\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n      let prevCachePool = null;\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        prevCachePool = prevState.cachePool;\n      }\n\n      let transitions = null;\n      if (enableTransitionTracing) {\n        // We have now gone from hidden to visible, so any transitions should\n        // be added to the stack to get added to any Offscreen/suspense children\n        const instance: OffscreenInstance | null = workInProgress.stateNode;\n        if (instance !== null && instance.transitions != null) {\n          transitions = Array.from(instance.transitions);\n        }\n      }\n\n      pushTransition(workInProgress, prevCachePool, transitions);\n\n      // Push the lanes that were skipped when we bailed out.\n      pushHiddenContext(workInProgress, prevState);\n      reuseSuspenseHandlerOnStack(workInProgress);\n\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      reuseHiddenContextOnStack(workInProgress);\n      reuseSuspenseHandlerOnStack(workInProgress);\n    }\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction deferHiddenOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextBaseLanes: Lanes,\n  renderLanes: Lanes,\n) {\n  const nextState: OffscreenState = {\n    baseLanes: nextBaseLanes,\n    // Save the cache pool so we can resume later.\n    cachePool: enableCache ? getOffscreenDeferredCache() : null,\n  };\n  workInProgress.memoizedState = nextState;\n  if (enableCache) {\n    // push the cache pool even though we're going to bail out\n    // because otherwise there'd be a context mismatch\n    if (current !== null) {\n      pushTransition(workInProgress, null, null);\n    }\n  }\n\n  // We're about to bail out, but we need to push this to the stack anyway\n  // to avoid a push/pop misalignment.\n  reuseHiddenContextOnStack(workInProgress);\n\n  pushOffscreenSuspenseHandler(workInProgress);\n\n  if (enableLazyContextPropagation && current !== null) {\n    // Since this tree will resume rendering in a separate render, we need\n    // to propagate parent contexts now so we don't lose track of which\n    // ones changed.\n    propagateParentContextChangesToDeferredTree(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  return null;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateCacheComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableCache) {\n    return null;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const parentCache = readContext(CacheContext);\n\n  if (current === null) {\n    // Initial mount. Request a fresh cache from the pool.\n    const freshCache = requestCacheFromPool(renderLanes);\n    const initialState: CacheComponentState = {\n      parent: parentCache,\n      cache: freshCache,\n    };\n    workInProgress.memoizedState = initialState;\n    initializeUpdateQueue(workInProgress);\n    pushCacheProvider(workInProgress, freshCache);\n  } else {\n    // Check for updates\n    if (includesSomeLane(current.lanes, renderLanes)) {\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, null, null, renderLanes);\n    }\n    const prevState: CacheComponentState = current.memoizedState;\n    const nextState: CacheComponentState = workInProgress.memoizedState;\n\n    // Compare the new parent cache to the previous to see detect there was\n    // a refresh.\n    if (prevState.parent !== parentCache) {\n      // Refresh in parent. Update the parent.\n      const derivedState: CacheComponentState = {\n        parent: parentCache,\n        cache: parentCache,\n      };\n\n      // Copied from getDerivedStateFromProps implementation. Once the update\n      // queue is empty, persist the derived state onto the base state.\n      workInProgress.memoizedState = derivedState;\n      if (workInProgress.lanes === NoLanes) {\n        const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n        workInProgress.memoizedState = updateQueue.baseState = derivedState;\n      }\n\n      pushCacheProvider(workInProgress, parentCache);\n      // No need to propagate a context change because the refreshed parent\n      // already did.\n    } else {\n      // The parent didn't refresh. Now check if this cache did.\n      const nextCache = nextState.cache;\n      pushCacheProvider(workInProgress, nextCache);\n      if (nextCache !== prevState.cache) {\n        // This cache refreshed. Propagate a context change.\n        propagateContextChange(workInProgress, CacheContext, renderLanes);\n      }\n    }\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// This should only be called if the name changes\nfunction updateTracingMarkerComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  // TODO: (luna) Only update the tracing marker if it's newly rendered or it's name changed.\n  // A tracing marker is only associated with the transitions that rendered\n  // or updated it, so we can create a new set of transitions each time\n  if (current === null) {\n    const currentTransitions = getPendingTransitions();\n    if (currentTransitions !== null) {\n      const markerInstance: TracingMarkerInstance = {\n        transitions: new Set(currentTransitions),\n        pendingBoundaries: new Map(),\n        name: workInProgress.pendingProps.name,\n      };\n      workInProgress.stateNode = markerInstance;\n    }\n  } else {\n    if (__DEV__) {\n      if (current.memoizedProps.name !== workInProgress.pendingProps.name) {\n        console.error(\n          'Changing the name of a tracing marker after mount is not supported. ' +\n            'To remount the tracing marker, pass it a new key.',\n        );\n      }\n    }\n  }\n\n  const instance: TracingMarkerInstance | null = workInProgress.stateNode;\n  if (instance !== null) {\n    pushMarkerInstance(workInProgress, instance);\n  }\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    if (enableProfilerCommitHooks) {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      const stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false: {\n        const instance = workInProgress.stateNode;\n        const ctor = workInProgress.type;\n        // TODO This way of resetting the error boundary state is a hack.\n        // Is there a better way to do this?\n        const tempInstance = new ctor(\n          workInProgress.memoizedProps,\n          instance.context,\n        );\n        const state = tempInstance.state;\n        instance.updater.enqueueSetState(instance, state, null);\n        break;\n      }\n      case true: {\n        workInProgress.flags |= DidCapture;\n        workInProgress.flags |= ShouldCapture;\n        // eslint-disable-next-line react-internal/prod-error-codes\n        const error = new Error('Simulated error coming from DevTools');\n        const lane = pickArbitraryLane(renderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        // Schedule the error boundary to re-render using updated state\n        const update = createClassErrorUpdate(\n          workInProgress,\n          createCapturedValueAtFiber(error, workInProgress),\n          lane,\n        );\n        enqueueCapturedUpdate(workInProgress, update);\n        break;\n      }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);\n\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentNameFromFiber(workInProgress) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (enableSchedulingProfiler) {\n      markComponentRenderStarted(workInProgress);\n    }\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n\n  const nextState: RootState = workInProgress.memoizedState;\n  const root: FiberRoot = workInProgress.stateNode;\n  pushRootTransition(workInProgress, root, renderLanes);\n\n  if (enableTransitionTracing) {\n    pushRootMarkerInstance(workInProgress);\n  }\n\n  if (enableCache) {\n    const nextCache: Cache = nextState.cache;\n    pushCacheProvider(workInProgress, nextCache);\n    if (nextCache !== prevState.cache) {\n      // The root cache refreshed.\n      propagateContextChange(workInProgress, CacheContext, renderLanes);\n    }\n  }\n\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (supportsHydration && prevState.isDehydrated) {\n    // This is a hydration root whose shell has not yet hydrated. We should\n    // attempt to hydrate.\n\n    // Flip isDehydrated to false to indicate that when this render\n    // finishes, the root will no longer be dehydrated.\n    const overrideState: RootState = {\n      element: nextChildren,\n      isDehydrated: false,\n      cache: nextState.cache,\n    };\n    const updateQueue: UpdateQueue<RootState> = (workInProgress.updateQueue: any);\n    // `baseState` can always be the last state because the root doesn't\n    // have reducer functions so it doesn't need rebasing.\n    updateQueue.baseState = overrideState;\n    workInProgress.memoizedState = overrideState;\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during a previous attempt to hydrate the shell, so we\n      // forced a client render.\n      const recoverableError = createCapturedValueAtFiber(\n        new Error(\n          'There was an error while hydrating. Because the error happened outside ' +\n            'of a Suspense boundary, the entire root will switch to ' +\n            'client rendering.',\n        ),\n        workInProgress,\n      );\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n        recoverableError,\n      );\n    } else if (nextChildren !== prevChildren) {\n      const recoverableError = createCapturedValueAtFiber(\n        new Error(\n          'This root received an early update, before anything was able ' +\n            'hydrate. Switched the entire root to client rendering.',\n        ),\n        workInProgress,\n      );\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n        recoverableError,\n      );\n    } else {\n      // The outermost shell has not hydrated yet. Start hydrating.\n      enterHydrationState(workInProgress);\n      if (enableUseMutableSource) {\n        const mutableSourceEagerHydrationData =\n          root.mutableSourceEagerHydrationData;\n        if (mutableSourceEagerHydrationData != null) {\n          for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n            const mutableSource = ((mutableSourceEagerHydrationData[\n              i\n            ]: any): MutableSource<any>);\n            const version = mutableSourceEagerHydrationData[i + 1];\n            setWorkInProgressVersion(mutableSource, version);\n          }\n        }\n      }\n\n      const child = mountChildFibers(\n        workInProgress,\n        null,\n        nextChildren,\n        renderLanes,\n      );\n      workInProgress.child = child;\n\n      let node = child;\n      while (node) {\n        // Mark each child as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n        node.flags = (node.flags & ~Placement) | Hydrating;\n        node = node.sibling;\n      }\n    }\n  } else {\n    // Root is not dehydrated. Either this is a client-only root, or it\n    // already hydrated.\n    resetHydrationState();\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nfunction mountHostRootWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: ReactNodeList,\n  renderLanes: Lanes,\n  recoverableError: CapturedValue<mixed>,\n) {\n  // Revert to client rendering.\n  resetHydrationState();\n\n  queueHydrationError(recoverableError);\n\n  workInProgress.flags |= ForceClientRender;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes,\n      );\n      return child;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  throw new Error(\n    `Element type is invalid. Received a promise that resolves to: ${Component}. ` +\n      `Lazy element type must resolve to a class or function.${hint}`,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n  let hasId;\n\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentNameFromType(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n          hasId = checkDidRenderIdHook();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n\n    if (getIsHydrating() && hasId) {\n      pushMaterializedTreeId(workInProgress);\n    }\n\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache(),\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  let cachePool: SpawnedCachePool | null = null;\n  if (enableCache) {\n    const prevCachePool: SpawnedCachePool | null = prevOffscreenState.cachePool;\n    if (prevCachePool !== null) {\n      const parentCache = isPrimaryRenderer\n        ? CacheContext._currentValue\n        : CacheContext._currentValue2;\n      if (prevCachePool.parent !== parentCache) {\n        // Detected a refresh in the parent. This overrides any previously\n        // suspended cache.\n        cachePool = {\n          parent: parentCache,\n          pool: parentCache,\n        };\n      } else {\n        // We can reuse the cache from last time. The only thing that would have\n        // overridden it is a parent refresh, which we checked for above.\n        cachePool = prevCachePool;\n      }\n    } else {\n      // If there's no previous cache pool, grab the current one.\n      cachePool = getSuspendedCache();\n    }\n  }\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool,\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  const suspenseContext: SuspenseContext = suspenseStackCursor.current;\n  return hasSuspenseListContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(current, workInProgress, renderLanes)\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  }\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n\n    // Special path for hydration\n    // If we're currently hydrating, try to hydrate this boundary.\n    if (getIsHydrating()) {\n      // We must push the suspense handler context *before* attempting to\n      // hydrate, to avoid a mismatch in case it errors.\n      if (showFallback) {\n        pushPrimaryTreeSuspenseHandler(workInProgress);\n      } else {\n        pushFallbackTreeSuspenseHandler(workInProgress);\n      }\n      tryToClaimNextHydratableInstance(workInProgress);\n      // This could've been a dehydrated suspense component.\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n      if (suspenseState !== null) {\n        const dehydrated = suspenseState.dehydrated;\n        if (dehydrated !== null) {\n          return mountDehydratedSuspenseComponent(\n            workInProgress,\n            dehydrated,\n            renderLanes,\n          );\n        }\n      }\n      // If hydration didn't succeed, fall through to the normal Suspense path.\n      // To avoid a stack mismatch we need to pop the Suspense handler that we\n      // pushed above. This will become less awkward when move the hydration\n      // logic to its own fiber.\n      popSuspenseHandler(workInProgress);\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      if (enableTransitionTracing) {\n        const currentTransitions = getPendingTransitions();\n        if (currentTransitions !== null) {\n          const parentMarkerInstances = getMarkerInstances();\n          const offscreenQueue: OffscreenQueue | null = (primaryChildFragment.updateQueue: any);\n          if (offscreenQueue === null) {\n            const newOffscreenQueue: OffscreenQueue = {\n              transitions: currentTransitions,\n              markerInstances: parentMarkerInstances,\n              wakeables: null,\n            };\n            primaryChildFragment.updateQueue = newOffscreenQueue;\n          } else {\n            offscreenQueue.transitions = currentTransitions;\n            offscreenQueue.markerInstances = parentMarkerInstances;\n          }\n        }\n      }\n\n      return fallbackFragment;\n    } else if (\n      enableCPUSuspense &&\n      typeof nextProps.unstable_expectedLoadTime === 'number'\n    ) {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      pushFallbackTreeSuspenseHandler(workInProgress);\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // TODO: Transition Tracing is not yet implemented for CPU Suspense.\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      return fallbackFragment;\n    } else {\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // Special path for hydration\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      const dehydrated = prevState.dehydrated;\n      if (dehydrated !== null) {\n        return updateDehydratedSuspenseComponent(\n          current,\n          workInProgress,\n          didSuspend,\n          nextProps,\n          dehydrated,\n          prevState,\n          renderLanes,\n        );\n      }\n    }\n\n    if (showFallback) {\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      const nextFallbackChildren = nextProps.fallback;\n      const nextPrimaryChildren = nextProps.children;\n      const fallbackChildFragment = updateSuspenseFallbackChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      const prevOffscreenState: OffscreenState | null = (current.child: any)\n        .memoizedState;\n      primaryChildFragment.memoizedState =\n        prevOffscreenState === null\n          ? mountSuspenseOffscreenState(renderLanes)\n          : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n      if (enableTransitionTracing) {\n        const currentTransitions = getPendingTransitions();\n        if (currentTransitions !== null) {\n          const parentMarkerInstances = getMarkerInstances();\n          const offscreenQueue: OffscreenQueue | null = (primaryChildFragment.updateQueue: any);\n          const currentOffscreenQueue: OffscreenQueue | null = (current.updateQueue: any);\n          if (offscreenQueue === null) {\n            const newOffscreenQueue: OffscreenQueue = {\n              transitions: currentTransitions,\n              markerInstances: parentMarkerInstances,\n              wakeables: null,\n            };\n            primaryChildFragment.updateQueue = newOffscreenQueue;\n          } else if (offscreenQueue === currentOffscreenQueue) {\n            // If the work-in-progress queue is the same object as current, we\n            // can't modify it without cloning it first.\n            const newOffscreenQueue: OffscreenQueue = {\n              transitions: currentTransitions,\n              markerInstances: parentMarkerInstances,\n              wakeables:\n                currentOffscreenQueue !== null\n                  ? currentOffscreenQueue.wakeables\n                  : null,\n            };\n            primaryChildFragment.updateQueue = newOffscreenQueue;\n          } else {\n            offscreenQueue.transitions = currentTransitions;\n            offscreenQueue.markerInstances = parentMarkerInstances;\n          }\n        }\n      }\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n        current,\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    } else {\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n\n      const nextPrimaryChildren = nextProps.children;\n      const primaryChildFragment = updateSuspensePrimaryChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    mode,\n    renderLanes,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if (\n    (mode & ConcurrentMode) === NoMode &&\n    progressedPrimaryFragment !== null\n  ) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(\n      primaryChildProps,\n      mode,\n      NoLanes,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(\n  offscreenProps: OffscreenProps,\n  mode: TypeOfMode,\n  renderLanes: Lanes,\n) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = updateWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    const deletions = workInProgress.deletions;\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & ConcurrentMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n    // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n    primaryChildFragment.subtreeFlags =\n      currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  recoverableError: CapturedValue<mixed> | null,\n) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n  //\n  // The error is passed in as an argument to enforce that every caller provide\n  // a custom message, or explicitly opt out (currently the only path that opts\n  // out is legacy mode; every concurrent path provides an error).\n  if (recoverableError !== null) {\n    queueHydrationError(recoverableError);\n  }\n\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const fiberMode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    fiberMode,\n    NoLanes,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    fiberMode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOMClient.hydrateRoot(container, <App />)' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  didSuspend: boolean,\n  nextProps: any,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (!didSuspend) {\n    // This is the first render pass. Attempt to hydrate.\n    pushPrimaryTreeSuspenseHandler(workInProgress);\n\n    // We should never be hydrating at this point because it is the first pass,\n    // but after we've already committed once.\n    warnIfHydrating();\n\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        // TODO: When we delete legacy mode, we should make this error argument\n        // required — every concurrent mode path that causes hydration to\n        // de-opt to client rendering should have an error message.\n        null,\n      );\n    }\n\n    if (isSuspenseInstanceFallback(suspenseInstance)) {\n      // This boundary is in a permanent fallback state. In this case, we'll never\n      // get an update and we'll never be able to hydrate the final content. Let's just try the\n      // client side render instead.\n      let digest, message, stack;\n      if (__DEV__) {\n        ({digest, message, stack} = getSuspenseInstanceFallbackErrorDetails(\n          suspenseInstance,\n        ));\n      } else {\n        ({digest} = getSuspenseInstanceFallbackErrorDetails(suspenseInstance));\n      }\n\n      let error;\n      if (message) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        error = new Error(message);\n      } else {\n        error = new Error(\n          'The server could not finish this Suspense boundary, likely ' +\n            'due to an error during server rendering. Switched to ' +\n            'client rendering.',\n        );\n      }\n      const capturedValue = createCapturedValue(error, digest, stack);\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    }\n\n    if (\n      enableLazyContextPropagation &&\n      // TODO: Factoring is a little weird, since we check this right below, too.\n      // But don't want to re-arrange the if-else chain until/unless this\n      // feature lands.\n      !didReceiveUpdate\n    ) {\n      // We need to check if any children have context before we decide to bail\n      // out, so propagate the changes now.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n    }\n\n    // We use lanes to indicate that a child might depend on context, so if\n    // any context has changed, we need to treat is as if the input might have changed.\n    const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n    if (didReceiveUpdate || hasContextChanged) {\n      // This boundary has changed since the first render. This means that we are now unable to\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n      const root = getWorkInProgressRoot();\n      if (root !== null) {\n        const attemptHydrationAtLane = getBumpedLaneForHydration(\n          root,\n          renderLanes,\n        );\n        if (\n          attemptHydrationAtLane !== NoLane &&\n          attemptHydrationAtLane !== suspenseState.retryLane\n        ) {\n          // Intentionally mutating since this render will get interrupted. This\n          // is one of the very rare times where we mutate the current tree\n          // during the render phase.\n          suspenseState.retryLane = attemptHydrationAtLane;\n          // TODO: Ideally this would inherit the event time of the current render\n          const eventTime = NoTimestamp;\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n          scheduleUpdateOnFiber(\n            root,\n            current,\n            attemptHydrationAtLane,\n            eventTime,\n          );\n        } else {\n          // We have already tried to ping at a higher priority than we're rendering with\n          // so if we got here, we must have failed to hydrate at those levels. We must\n          // now give up. Instead, we're going to delete the whole subtree and instead inject\n          // a new real Suspense boundary to take its place, which may render content\n          // or fallback. This might suspend for a while and if it does we might still have\n          // an opportunity to hydrate before this pass commits.\n        }\n      }\n\n      // If we have scheduled higher pri work above, this will probably just abort the render\n      // since we now have higher priority work, but in case it doesn't, we need to prepare to\n      // render something, if we time out. Even if that requires us to delete everything and\n      // skip hydration.\n      // Delay having to do this as long as the suspense timeout allows us.\n      renderDidSuspendDelayIfPossible();\n      const capturedValue = createCapturedValue(\n        new Error(\n          'This Suspense boundary received an update before it finished ' +\n            'hydrating. This caused the boundary to switch to client rendering. ' +\n            'The usual way to fix this is to wrap the original update ' +\n            'in startTransition.',\n        ),\n      );\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    } else if (isSuspenseInstancePending(suspenseInstance)) {\n      // This component is still pending more data from the server, so we can't hydrate its\n      // content. We treat it as if this component suspended itself. It might seem as if\n      // we could just try to render it client-side instead. However, this will perform a\n      // lot of unnecessary work and is unlikely to complete since it often will suspend\n      // on missing data anyway. Additionally, the server might be able to render more\n      // than we can on the client yet. In that case we'd end up with more fallback states\n      // on the client than if we just leave it alone. If the server times out or errors\n      // these should update this boundary to the permanent Fallback state instead.\n      // Mark it as having captured (i.e. suspended).\n      workInProgress.flags |= DidCapture;\n      // Leave the child in place. I.e. the dehydrated fragment.\n      workInProgress.child = current.child;\n      // Register a callback to retry this boundary once the server has sent the result.\n      const retry = retryDehydratedSuspenseBoundary.bind(null, current);\n      registerSuspenseInstanceRetry(suspenseInstance, retry);\n      return null;\n    } else {\n      // This is the first attempt.\n      reenterHydrationStateFromDehydratedSuspenseInstance(\n        workInProgress,\n        suspenseInstance,\n        suspenseState.treeContext,\n      );\n      const primaryChildren = nextProps.children;\n      const primaryChildFragment = mountSuspensePrimaryChildren(\n        workInProgress,\n        primaryChildren,\n        renderLanes,\n      );\n      // Mark the children as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      primaryChildFragment.flags |= Hydrating;\n      return primaryChildFragment;\n    }\n  } else {\n    // This is the second render pass. We already attempted to hydrated, but\n    // something either suspended or errored.\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during hydration. Try again without hydrating.\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n\n      workInProgress.flags &= ~ForceClientRender;\n      const capturedValue = createCapturedValue(\n        new Error(\n          'There was an error while hydrating this Suspense boundary. ' +\n            'Switched to client rendering.',\n        ),\n      );\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    } else if ((workInProgress.memoizedState: null | SuspenseState) !== null) {\n      // Something suspended and we should still be in dehydrated mode.\n      // Leave the existing child in place.\n\n      // Push to avoid a mismatch\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      workInProgress.child = current.child;\n      // The dehydrated completion pass expects this flag to be there\n      // but the normal suspense pass doesn't.\n      workInProgress.flags |= DidCapture;\n      return null;\n    } else {\n      // Suspended but we should no longer be in dehydrated mode.\n      // Therefore we now have to render the fallback.\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      const nextPrimaryChildren = nextProps.children;\n      const nextFallbackChildren = nextProps.fallback;\n      const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    }\n  }\n}\n\nfunction scheduleSuspenseWorkOnFiber(\n  fiber: Fiber,\n  renderLanes: Lanes,\n  propagationRoot: Fiber,\n) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isAnArray = isArray(childSlot);\n    const isIterable =\n      !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isAnArray || isIterable) {\n      const type = isAnArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseListContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseListContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n  }\n  pushSuspenseListContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  if (enableLazyContextPropagation) {\n    // In the lazy propagation implementation, we don't scan for matching\n    // consumers until something bails out, because until something bails out\n    // we're going to visit those nodes, anyway. The trade-off is that it shifts\n    // responsibility to the consumer to track whether something has changed.\n  } else {\n    if (oldProps !== null) {\n      const oldValue = oldProps.value;\n      if (is(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (\n          oldProps.children === newProps.children &&\n          !hasLegacyContextChanged()\n        ) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nexport function checkIfWorkInProgressReceivedUpdate() {\n  return didReceiveUpdate;\n}\n\nfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (current !== null) {\n      // A lazy component only mounts if it suspended inside a non-\n      // concurrent tree, in an inconsistent state. We want to treat it like\n      // a new mount, even though an empty version of it already committed.\n      // Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n  }\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n\n    if (enableLazyContextPropagation && current !== null) {\n      // Before bailing out, check if there are any context changes in\n      // the children.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      // eslint-disable-next-line react-internal/prod-error-codes\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction checkScheduledUpdateOrContext(\n  current: Fiber,\n  renderLanes: Lanes,\n): boolean {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  const updateLanes = current.lanes;\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  }\n  // No pending update, but because context is propagated lazily, we need\n  // to check for a context change before we bail out.\n  if (enableLazyContextPropagation) {\n    const dependencies = current.dependencies;\n    if (dependencies !== null && checkIfContextChanged(dependencies)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      const root: FiberRoot = workInProgress.stateNode;\n      pushRootTransition(workInProgress, root, renderLanes);\n\n      if (enableTransitionTracing) {\n        pushRootMarkerInstance(workInProgress);\n      }\n\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      resetHydrationState();\n      break;\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        pushLegacyContextProvider(workInProgress);\n      }\n      break;\n    }\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n    case ContextProvider: {\n      const newValue = workInProgress.memoizedProps.value;\n      const context: ReactContext<any> = workInProgress.type._context;\n      pushProvider(workInProgress, context, newValue);\n      break;\n    }\n    case Profiler:\n      if (enableProfilerTimer) {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        const hasChildWork = includesSomeLane(\n          renderLanes,\n          workInProgress.childLanes,\n        );\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        if (enableProfilerCommitHooks) {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          const stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      break;\n    case SuspenseComponent: {\n      const state: SuspenseState | null = workInProgress.memoizedState;\n      if (state !== null) {\n        if (state.dehydrated !== null) {\n          // We're not going to render the children, so this is just to maintain\n          // push/pop symmetry\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          // We know that this component will suspend again because if it has\n          // been unsuspended it has committed as a resolved Suspense component.\n          // If it needs to be retried, it should have work scheduled on it.\n          workInProgress.flags |= DidCapture;\n          // We should never render the children of a dehydrated boundary until we\n          // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n          return null;\n        }\n\n        // If this boundary is currently timed out, we need to decide\n        // whether to retry the primary children, or to skip over it and\n        // go straight to the fallback. Check the priority of the primary\n        // child fragment.\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const primaryChildLanes = primaryChildFragment.childLanes;\n        if (includesSomeLane(renderLanes, primaryChildLanes)) {\n          // The primary children have pending work. Use the normal path\n          // to attempt to render the primary children again.\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        } else {\n          // The primary child fragment does not have pending work marked\n          // on it\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          // The primary children do not have pending work with sufficient\n          // priority. Bailout.\n          const child = bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n          if (child !== null) {\n            // The fallback children have pending work. Skip over the\n            // primary children and work on the fallback.\n            return child.sibling;\n          } else {\n            // Note: We can return `null` here because we already checked\n            // whether there were nested context consumers, via the call to\n            // `bailoutOnAlreadyFinishedWork` above.\n            return null;\n          }\n        }\n      } else {\n        pushPrimaryTreeSuspenseHandler(workInProgress);\n      }\n      break;\n    }\n    case SuspenseListComponent: {\n      const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n      let hasChildWork = includesSomeLane(\n        renderLanes,\n        workInProgress.childLanes,\n      );\n\n      if (enableLazyContextPropagation && !hasChildWork) {\n        // Context changes may not have been propagated yet. We need to do\n        // that now, before we can decide whether to bail out.\n        // TODO: We use `childLanes` as a heuristic for whether there is\n        // remaining work in a few places, including\n        // `bailoutOnAlreadyFinishedWork` and\n        // `updateDehydratedSuspenseComponent`. We should maybe extract this\n        // into a dedicated function.\n        lazilyPropagateParentContextChanges(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n        hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n      }\n\n      if (didSuspendBefore) {\n        if (hasChildWork) {\n          // If something was in fallback state last time, and we have all the\n          // same children then we're still in progressive loading state.\n          // Something might get unblocked by state updates or retries in the\n          // tree which will affect the tail. So we need to use the normal\n          // path to compute the correct tail.\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        workInProgress.flags |= DidCapture;\n      }\n\n      // If nothing suspended before and we're rendering the same children,\n      // then the tail doesn't matter. Anything new that suspends will work\n      // in the \"together\" mode, so we can continue from the state we had.\n      const renderState = workInProgress.memoizedState;\n      if (renderState !== null) {\n        // Reset to the \"together\" mode in case we've started a different\n        // update in the past but didn't complete it.\n        renderState.rendering = null;\n        renderState.tail = null;\n        renderState.lastEffect = null;\n      }\n      pushSuspenseListContext(workInProgress, suspenseStackCursor.current);\n\n      if (hasChildWork) {\n        break;\n      } else {\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        return null;\n      }\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      // Need to check if the tree still needs to be deferred. This is\n      // almost identical to the logic used in the normal update path,\n      // so we'll just enter that. The only difference is we'll bail out\n      // at the next level instead of this one, because the child props\n      // have not changed. Which is fine.\n      // TODO: Probably should refactor `beginWork` to split the bailout\n      // path from the normal path. I'm tempted to do a labeled break here\n      // but I won't :)\n      workInProgress.lanes = NoLanes;\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        const instance: TracingMarkerInstance | null = workInProgress.stateNode;\n        if (instance !== null) {\n          pushMarkerInstance(workInProgress, instance);\n        }\n      }\n    }\n  }\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n        current,\n        renderLanes,\n      );\n      if (\n        !hasScheduledUpdateOrContext &&\n        // If this is the second pass of an error or suspense boundary, there\n        // may not be work scheduled on `current`, so we check for this flag.\n        (workInProgress.flags & DidCapture) === NoFlags\n      ) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\n      // Check if this child belongs to a list of muliple children in\n      // its parent.\n      //\n      // In a true multi-threaded implementation, we would render children on\n      // parallel threads. This would represent the beginning of a new render\n      // thread for this subtree.\n      //\n      // We only use this for id generation during hydration, which is why the\n      // logic is located in this special branch.\n      const slotIndex = workInProgress.index;\n      const numberOfForks = getForksAtLevel(workInProgress);\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\n    }\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      if (enableLegacyHidden) {\n        return updateLegacyHiddenComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        return updateCacheComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        return updateTracingMarkerComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {\n  ReactScopeInstance,\n  ReactContext,\n  Wakeable,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport {\n  enableSuspenseAvoidThisFallback,\n  enableLegacyHidden,\n} from 'shared/ReactFeatureFlags';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './Scheduler';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {NoMode, ConcurrentMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  Ref,\n  RefStatic,\n  Placement,\n  Update,\n  Visibility,\n  NoFlags,\n  DidCapture,\n  Snapshot,\n  ChildDeletion,\n  StaticMask,\n  MutationMask,\n  Passive,\n  Incomplete,\n  ShouldCapture,\n  ForceClientRender,\n} from './ReactFiberFlags';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  popSuspenseListContext,\n  popSuspenseHandler,\n  pushSuspenseListContext,\n  setShallowSuspenseListContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseListContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  popHiddenContext,\n  isCurrentTreeHidden,\n} from './ReactFiberHiddenContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  warnIfUnhydratedTailNodes,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n  hasUnhydratedTailNodes,\n  upgradeHydrationErrorsToRecoverable,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableProfilerTimer,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  getRenderTargetTime,\n  getWorkInProgressTransitions,\n} from './ReactFiberWorkLoop.old';\nimport {\n  OffscreenLane,\n  SomeRetryLane,\n  NoLanes,\n  includesSomeLane,\n  mergeLanes,\n} from './ReactFiberLane.old';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\nimport {popTreeContext} from './ReactFiberTreeContext.old';\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\nimport {\n  popMarkerInstance,\n  popRootMarkerInstance,\n} from './ReactFiberTracingMarkerComponent.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref | RefStatic;\n}\n\nfunction hadNoMutationsEffects(current: null | Fiber, completedWork: Fiber) {\n  const didBailout = current !== null && current.child === completedWork.child;\n  if (didBailout) {\n    return true;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return false;\n  }\n\n  // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n  let child = completedWork.child;\n  while (child !== null) {\n    if (\n      (child.flags & MutationMask) !== NoFlags ||\n      (child.subtreeFlags & MutationMask) !== NoFlags\n    ) {\n      return false;\n    }\n    child = child.sibling;\n  }\n  return true;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildren(parent, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildrenToContainer(containerChildSet, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction bubbleProperties(completedWork: Fiber) {\n  const didBailout =\n    completedWork.alternate !== null &&\n    completedWork.alternate.child === completedWork.child;\n\n  let newChildLanes = NoLanes;\n  let subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let actualDuration = completedWork.actualDuration;\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n        actualDuration += child.actualDuration;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n\n  return didBailout;\n}\n\nfunction completeDehydratedSuspenseBoundary(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextState: SuspenseState | null,\n): boolean {\n  if (\n    hasUnhydratedTailNodes() &&\n    (workInProgress.mode & ConcurrentMode) !== NoMode &&\n    (workInProgress.flags & DidCapture) === NoFlags\n  ) {\n    warnIfUnhydratedTailNodes(workInProgress);\n    resetHydrationState();\n    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n\n    return false;\n  }\n\n  const wasHydrated = popHydrationState(workInProgress);\n\n  if (nextState !== null && nextState.dehydrated !== null) {\n    // We might be inside a hydration state the first time we're picking up this\n    // Suspense boundary, and also after we've reentered it for further hydration.\n    if (current === null) {\n      if (!wasHydrated) {\n        throw new Error(\n          'A dehydrated suspense component was completed without a hydrated node. ' +\n            'This is probably a bug in React.',\n        );\n      }\n      prepareToHydrateHostSuspenseInstance(workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return false;\n    } else {\n      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n      resetHydrationState();\n      if ((workInProgress.flags & DidCapture) === NoFlags) {\n        // This boundary did not suspend so it's now hydrated and unsuspended.\n        workInProgress.memoizedState = null;\n      }\n      // If nothing suspended, we need to schedule an effect to mark this boundary\n      // as having hydrated so events know that they're free to be invoked.\n      // It's also a signal to replay events and the suspense callback.\n      // If something suspended, schedule an effect to attach retry listeners.\n      // So we might as well always mark this.\n      workInProgress.flags |= Update;\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return false;\n    }\n  } else {\n    // Successfully completed this tree. If this was a forced client render,\n    // there may have been recoverable errors during first hydration\n    // attempt. If so, add them to a queue so we can log them in the\n    // commit phase.\n    upgradeHydrationErrorsToRecoverable();\n\n    // Fall through to normal Suspense path\n    return true;\n  }\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostRoot: {\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n\n      if (enableTransitionTracing) {\n        const transitions = getWorkInProgressTransitions();\n        // We set the Passive flag here because if there are new transitions,\n        // we will need to schedule callbacks and process the transitions,\n        // which we do in the passive phase\n        if (transitions !== null) {\n          workInProgress.flags |= Passive;\n        }\n      }\n\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (current !== null) {\n          previousCache = current.memoizedState.cache;\n        }\n        const cache: Cache = workInProgress.memoizedState.cache;\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n        popCacheProvider(workInProgress, cache);\n      }\n\n      if (enableTransitionTracing) {\n        popRootMarkerInstance(workInProgress);\n      }\n\n      popRootTransition(workInProgress, fiberRoot, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else {\n          if (current !== null) {\n            const prevState: RootState = current.memoizedState;\n            if (\n              // Check if this is a client root\n              !prevState.isDehydrated ||\n              // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags\n            ) {\n              // Schedule an effect to clear this container at the start of the\n              // next commit. This handles the case of React rendering into a\n              // container with previous children. It's also safe to do for\n              // updates too, because current.child would only be null if the\n              // previous render was null (so the container would already\n              // be empty).\n              workInProgress.flags |= Snapshot;\n\n              // If this was a forced client render, there may have been\n              // recoverable errors during first hydration attempt. If so, add\n              // them to a queue so we can log them in the commit phase.\n              upgradeHydrationErrorsToRecoverable();\n            }\n          }\n        }\n      }\n      updateHostContainer(current, workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableTransitionTracing) {\n        if ((workInProgress.subtreeFlags & Visibility) !== NoFlags) {\n          // If any of our suspense children toggle visibility, this means that\n          // the pending boundaries array needs to be updated, which we only\n          // do in the passive phase.\n          workInProgress.flags |= Passive;\n        }\n      }\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          // This can happen when we abort work.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseHandler(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      // Special path for dehydrated boundaries. We may eventually move this\n      // to its own fiber type so that we can add other kinds of hydration\n      // boundaries that aren't associated with a Suspense tree. In anticipation\n      // of such a refactor, all the hydration logic is contained in\n      // this branch.\n      if (\n        current === null ||\n        (current.memoizedState !== null &&\n          current.memoizedState.dehydrated !== null)\n      ) {\n        const fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(\n          current,\n          workInProgress,\n          nextState,\n        );\n        if (!fallthroughToNormalSuspensePath) {\n          if (workInProgress.flags & ShouldCapture) {\n            // Special case. There were remaining unhydrated nodes. We treat\n            // this as a mismatch. Revert to client rendering.\n            return workInProgress;\n          } else {\n            // Did not finish hydrating, either because this is the initial\n            // render or because something suspended.\n            return null;\n          }\n        }\n\n        // Continue with the normal Suspense path.\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        // Don't bubble properties in this case.\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      const prevDidTimeout =\n        current !== null &&\n        (current.memoizedState: null | SuspenseState) !== null;\n\n      if (enableCache && nextDidTimeout) {\n        const offscreenFiber: Fiber = (workInProgress.child: any);\n        let previousCache: Cache | null = null;\n        if (\n          offscreenFiber.alternate !== null &&\n          offscreenFiber.alternate.memoizedState !== null &&\n          offscreenFiber.alternate.memoizedState.cachePool !== null\n        ) {\n          previousCache = offscreenFiber.alternate.memoizedState.cachePool.pool;\n        }\n        let cache: Cache | null = null;\n        if (\n          offscreenFiber.memoizedState !== null &&\n          offscreenFiber.memoizedState.cachePool !== null\n        ) {\n          cache = offscreenFiber.memoizedState.cachePool.pool;\n        }\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          offscreenFiber.flags |= Passive;\n        }\n      }\n\n      // If the suspended state of the boundary changes, we need to schedule\n      // a passive effect, which is when we process the transitions\n      if (nextDidTimeout !== prevDidTimeout) {\n        if (enableTransitionTracing) {\n          const offscreenFiber: Fiber = (workInProgress.child: any);\n          offscreenFiber.flags |= Passive;\n        }\n\n        // If the suspended state of the boundary changes, we need to schedule\n        // an effect to toggle the subtree's visibility. When we switch from\n        // fallback -> primary, the inner Offscreen fiber schedules this effect\n        // as part of its normal complete phase. But when we switch from\n        // primary -> fallback, the inner Offscreen fiber does not have a complete\n        // phase. So we need to schedule its effect here.\n        //\n        // We also use this flag to connect/disconnect the effects, but the same\n        // logic applies: when re-connecting, the Offscreen fiber's complete\n        // phase will handle scheduling the effect. It's only when the fallback\n        // is active that we have to do anything special.\n        if (nextDidTimeout) {\n          const offscreenFiber: Fiber = (workInProgress.child: any);\n          offscreenFiber.flags |= Visibility;\n\n          // TODO: This will still suspend a synchronous tree if anything\n          // in the concurrent tree already suspended during this render.\n          // This is a known bug.\n          if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n            // TODO: Move this back to throwException because this is too late\n            // if this is a large tree which is common for initial loads. We\n            // don't know if we should restart a render or not until we get\n            // this marker, and this is too late.\n            // If this render already had a ping or lower pri updates,\n            // and this is the first time we know we're going to suspend we\n            // should be able to immediately restart from within throwException.\n\n            // Check if this is a \"bad\" fallback state or a good one. A bad\n            // fallback state is one that we only show as a last resort; if this\n            // is a transition, we'll block it from displaying, and wait for\n            // more data to arrive.\n            const isBadFallback =\n              // It's bad to switch to a fallback if content is already visible\n              (current !== null && !prevDidTimeout && !isCurrentTreeHidden()) ||\n              // Experimental: Some fallbacks are always bad\n              (enableSuspenseAvoidThisFallback &&\n                workInProgress.memoizedProps.unstable_avoidThisFallback ===\n                  true);\n\n            if (isBadFallback) {\n              renderDidSuspendDelayIfPossible();\n            } else {\n              renderDidSuspend();\n            }\n          }\n        }\n      }\n\n      const wakeables: Set<Wakeable> | null = (workInProgress.updateQueue: any);\n      if (wakeables !== null) {\n        // Schedule an effect to attach a retry listener to the promise.\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          if (nextDidTimeout) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseListContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thenables. Instead, we'll transfer its thenables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThenables = suspended.updateQueue;\n                if (newThenables !== null) {\n                  workInProgress.updateQueue = newThenables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect flags before doing the second pass since that's now invalid.\n                // Reset the child fibers to their original state.\n                workInProgress.subtreeFlags = NoFlags;\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense List Context to force suspense and\n                // immediately rerender the children.\n                pushSuspenseListContext(\n                  workInProgress,\n                  setShallowSuspenseListContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                // Don't bubble properties in this case.\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThenables = suspended.updateQueue;\n            if (newThenables !== null) {\n              workInProgress.updateQueue = newThenables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We're done.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseListContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseListContext(\n            suspenseContext,\n          );\n        }\n        pushSuspenseListContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        // Don't bubble properties in this case.\n        return next;\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        bubbleProperties(workInProgress);\n        return null;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popSuspenseHandler(workInProgress);\n      popHiddenContext(workInProgress);\n      const nextState: OffscreenState | null = workInProgress.memoizedState;\n      const nextIsHidden = nextState !== null;\n\n      // Schedule a Visibility effect if the visibility has changed\n      if (enableLegacyHidden && workInProgress.tag === LegacyHiddenComponent) {\n        // LegacyHidden doesn't do any hiding — it only pre-renders.\n      } else {\n        if (current !== null) {\n          const prevState: OffscreenState | null = current.memoizedState;\n          const prevIsHidden = prevState !== null;\n          if (prevIsHidden !== nextIsHidden) {\n            workInProgress.flags |= Visibility;\n          }\n        } else {\n          // On initial mount, we only need a Visibility effect if the tree\n          // is hidden.\n          if (nextIsHidden) {\n            workInProgress.flags |= Visibility;\n          }\n        }\n      }\n\n      if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n        bubbleProperties(workInProgress);\n      } else {\n        // Don't bubble properties for hidden children unless we're rendering\n        // at offscreen priority.\n        if (\n          includesSomeLane(renderLanes, (OffscreenLane: Lane)) &&\n          // Also don't bubble if the tree suspended\n          (workInProgress.flags & DidCapture) === NoLanes\n        ) {\n          bubbleProperties(workInProgress);\n          // Check if there was an insertion or update in the hidden subtree.\n          // If so, we need to hide those nodes in the commit phase, so\n          // schedule a visibility effect.\n          if (\n            (!enableLegacyHidden ||\n              workInProgress.tag !== LegacyHiddenComponent) &&\n            workInProgress.subtreeFlags & (Placement | Update)\n          ) {\n            workInProgress.flags |= Visibility;\n          }\n        }\n      }\n\n      if (workInProgress.updateQueue !== null) {\n        // Schedule an effect to attach Suspense retry listeners\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (\n          current !== null &&\n          current.memoizedState !== null &&\n          current.memoizedState.cachePool !== null\n        ) {\n          previousCache = current.memoizedState.cachePool.pool;\n        }\n        let cache: Cache | null = null;\n        if (\n          workInProgress.memoizedState !== null &&\n          workInProgress.memoizedState.cachePool !== null\n        ) {\n          cache = workInProgress.memoizedState.cachePool.pool;\n        }\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n      }\n\n      popTransition(workInProgress, current);\n\n      return null;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (current !== null) {\n          previousCache = current.memoizedState.cache;\n        }\n        const cache: Cache = workInProgress.memoizedState.cache;\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n        popCacheProvider(workInProgress, cache);\n        bubbleProperties(workInProgress);\n      }\n      return null;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        const instance: TracingMarkerInstance | null = workInProgress.stateNode;\n        if (instance !== null) {\n          popMarkerInstance(workInProgress);\n        }\n        bubbleProperties(workInProgress);\n\n        if (\n          current === null ||\n          (workInProgress.subtreeFlags & Visibility) !== NoFlags\n        ) {\n          // If any of our suspense children toggle visibility, this means that\n          // the pending boundaries array needs to be updated, which we only\n          // do in the passive phase.\n          workInProgress.flags |= Passive;\n        }\n      }\n      return null;\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  enableProfilerTimer,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {\n  popSuspenseListContext,\n  popSuspenseHandler,\n} from './ReactFiberSuspenseContext.old';\nimport {popHiddenContext} from './ReactFiberHiddenContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {popTreeContext} from './ReactFiberTreeContext.old';\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\nimport {\n  popMarkerInstance,\n  popRootMarkerInstance,\n} from './ReactFiberTracingMarkerComponent.old';\n\nfunction unwindWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      const root: FiberRoot = workInProgress.stateNode;\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n\n      if (enableTransitionTracing) {\n        popRootMarkerInstance(workInProgress);\n      }\n\n      popRootTransition(workInProgress, root, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      if (\n        (flags & ShouldCapture) !== NoFlags &&\n        (flags & DidCapture) === NoFlags\n      ) {\n        // There was an error during render that wasn't captured by a suspense\n        // boundary. Do a second pass on the root to unmount the children.\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        return workInProgress;\n      }\n      // We unwound to the root without completing it. Exit.\n      return null;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseHandler(workInProgress);\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n      if (suspenseState !== null && suspenseState.dehydrated !== null) {\n        if (workInProgress.alternate === null) {\n          throw new Error(\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n        }\n\n        resetHydrationState();\n      }\n\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseListContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popSuspenseHandler(workInProgress);\n      popHiddenContext(workInProgress);\n      popTransition(workInProgress, current);\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      return null;\n    case TracingMarkerComponent:\n      if (enableTransitionTracing) {\n        if (workInProgress.stateNode !== null) {\n          popMarkerInstance(workInProgress);\n        }\n      }\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(\n  current: Fiber | null,\n  interruptedWork: Fiber,\n  renderLanes: Lanes,\n) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      const root: FiberRoot = interruptedWork.stateNode;\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n\n      if (enableTransitionTracing) {\n        popRootMarkerInstance(interruptedWork);\n      }\n\n      popRootTransition(interruptedWork, root, renderLanes);\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseHandler(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseListContext(interruptedWork);\n      break;\n    case ContextProvider:\n      const context: ReactContext<any> = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popSuspenseHandler(interruptedWork);\n      popHiddenContext(interruptedWork);\n      popTransition(interruptedWork, current);\n      break;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      break;\n    case TracingMarkerComponent:\n      if (enableTransitionTracing) {\n        const instance: TracingMarkerInstance | null =\n          interruptedWork.stateNode;\n        if (instance !== null) {\n          popMarkerInstance(interruptedWork);\n        }\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nfunction invokeGuardedCallbackProd<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n) {\n  const funcArgs = Array.prototype.slice.call(arguments, 3);\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this.onError(error);\n  }\n}\n\nlet invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\nif (__DEV__) {\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // unintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.dispatchEvent === 'function' &&\n    typeof document !== 'undefined' &&\n    typeof document.createEvent === 'function'\n  ) {\n    const fakeNode = document.createElement('react');\n\n    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev<\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      Context,\n    >(\n      name: string | null,\n      func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n      context: Context,\n      a: A,\n      b: B,\n      c: C,\n      d: D,\n      e: E,\n      f: F,\n    ) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebook/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      if (typeof document === 'undefined' || document === null) {\n        throw new Error(\n          'The `document` global was defined when React was initialized, but is not ' +\n            'defined anymore. This can happen in a test environment if a component ' +\n            'schedules an update from an asynchronous callback, but the test has already ' +\n            'finished running. To solve this, you can either unmount the component at ' +\n            'the end of your test (and ensure that any asynchronous operations get ' +\n            'canceled in `componentWillUnmount`), or you can change the test itself ' +\n            'to be asynchronous.',\n        );\n      }\n\n      const evt = document.createEvent('Event');\n\n      let didCall = false;\n      // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n      let didError = true;\n\n      // Keeps track of the value of window.event so that we can reset it\n      // during the callback to let user code access window.event in the\n      // browsers that support it.\n      const windowEvent = window.event;\n\n      // Keeps track of the descriptor of window.event to restore it after event\n      // dispatching: https://github.com/facebook/react/issues/13688\n      const windowEventDescriptor = Object.getOwnPropertyDescriptor(\n        window,\n        'event',\n      );\n\n      function restoreAfterDispatch() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false);\n\n        // We check for window.hasOwnProperty('event') to prevent the\n        // window.event assignment in both IE <= 10 as they throw an error\n        // \"Member not found\" in strict mode, and in Firefox which does not\n        // support window.event.\n        if (\n          typeof window.event !== 'undefined' &&\n          window.hasOwnProperty('event')\n        ) {\n          window.event = windowEvent;\n        }\n      }\n\n      // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n      const funcArgs = Array.prototype.slice.call(arguments, 3);\n      function callCallback() {\n        didCall = true;\n        restoreAfterDispatch();\n        func.apply(context, funcArgs);\n        didError = false;\n      }\n\n      // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n      let error;\n      // Use this to track whether the error event is ever called.\n      let didSetError = false;\n      let isCrossOriginError = false;\n\n      function handleWindowError(event) {\n        error = event.error;\n        didSetError = true;\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n        if (event.defaultPrevented) {\n          // Some other error handler has prevented default.\n          // Browsers silence the error report if this happens.\n          // We'll remember this to later decide whether to log it or not.\n          if (error != null && typeof error === 'object') {\n            try {\n              error._suppressLogging = true;\n            } catch (inner) {\n              // Ignore.\n            }\n          }\n        }\n      }\n\n      // Create a fake event type.\n      const evtType = `react-${name ? name : 'invokeguardedcallback'}`;\n\n      // Attach our event handlers\n      window.addEventListener('error', handleWindowError);\n      fakeNode.addEventListener(evtType, callCallback, false);\n\n      // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (windowEventDescriptor) {\n        Object.defineProperty(window, 'event', windowEventDescriptor);\n      }\n\n      if (didCall && didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error(\n            'An error was thrown inside one of your components, but React ' +\n              \"doesn't know what it was. This is likely due to browser \" +\n              'flakiness. React does its best to preserve the \"Pause on ' +\n              'exceptions\" behavior of the DevTools, which requires some ' +\n              \"DEV-mode only tricks. It's possible that these don't work in \" +\n              'your browser. Try triggering the error in production mode, ' +\n              'or switching to a modern browser. If you suspect that this is ' +\n              'actually an issue with React, please file an issue.',\n          );\n        } else if (isCrossOriginError) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error(\n            \"A cross-origin error was thrown. React doesn't have access to \" +\n              'the actual error object in development. ' +\n              'See https://reactjs.org/link/crossorigin-error for more information.',\n          );\n        }\n        this.onError(error);\n      }\n\n      // Remove our event listeners\n      window.removeEventListener('error', handleWindowError);\n\n      if (!didCall) {\n        // Something went really wrong, and our event was not dispatched.\n        // https://github.com/facebook/react/issues/16734\n        // https://github.com/facebook/react/issues/16585\n        // Fall back to the production implementation.\n        restoreAfterDispatch();\n        return invokeGuardedCallbackProd.apply(this, arguments);\n      }\n    };\n  }\n}\n\nexport default invokeGuardedCallbackImpl;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invokeGuardedCallbackImpl from './invokeGuardedCallbackImpl';\n\n// Used by Fiber to simulate a try-catch.\nlet hasError: boolean = false;\nlet caughtError: mixed = null;\n\n// Used by event system to capture/rethrow the first error.\nlet hasRethrowError: boolean = false;\nlet rethrowError: mixed = null;\n\nconst reporter = {\n  onError(error: mixed) {\n    hasError = true;\n    caughtError = error;\n  },\n};\n\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallback<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl.apply(reporter, arguments);\n}\n\n/**\n * Same as invokeGuardedCallback, but instead of returning an error, it stores\n * it in a global so it can be rethrown by `rethrowCaughtError` later.\n * TODO: See if caughtError and rethrowError can be unified.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallbackAndCatchFirstError<\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  Context,\n>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => void,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  invokeGuardedCallback.apply(this, arguments);\n  if (hasError) {\n    const error = clearCaughtError();\n    if (!hasRethrowError) {\n      hasRethrowError = true;\n      rethrowError = error;\n    }\n  }\n}\n\n/**\n * During execution of guarded functions we will capture the first error which\n * we will rethrow to be handled by the top level error handler.\n */\nexport function rethrowCaughtError() {\n  if (hasRethrowError) {\n    const error = rethrowError;\n    hasRethrowError = false;\n    rethrowError = null;\n    throw error;\n  }\n}\n\nexport function hasCaughtError() {\n  return hasError;\n}\n\nexport function clearCaughtError() {\n  if (hasError) {\n    const error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    throw new Error(\n      'clearCaughtError was called but no error was captured. This error ' +\n        'is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {\n  OffscreenState,\n  OffscreenInstance,\n  OffscreenQueue,\n} from './ReactFiberOffscreenComponent';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\nimport {\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableSchedulingProfiler,\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableStrictEffects,\n  deletedTreeCleanUpLevel,\n  enableUpdaterTracking,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {detachDeletedInstance} from './ReactFiberHostConfig';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  ChildDeletion,\n  Snapshot,\n  Update,\n  Callback,\n  Ref,\n  Hydrating,\n  Passive,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  Visibility,\n} from './ReactFiberFlags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n  getCurrentFiber as getCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  isCurrentUpdateNested,\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ConcurrentMode, NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  deferHiddenCallbacks,\n  commitHiddenCallbacks,\n  commitCallbacks,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n  prepareForCommit,\n  beforeActiveInstanceBlur,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveProfilerEffect,\n  restorePendingUpdaters,\n  addTransitionStartCallbackToPendingTransition,\n  addTransitionProgressCallbackToPendingTransition,\n  addTransitionCompleteCallbackToPendingTransition,\n  addMarkerProgressCallbackToPendingTransition,\n  addMarkerCompleteCallbackToPendingTransition,\n  setIsRunningInsertionEffect,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Insertion as HookInsertion,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\nimport {invokeGuardedCallback, clearCaughtError} from 'shared/ReactErrorUtils';\nimport {\n  isDevToolsPresent,\n  markComponentPassiveEffectMountStarted,\n  markComponentPassiveEffectMountStopped,\n  markComponentPassiveEffectUnmountStarted,\n  markComponentPassiveEffectUnmountStopped,\n  markComponentLayoutEffectMountStarted,\n  markComponentLayoutEffectMountStopped,\n  markComponentLayoutEffectUnmountStarted,\n  markComponentLayoutEffectUnmountStopped,\n  onCommitUnmount,\n} from './ReactFiberDevToolsHook.old';\nimport {releaseCache, retainCache} from './ReactFiberCacheComponent.old';\nimport {clearTransitionsForLanes} from './ReactFiberLane.old';\nimport {\n  OffscreenVisible,\n  OffscreenPassiveEffectsConnected,\n} from './ReactFiberOffscreenComponent';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\n// Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\nlet offscreenSubtreeIsHidden: boolean = false;\nlet offscreenSubtreeWasHidden: boolean = false;\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nlet nextEffect: Fiber | null = null;\n\n// Used for Profiling builds to track updaters.\nlet inProgressLanes: Lanes | null = null;\nlet inProgressRoot: FiberRoot | null = null;\n\nexport function reportUncaughtErrorInDEV(error: mixed) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  if (__DEV__) {\n    invokeGuardedCallback(null, () => {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyAttachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      let retVal;\n      try {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          current.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            retVal = ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          retVal = ref(null);\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n      if (__DEV__) {\n        if (typeof retVal === 'function') {\n          console.error(\n            'Unexpected return value from a callback ref in %s. ' +\n              'A callback ref should not return a function.',\n            getComponentNameFromFiber(current),\n          );\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  destroy: () => void,\n) {\n  try {\n    destroy();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function commitBeforeMutationEffects(\n  root: FiberRoot,\n  firstChild: Fiber,\n) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin();\n\n  // We no longer need to track the active instance fiber\n  const shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // This phase is only used for beforeActiveInstanceBlur.\n    // Let's skip the whole loop if it's off.\n    if (enableCreateEventHandleAPI) {\n      // TODO: Should wrap this in flags check, too, as optimization\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const deletion = deletions[i];\n          commitBeforeMutationEffectsDeletion(deletion);\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if (\n      (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags &&\n      child !== null\n    ) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork: Fiber) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  if (enableCreateEventHandleAPI) {\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      // Check to see if the focused element was inside of a hidden (Suspense) subtree.\n      // TODO: Move this out of the hot path using a dedicated effect tag.\n      if (\n        finishedWork.tag === SuspenseComponent &&\n        isSuspenseBoundaryBeingHidden(current, finishedWork) &&\n        doesFiberContain(finishedWork, focusedInstanceHandle)\n      ) {\n        shouldFireAfterActiveInstanceBlur = true;\n        beforeActiveInstanceBlur(finishedWork);\n      }\n    }\n  }\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentDebugFiberInDEV(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        break;\n      }\n      case ClassComponent: {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentNameFromFiber(finishedWork),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n        break;\n      }\n      case HostRoot: {\n        if (supportsMutation) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n        break;\n      }\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n      default: {\n        throw new Error(\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction commitBeforeMutationEffectsDeletion(deletion: Fiber) {\n  if (enableCreateEventHandleAPI) {\n    // TODO (effects) It would be nice to avoid calling doesFiberContain()\n    // Maybe we can repurpose one of the subtreeFlags positions for this instead?\n    // Use it to store which part of the tree the focused instance is in?\n    // This assumes we can safely determine that instance during the \"render\" phase.\n    if (doesFiberContain(deletion, ((focusedInstanceHandle: any): Fiber))) {\n      shouldFireAfterActiveInstanceBlur = true;\n      beforeActiveInstanceBlur(deletion);\n    }\n  }\n}\n\nfunction commitHookEffectListUnmount(\n  flags: HookFlags,\n  finishedWork: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectUnmountStarted(finishedWork);\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectUnmountStarted(finishedWork);\n            }\n          }\n\n          if (__DEV__) {\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(true);\n            }\n          }\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n          if (__DEV__) {\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(false);\n            }\n          }\n\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectUnmountStopped();\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectUnmountStopped();\n            }\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(flags: HookFlags, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        if (enableSchedulingProfiler) {\n          if ((flags & HookPassive) !== NoHookEffect) {\n            markComponentPassiveEffectMountStarted(finishedWork);\n          } else if ((flags & HookLayout) !== NoHookEffect) {\n            markComponentLayoutEffectMountStarted(finishedWork);\n          }\n        }\n\n        // Mount\n        const create = effect.create;\n        if (__DEV__) {\n          if ((flags & HookInsertion) !== NoHookEffect) {\n            setIsRunningInsertionEffect(true);\n          }\n        }\n        effect.destroy = create();\n        if (__DEV__) {\n          if ((flags & HookInsertion) !== NoHookEffect) {\n            setIsRunningInsertionEffect(false);\n          }\n        }\n\n        if (enableSchedulingProfiler) {\n          if ((flags & HookPassive) !== NoHookEffect) {\n            markComponentPassiveEffectMountStopped();\n          } else if ((flags & HookLayout) !== NoHookEffect) {\n            markComponentLayoutEffectMountStopped();\n          }\n        }\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let hookName;\n            if ((effect.tag & HookLayout) !== NoFlags) {\n              hookName = 'useLayoutEffect';\n            } else if ((effect.tag & HookInsertion) !== NoFlags) {\n              hookName = 'useInsertionEffect';\n            } else {\n              hookName = 'useEffect';\n            }\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote ' +\n                hookName +\n                '(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                hookName +\n                '(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              '%s must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              hookName,\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          let phase = finishedWork.alternate === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onPostCommit === 'function') {\n            onPostCommit(id, phase, passiveEffectDuration, commitTime);\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          outer: while (parentFiber !== null) {\n            switch (parentFiber.tag) {\n              case HostRoot:\n                const root = parentFiber.stateNode;\n                root.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n              case Profiler:\n                const parentStateNode = parentFiber.stateNode;\n                parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitHookLayoutEffects(finishedWork: Fiber, hookFlags: HookFlags) {\n  // At this point layout effects have already been destroyed (during mutation phase).\n  // This is done to prevent sibling component effects from interfering with each other,\n  // e.g. a destroy function in one component should never override a ref set\n  // by a create function in another component during the same commit.\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    finishedWork.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      commitHookEffectListMount(hookFlags, finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n    recordLayoutEffectDuration(finishedWork);\n  } else {\n    try {\n      commitHookEffectListMount(hookFlags, finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitClassLayoutLifecycles(\n  finishedWork: Fiber,\n  current: Fiber | null,\n) {\n  const instance = finishedWork.stateNode;\n  if (current === null) {\n    // We could update instance props and state here,\n    // but instead we rely on them being set during last render.\n    // TODO: revisit this when we implement resuming.\n    if (__DEV__) {\n      if (\n        finishedWork.type === finishedWork.elementType &&\n        !didWarnAboutReassigningProps\n      ) {\n        if (instance.props !== finishedWork.memoizedProps) {\n          console.error(\n            'Expected %s props to match memoized props before ' +\n              'componentDidMount. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.props`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n        if (instance.state !== finishedWork.memoizedState) {\n          console.error(\n            'Expected %s state to match memoized state before ' +\n              'componentDidMount. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.state`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n      }\n    }\n    if (\n      enableProfilerTimer &&\n      enableProfilerCommitHooks &&\n      finishedWork.mode & ProfileMode\n    ) {\n      try {\n        startLayoutEffectTimer();\n        instance.componentDidMount();\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n      recordLayoutEffectDuration(finishedWork);\n    } else {\n      try {\n        instance.componentDidMount();\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n  } else {\n    const prevProps =\n      finishedWork.elementType === finishedWork.type\n        ? current.memoizedProps\n        : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n    const prevState = current.memoizedState;\n    // We could update instance props and state here,\n    // but instead we rely on them being set during last render.\n    // TODO: revisit this when we implement resuming.\n    if (__DEV__) {\n      if (\n        finishedWork.type === finishedWork.elementType &&\n        !didWarnAboutReassigningProps\n      ) {\n        if (instance.props !== finishedWork.memoizedProps) {\n          console.error(\n            'Expected %s props to match memoized props before ' +\n              'componentDidUpdate. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.props`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n        if (instance.state !== finishedWork.memoizedState) {\n          console.error(\n            'Expected %s state to match memoized state before ' +\n              'componentDidUpdate. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.state`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n      }\n    }\n    if (\n      enableProfilerTimer &&\n      enableProfilerCommitHooks &&\n      finishedWork.mode & ProfileMode\n    ) {\n      try {\n        startLayoutEffectTimer();\n        instance.componentDidUpdate(\n          prevProps,\n          prevState,\n          instance.__reactInternalSnapshotBeforeUpdate,\n        );\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n      recordLayoutEffectDuration(finishedWork);\n    } else {\n      try {\n        instance.componentDidUpdate(\n          prevProps,\n          prevState,\n          instance.__reactInternalSnapshotBeforeUpdate,\n        );\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n  }\n}\n\nfunction commitClassCallbacks(finishedWork: Fiber) {\n  // TODO: I think this is now always non-null by the time it reaches the\n  // commit phase. Consider removing the type check.\n  const updateQueue: UpdateQueue<*> | null = (finishedWork.updateQueue: any);\n  if (updateQueue !== null) {\n    const instance = finishedWork.stateNode;\n    if (__DEV__) {\n      if (\n        finishedWork.type === finishedWork.elementType &&\n        !didWarnAboutReassigningProps\n      ) {\n        if (instance.props !== finishedWork.memoizedProps) {\n          console.error(\n            'Expected %s props to match memoized props before ' +\n              'processing the update queue. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.props`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n        if (instance.state !== finishedWork.memoizedState) {\n          console.error(\n            'Expected %s state to match memoized state before ' +\n              'processing the update queue. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.state`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n      }\n    }\n    // We could update instance props and state here,\n    // but instead we rely on them being set during last render.\n    // TODO: revisit this when we implement resuming.\n    try {\n      commitCallbacks(updateQueue, instance);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitHostComponentMount(finishedWork: Fiber) {\n  const type = finishedWork.type;\n  const props = finishedWork.memoizedProps;\n  const instance: Instance = finishedWork.stateNode;\n  try {\n    commitMount(instance, type, props, finishedWork);\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nfunction commitProfilerUpdate(finishedWork: Fiber, current: Fiber | null) {\n  if (enableProfilerTimer) {\n    try {\n      const {onCommit, onRender} = finishedWork.memoizedProps;\n      const {effectDuration} = finishedWork.stateNode;\n\n      const commitTime = getCommitTime();\n\n      let phase = current === null ? 'mount' : 'update';\n      if (enableProfilerNestedUpdatePhase) {\n        if (isCurrentUpdateNested()) {\n          phase = 'nested-update';\n        }\n      }\n\n      if (typeof onRender === 'function') {\n        onRender(\n          finishedWork.memoizedProps.id,\n          phase,\n          finishedWork.actualDuration,\n          finishedWork.treeBaseDuration,\n          finishedWork.actualStartTime,\n          commitTime,\n        );\n      }\n\n      if (enableProfilerCommitHooks) {\n        if (typeof onCommit === 'function') {\n          onCommit(\n            finishedWork.memoizedProps.id,\n            phase,\n            effectDuration,\n            commitTime,\n          );\n        }\n\n        // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n        // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n        // because the effect is also where times bubble to parent Profilers.\n        enqueuePendingPassiveProfilerEffect(finishedWork);\n\n        // Propagate layout effect durations to the next nearest Profiler ancestor.\n        // Do not reset these values until the next render so DevTools has a chance to read them first.\n        let parentFiber = finishedWork.return;\n        outer: while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              const root = parentFiber.stateNode;\n              root.effectDuration += effectDuration;\n              break outer;\n            case Profiler:\n              const parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += effectDuration;\n              break outer;\n          }\n          parentFiber = parentFiber.return;\n        }\n      }\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  // When updating this function, also update reappearLayoutEffects, which does\n  // most of the same things when an offscreen tree goes from hidden -> visible.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Update) {\n        commitHookLayoutEffects(finishedWork, HookLayout | HookHasEffect);\n      }\n      break;\n    }\n    case ClassComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Update) {\n        commitClassLayoutLifecycles(finishedWork, current);\n      }\n\n      if (flags & Callback) {\n        commitClassCallbacks(finishedWork);\n      }\n\n      if (flags & Ref) {\n        safelyAttachRef(finishedWork, finishedWork.return);\n      }\n      break;\n    }\n    case HostRoot: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Callback) {\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          let instance = null;\n          if (finishedWork.child !== null) {\n            switch (finishedWork.child.tag) {\n              case HostComponent:\n                instance = getPublicInstance(finishedWork.child.stateNode);\n                break;\n              case ClassComponent:\n                instance = finishedWork.child.stateNode;\n                break;\n            }\n          }\n          try {\n            commitCallbacks(updateQueue, instance);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      break;\n    }\n    case HostComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n\n      // Renderers may schedule work to be done after host components are mounted\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n      // These effects should only be committed when components are first mounted,\n      // aka when there is no current/alternate.\n      if (current === null && flags & Update) {\n        commitHostComponentMount(finishedWork);\n      }\n\n      if (flags & Ref) {\n        safelyAttachRef(finishedWork, finishedWork.return);\n      }\n      break;\n    }\n    case Profiler: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      // TODO: Should this fire inside an offscreen tree? Or should it wait to\n      // fire when the tree becomes visible again.\n      if (flags & Update) {\n        commitProfilerUpdate(finishedWork, current);\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Update) {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const isModernRoot = (finishedWork.mode & ConcurrentMode) !== NoMode;\n      if (isModernRoot) {\n        const isHidden = finishedWork.memoizedState !== null;\n        const newOffscreenSubtreeIsHidden =\n          isHidden || offscreenSubtreeIsHidden;\n        if (newOffscreenSubtreeIsHidden) {\n          // The Offscreen tree is hidden. Skip over its layout effects.\n        } else {\n          // The Offscreen tree is visible.\n\n          const wasHidden = current !== null && current.memoizedState !== null;\n          const newOffscreenSubtreeWasHidden =\n            wasHidden || offscreenSubtreeWasHidden;\n          const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n          const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n          offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n          if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n            // This is the root of a reappearing boundary. As we continue\n            // traversing the layout effects, we must also re-mount layout\n            // effects that were unmounted when the Offscreen subtree was\n            // hidden. So this is a superset of the normal commitLayoutEffects.\n            const includeWorkInProgressEffects =\n              (finishedWork.subtreeFlags & LayoutMask) !== NoFlags;\n            recursivelyTraverseReappearLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              includeWorkInProgressEffects,\n            );\n          } else {\n            recursivelyTraverseLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n            );\n          }\n          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        }\n      } else {\n        recursivelyTraverseLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n        );\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      break;\n    }\n  }\n}\n\nfunction commitTransitionProgress(offscreenFiber: Fiber) {\n  if (enableTransitionTracing) {\n    // This function adds suspense boundaries to the root\n    // or tracing marker's pendingBoundaries map.\n    // When a suspense boundary goes from a resolved to a fallback\n    // state we add the boundary to the map, and when it goes from\n    // a fallback to a resolved state, we remove the boundary from\n    // the map.\n\n    // We use stateNode on the Offscreen component as a stable object\n    // that doesnt change from render to render. This way we can\n    // distinguish between different Offscreen instances (vs. the same\n    // Offscreen instance with different fibers)\n    const offscreenInstance: OffscreenInstance = offscreenFiber.stateNode;\n\n    let prevState: SuspenseState | null = null;\n    const previousFiber = offscreenFiber.alternate;\n    if (previousFiber !== null && previousFiber.memoizedState !== null) {\n      prevState = previousFiber.memoizedState;\n    }\n    const nextState: SuspenseState | null = offscreenFiber.memoizedState;\n\n    const wasHidden = prevState !== null;\n    const isHidden = nextState !== null;\n\n    const pendingMarkers = offscreenInstance.pendingMarkers;\n    // If there is a name on the suspense boundary, store that in\n    // the pending boundaries.\n    let name = null;\n    const parent = offscreenFiber.return;\n    if (\n      parent !== null &&\n      parent.tag === SuspenseComponent &&\n      parent.memoizedProps.unstable_name\n    ) {\n      name = parent.memoizedProps.unstable_name;\n    }\n\n    if (!wasHidden && isHidden) {\n      // The suspense boundaries was just hidden. Add the boundary\n      // to the pending boundary set if it's there\n      if (pendingMarkers !== null) {\n        pendingMarkers.forEach(markerInstance => {\n          const pendingBoundaries = markerInstance.pendingBoundaries;\n          const transitions = markerInstance.transitions;\n          if (\n            pendingBoundaries !== null &&\n            !pendingBoundaries.has(offscreenInstance)\n          ) {\n            pendingBoundaries.set(offscreenInstance, {\n              name,\n            });\n            if (transitions !== null) {\n              if (markerInstance.name) {\n                addMarkerProgressCallbackToPendingTransition(\n                  markerInstance.name,\n                  transitions,\n                  pendingBoundaries,\n                );\n              } else {\n                transitions.forEach(transition => {\n                  addTransitionProgressCallbackToPendingTransition(\n                    transition,\n                    pendingBoundaries,\n                  );\n                });\n              }\n            }\n          }\n        });\n      }\n    } else if (wasHidden && !isHidden) {\n      // The suspense boundary went from hidden to visible. Remove\n      // the boundary from the pending suspense boundaries set\n      // if it's there\n      if (pendingMarkers !== null) {\n        pendingMarkers.forEach(markerInstance => {\n          const pendingBoundaries = markerInstance.pendingBoundaries;\n          const transitions = markerInstance.transitions;\n          if (\n            pendingBoundaries !== null &&\n            pendingBoundaries.has(offscreenInstance)\n          ) {\n            pendingBoundaries.delete(offscreenInstance);\n            if (transitions !== null) {\n              if (markerInstance.name) {\n                addMarkerProgressCallbackToPendingTransition(\n                  markerInstance.name,\n                  transitions,\n                  pendingBoundaries,\n                );\n              } else {\n                transitions.forEach(transition => {\n                  addTransitionProgressCallbackToPendingTransition(\n                    transition,\n                    pendingBoundaries,\n                  );\n                });\n              }\n            }\n          }\n        });\n      }\n    }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  let hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n          try {\n            const instance = node.stateNode;\n            if (isHidden) {\n              hideInstance(instance);\n            } else {\n              unhideInstance(node.stateNode, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          try {\n            const instance = node.stateNode;\n            if (isHidden) {\n              hideTextInstance(instance);\n            } else {\n              unhideTextInstance(instance, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden.\n        // Don't search any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      let retVal;\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          retVal = ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        retVal = ref(instanceToUse);\n      }\n      if (__DEV__) {\n        if (typeof retVal === 'function') {\n          console.error(\n            'Unexpected return value from a callback ref in %s. ' +\n              'A callback ref should not return a function.',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          currentRef(null);\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        currentRef(null);\n      }\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  }\n\n  // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n  if (!(deletedTreeCleanUpLevel >= 2)) {\n    // This is the default branch (level 0).\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.dependencies = null;\n    fiber.memoizedProps = null;\n    fiber.memoizedState = null;\n    fiber.pendingProps = null;\n    fiber.sibling = null;\n    fiber.stateNode = null;\n    fiber.updateQueue = null;\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n  } else {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null;\n\n    // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n    if (fiber.tag === HostComponent) {\n      const hostInstance: Instance = fiber.stateNode;\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n    fiber.stateNode = null;\n\n    // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n\n    if (deletedTreeCleanUpLevel >= 3) {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null;\n      // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n\n  throw new Error(\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  switch (parentFiber.tag) {\n    case HostComponent: {\n      const parent: Instance = parentFiber.stateNode;\n      if (parentFiber.flags & ContentReset) {\n        // Reset the text content of the parent before doing any insertions\n        resetTextContent(parent);\n        // Clear ContentReset from the effect tag\n        parentFiber.flags &= ~ContentReset;\n      }\n\n      const before = getHostSibling(finishedWork);\n      // We only have the top Fiber that was inserted but we need to recurse down its\n      // children to find all the terminal nodes.\n      insertOrAppendPlacementNode(finishedWork, before, parent);\n      break;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const parent: Container = parentFiber.stateNode.containerInfo;\n      const before = getHostSibling(finishedWork);\n      insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n      break;\n    }\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      throw new Error(\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\n// These are tracked on the stack as we recursively traverse a\n// deleted subtree.\n// TODO: Update these during the whole mutation phase, not just during\n// a deletion.\nlet hostParent: Instance | Container | null = null;\nlet hostParentIsContainer: boolean = false;\n\nfunction commitDeletionEffects(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  deletedFiber: Fiber,\n) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was deleted but we need to recurse down its\n    // children to find all the terminal nodes.\n\n    // Recursively delete all host nodes from the parent, detach refs, clean\n    // up mounted layout effects, and call componentWillUnmount.\n\n    // We only need to remove the topmost host child in each branch. But then we\n    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n    // could split this into two separate traversals functions, where the second\n    // one doesn't include any removeChild logic. This is maybe the same\n    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n    // the layout phase is refactored to use recursion).\n\n    // Before starting, find the nearest host parent on the stack so we know\n    // which instance/container to remove the children from.\n    // TODO: Instead of searching up the fiber return path on every deletion, we\n    // can track the nearest host component on the JS stack as we traverse the\n    // tree during the commit phase. This would make insertions faster, too.\n    let parent = returnFiber;\n    findParent: while (parent !== null) {\n      switch (parent.tag) {\n        case HostComponent: {\n          hostParent = parent.stateNode;\n          hostParentIsContainer = false;\n          break findParent;\n        }\n        case HostRoot: {\n          hostParent = parent.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          break findParent;\n        }\n        case HostPortal: {\n          hostParent = parent.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          break findParent;\n        }\n      }\n      parent = parent.return;\n    }\n    if (hostParent === null) {\n      throw new Error(\n        'Expected to find a host parent. This error is likely caused by ' +\n          'a bug in React. Please file an issue.',\n      );\n    }\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n    hostParent = null;\n    hostParentIsContainer = false;\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n  }\n\n  detachFiberMutation(deletedFiber);\n}\n\nfunction recursivelyTraverseDeletionEffects(\n  finishedRoot,\n  nearestMountedAncestor,\n  parent,\n) {\n  // TODO: Use a static flag to skip trees that don't have unmount effects\n  let child = parent.child;\n  while (child !== null) {\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n    child = child.sibling;\n  }\n}\n\nfunction commitDeletionEffectsOnFiber(\n  finishedRoot: FiberRoot,\n  nearestMountedAncestor: Fiber,\n  deletedFiber: Fiber,\n) {\n  onCommitUnmount(deletedFiber);\n\n  // The cases in this outer switch modify the stack before they traverse\n  // into their subtree. There are simpler cases in the inner switch\n  // that don't modify the stack.\n  switch (deletedFiber.tag) {\n    case HostComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      }\n      // Intentional fallthrough to next branch\n    }\n    // eslint-disable-next-line-no-fallthrough\n    case HostText: {\n      // We only need to remove the nearest host child. Set the host parent\n      // to `null` on the stack to indicate that nested children don't\n      // need to be removed.\n      if (supportsMutation) {\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = null;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n\n        if (hostParent !== null) {\n          // Now that all the child effects have unmounted, we can remove the\n          // node from the tree.\n          if (hostParentIsContainer) {\n            removeChildFromContainer(\n              ((hostParent: any): Container),\n              (deletedFiber.stateNode: Instance | TextInstance),\n            );\n          } else {\n            removeChild(\n              ((hostParent: any): Instance),\n              (deletedFiber.stateNode: Instance | TextInstance),\n            );\n          }\n        }\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((deletedFiber.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Dehydrated fragments don't have any children\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (supportsMutation) {\n        if (hostParent !== null) {\n          if (hostParentIsContainer) {\n            clearSuspenseBoundaryFromContainer(\n              ((hostParent: any): Container),\n              (deletedFiber.stateNode: SuspenseInstance),\n            );\n          } else {\n            clearSuspenseBoundary(\n              ((hostParent: any): Instance),\n              (deletedFiber.stateNode: SuspenseInstance),\n            );\n          }\n        }\n      }\n      return;\n    }\n    case HostPortal: {\n      if (supportsMutation) {\n        // When we go into a portal, it becomes the parent to remove from.\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = deletedFiber.stateNode.containerInfo;\n        hostParentIsContainer = true;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n      } else {\n        emptyPortalContainer(deletedFiber);\n\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      return;\n    }\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        const updateQueue: FunctionComponentUpdateQueue | null = (deletedFiber.updateQueue: any);\n        if (updateQueue !== null) {\n          const lastEffect = updateQueue.lastEffect;\n          if (lastEffect !== null) {\n            const firstEffect = lastEffect.next;\n\n            let effect = firstEffect;\n            do {\n              const {destroy, tag} = effect;\n              if (destroy !== undefined) {\n                if ((tag & HookInsertion) !== NoHookEffect) {\n                  safelyCallDestroy(\n                    deletedFiber,\n                    nearestMountedAncestor,\n                    destroy,\n                  );\n                } else if ((tag & HookLayout) !== NoHookEffect) {\n                  if (enableSchedulingProfiler) {\n                    markComponentLayoutEffectUnmountStarted(deletedFiber);\n                  }\n\n                  if (\n                    enableProfilerTimer &&\n                    enableProfilerCommitHooks &&\n                    deletedFiber.mode & ProfileMode\n                  ) {\n                    startLayoutEffectTimer();\n                    safelyCallDestroy(\n                      deletedFiber,\n                      nearestMountedAncestor,\n                      destroy,\n                    );\n                    recordLayoutEffectDuration(deletedFiber);\n                  } else {\n                    safelyCallDestroy(\n                      deletedFiber,\n                      nearestMountedAncestor,\n                      destroy,\n                    );\n                  }\n\n                  if (enableSchedulingProfiler) {\n                    markComponentLayoutEffectUnmountStopped();\n                  }\n                }\n              }\n              effect = effect.next;\n            } while (effect !== firstEffect);\n          }\n        }\n      }\n\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case ClassComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        const instance = deletedFiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(\n            deletedFiber,\n            nearestMountedAncestor,\n            instance,\n          );\n        }\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case OffscreenComponent: {\n      if (deletedFiber.mode & ConcurrentMode) {\n        // If this offscreen component is hidden, we already unmounted it. Before\n        // deleting the children, track that it's already unmounted so that we\n        // don't attempt to unmount the effects again.\n        // TODO: If the tree is hidden, in most cases we should be able to skip\n        // over the nested children entirely. An exception is we haven't yet found\n        // the topmost host node to delete, which we already track on the stack.\n        // But the other case is portals, which need to be detached no matter how\n        // deeply they are nested. We should use a subtree flag to track whether a\n        // subtree includes a nested portal.\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeWasHidden =\n          prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n  }\n}\nfunction commitSuspenseCallback(finishedWork: Fiber) {\n  // TODO: Move this to passive phase\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          try {\n            commitHydratedSuspenseInstance(suspenseInstance);\n            if (enableSuspenseCallback) {\n              const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n              if (hydrationCallbacks !== null) {\n                const onHydrated = hydrationCallbacks.onHydrated;\n                if (onHydrated) {\n                  onHydrated(suspenseInstance);\n                }\n              }\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction getRetryCache(finishedWork) {\n  // TODO: Unify the interface for the retry cache so we don't have to switch\n  // on the tag like this.\n  switch (finishedWork.tag) {\n    case SuspenseComponent:\n    case SuspenseListComponent: {\n      let retryCache = finishedWork.stateNode;\n      if (retryCache === null) {\n        retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n      }\n      return retryCache;\n    }\n    case OffscreenComponent: {\n      const instance: OffscreenInstance = finishedWork.stateNode;\n      let retryCache = instance.retryCache;\n      if (retryCache === null) {\n        retryCache = instance.retryCache = new PossiblyWeakSet();\n      }\n      return retryCache;\n    }\n    default: {\n      throw new Error(\n        `Unexpected Suspense handler tag (${finishedWork.tag}). This is a ` +\n          'bug in React.',\n      );\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(\n  finishedWork: Fiber,\n  wakeables: Set<Wakeable>,\n) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const retryCache = getRetryCache(finishedWork);\n  wakeables.forEach(wakeable => {\n    // Memoize using the boundary fiber to prevent redundant listeners.\n    const retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n    if (!retryCache.has(wakeable)) {\n      retryCache.add(wakeable);\n\n      if (enableUpdaterTracking) {\n        if (isDevToolsPresent) {\n          if (inProgressLanes !== null && inProgressRoot !== null) {\n            // If we have pending work still, associate the original updaters with it.\n            restorePendingUpdaters(inProgressRoot, inProgressLanes);\n          } else {\n            throw Error(\n              'Expected finished root and lanes to be set. This is a bug in React.',\n            );\n          }\n        }\n      }\n\n      wakeable.then(retry, retry);\n    }\n  });\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nexport function commitMutationEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n\n  setCurrentDebugFiberInDEV(finishedWork);\n  commitMutationEffectsOnFiber(finishedWork, root, committedLanes);\n  setCurrentDebugFiberInDEV(finishedWork);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseMutationEffects(\n  root: FiberRoot,\n  parentFiber: Fiber,\n  lanes: Lanes,\n) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects hae fired.\n  const deletions = parentFiber.deletions;\n  if (deletions !== null) {\n    for (let i = 0; i < deletions.length; i++) {\n      const childToDelete = deletions[i];\n      try {\n        commitDeletionEffects(root, parentFiber, childToDelete);\n      } catch (error) {\n        captureCommitPhaseError(childToDelete, parentFiber, error);\n      }\n    }\n  }\n\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  if (parentFiber.subtreeFlags & MutationMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      commitMutationEffectsOnFiber(child, root, lanes);\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitMutationEffectsOnFiber(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  lanes: Lanes,\n) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconcilation, because those can be set on all fiber types.\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        try {\n          commitHookEffectListUnmount(\n            HookInsertion | HookHasEffect,\n            finishedWork,\n            finishedWork.return,\n          );\n          commitHookEffectListMount(\n            HookInsertion | HookHasEffect,\n            finishedWork,\n          );\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Ref) {\n        if (current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n\n      if (flags & Callback && offscreenSubtreeIsHidden) {\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          deferHiddenCallbacks(updateQueue);\n        }\n      }\n      return;\n    }\n    case HostComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Ref) {\n        if (current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n      if (supportsMutation) {\n        // TODO: ContentReset gets cleared by the children during the commit\n        // phase. This is a refactor hazard because it means we must read\n        // flags the flags after `commitReconciliationEffects` has already run;\n        // the order matters. We should refactor so that ContentReset does not\n        // rely on mutating the flag during commit. Like by setting a flag\n        // during the render phase instead.\n        if (finishedWork.flags & ContentReset) {\n          const instance: Instance = finishedWork.stateNode;\n          try {\n            resetTextContent(instance);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n\n        if (flags & Update) {\n          const instance: Instance = finishedWork.stateNode;\n          if (instance != null) {\n            // Commit the work prepared earlier.\n            const newProps = finishedWork.memoizedProps;\n            // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n            const oldProps =\n              current !== null ? current.memoizedProps : newProps;\n            const type = finishedWork.type;\n            // TODO: Type the updateQueue to be specific to host components.\n            const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n            finishedWork.updateQueue = null;\n            if (updatePayload !== null) {\n              try {\n                commitUpdate(\n                  instance,\n                  updatePayload,\n                  type,\n                  oldProps,\n                  newProps,\n                  finishedWork,\n                );\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error,\n                );\n              }\n            }\n          }\n        }\n      }\n      return;\n    }\n    case HostText: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsMutation) {\n          if (finishedWork.stateNode === null) {\n            throw new Error(\n              'This should have a text node initialized. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          const textInstance: TextInstance = finishedWork.stateNode;\n          const newText: string = finishedWork.memoizedProps;\n          // For hydration we reuse the update path but we treat the oldProps\n          // as the newProps. The updatePayload will contain the real change in\n          // this case.\n          const oldText: string =\n            current !== null ? current.memoizedProps : newText;\n\n          try {\n            commitTextUpdate(textInstance, oldText, newText);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case HostRoot: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsMutation && supportsHydration) {\n          if (current !== null) {\n            const prevRootState: RootState = current.memoizedState;\n            if (prevRootState.isDehydrated) {\n              try {\n                commitHydratedContainer(root.containerInfo);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error,\n                );\n              }\n            }\n          }\n        }\n        if (supportsPersistence) {\n          const containerInfo = root.containerInfo;\n          const pendingChildren = root.pendingChildren;\n          try {\n            replaceContainerChildren(containerInfo, pendingChildren);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case HostPortal: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsPersistence) {\n          const portal = finishedWork.stateNode;\n          const containerInfo = portal.containerInfo;\n          const pendingChildren = portal.pendingChildren;\n          try {\n            replaceContainerChildren(containerInfo, pendingChildren);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      const offscreenFiber: Fiber = (finishedWork.child: any);\n\n      if (offscreenFiber.flags & Visibility) {\n        const newState: OffscreenState | null = offscreenFiber.memoizedState;\n        const isHidden = newState !== null;\n        if (isHidden) {\n          const wasHidden =\n            offscreenFiber.alternate !== null &&\n            offscreenFiber.alternate.memoizedState !== null;\n          if (!wasHidden) {\n            // TODO: Move to passive phase\n            markCommitTimeOfFallback();\n          }\n        }\n      }\n\n      if (flags & Update) {\n        try {\n          commitSuspenseCallback(finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n        if (wakeables !== null) {\n          finishedWork.updateQueue = null;\n          attachSuspenseRetryListeners(finishedWork, wakeables);\n        }\n      }\n      return;\n    }\n    case OffscreenComponent: {\n      const newState: OffscreenState | null = finishedWork.memoizedState;\n      const isHidden = newState !== null;\n      const wasHidden = current !== null && current.memoizedState !== null;\n\n      if (finishedWork.mode & ConcurrentMode) {\n        // Before committing the children, track on the stack whether this\n        // offscreen subtree was already hidden, so that we don't unmount the\n        // effects again.\n        const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n      } else {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      }\n\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Visibility) {\n        const offscreenInstance: OffscreenInstance = finishedWork.stateNode;\n        const offscreenBoundary: Fiber = finishedWork;\n\n        // Track the current state on the Offscreen instance so we can\n        // read it during an event\n        if (isHidden) {\n          offscreenInstance.visibility &= ~OffscreenVisible;\n        } else {\n          offscreenInstance.visibility |= OffscreenVisible;\n        }\n\n        if (isHidden) {\n          if (!wasHidden) {\n            if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n              // Disappear the layout effects of all the children\n              recursivelyTraverseDisappearLayoutEffects(offscreenBoundary);\n            }\n          }\n        } else {\n          if (wasHidden) {\n            // TODO: Move re-appear call here for symmetry?\n          }\n        }\n\n        if (supportsMutation) {\n          // TODO: This needs to run whenever there's an insertion or update\n          // inside a hidden Offscreen tree.\n          hideOrUnhideAllChildren(offscreenBoundary, isHidden);\n        }\n      }\n\n      // TODO: Move to passive phase\n      if (flags & Update) {\n        const offscreenQueue: OffscreenQueue | null = (finishedWork.updateQueue: any);\n        if (offscreenQueue !== null) {\n          const wakeables = offscreenQueue.wakeables;\n          if (wakeables !== null) {\n            offscreenQueue.wakeables = null;\n            attachSuspenseRetryListeners(finishedWork, wakeables);\n          }\n        }\n      }\n      return;\n    }\n    case SuspenseListComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n        if (wakeables !== null) {\n          finishedWork.updateQueue = null;\n          attachSuspenseRetryListeners(finishedWork, wakeables);\n        }\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork);\n\n        // TODO: This is a temporary solution that allowed us to transition away\n        // from React Flare on www.\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(finishedWork, finishedWork.return);\n          }\n          safelyAttachRef(finishedWork, finishedWork.return);\n        }\n        if (flags & Update) {\n          const scopeInstance = finishedWork.stateNode;\n          prepareScopeUpdate(scopeInstance, finishedWork);\n        }\n      }\n      return;\n    }\n    default: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      return;\n    }\n  }\n}\nfunction commitReconciliationEffects(finishedWork: Fiber) {\n  // Placement effects (insertions, reorders) can be scheduled on any fiber\n  // type. They needs to happen after the children effects have fired, but\n  // before the effects on this fiber have fired.\n  const flags = finishedWork.flags;\n  if (flags & Placement) {\n    try {\n      commitPlacement(finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n    // Clear the \"placement\" from effect tag so that we know that this is\n    // inserted, before any life-cycles like componentDidMount gets called.\n    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n    // and isMounted is deprecated anyway so we should be able to kill this.\n    finishedWork.flags &= ~Placement;\n  }\n  if (flags & Hydrating) {\n    finishedWork.flags &= ~Hydrating;\n  }\n}\n\nexport function commitLayoutEffects(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n): void {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n\n  const current = finishedWork.alternate;\n  commitLayoutEffectOnFiber(root, current, finishedWork, committedLanes);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseLayoutEffects(\n  root: FiberRoot,\n  parentFiber: Fiber,\n  lanes: Lanes,\n) {\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  if (parentFiber.subtreeFlags & LayoutMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      const current = child.alternate;\n      commitLayoutEffectOnFiber(root, current, child, lanes);\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction disappearLayoutEffects(finishedWork: Fiber) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      // TODO (Offscreen) Check: flags & LayoutStatic\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListUnmount(\n            HookLayout,\n            finishedWork,\n            finishedWork.return,\n          );\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListUnmount(\n          HookLayout,\n          finishedWork,\n          finishedWork.return,\n        );\n      }\n\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n    case ClassComponent: {\n      // TODO (Offscreen) Check: flags & RefStatic\n      safelyDetachRef(finishedWork, finishedWork.return);\n\n      const instance = finishedWork.stateNode;\n      if (typeof instance.componentWillUnmount === 'function') {\n        safelyCallComponentWillUnmount(\n          finishedWork,\n          finishedWork.return,\n          instance,\n        );\n      }\n\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n    case HostComponent: {\n      // TODO (Offscreen) Check: flags & RefStatic\n      safelyDetachRef(finishedWork, finishedWork.return);\n\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n    case OffscreenComponent: {\n      const isHidden = finishedWork.memoizedState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is already hidden. Don't disappear\n        // its effects.\n      } else {\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n  }\n}\n\nfunction recursivelyTraverseDisappearLayoutEffects(parentFiber: Fiber) {\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n  let child = parentFiber.child;\n  while (child !== null) {\n    disappearLayoutEffects(child);\n    child = child.sibling;\n  }\n}\n\nfunction reappearLayoutEffects(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  includeWorkInProgressEffects: boolean,\n) {\n  // Turn on layout effects in a tree that previously disappeared.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n      // TODO: Check flags & LayoutStatic\n      commitHookLayoutEffects(finishedWork, HookLayout);\n      break;\n    }\n    case ClassComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n\n      // TODO: Check for LayoutStatic flag\n      const instance = finishedWork.stateNode;\n      if (typeof instance.componentDidMount === 'function') {\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n\n      // Commit any callbacks that would have fired while the component\n      // was hidden.\n      const updateQueue: UpdateQueue<\n        *,\n      > | null = (finishedWork.updateQueue: any);\n      if (updateQueue !== null) {\n        commitHiddenCallbacks(updateQueue, instance);\n      }\n\n      // If this is newly finished work, check for setState callbacks\n      if (includeWorkInProgressEffects && flags & Callback) {\n        commitClassCallbacks(finishedWork);\n      }\n\n      // TODO: Check flags & RefStatic\n      safelyAttachRef(finishedWork, finishedWork.return);\n      break;\n    }\n    // Unlike commitLayoutEffectsOnFiber, we don't need to handle HostRoot\n    // because this function only visits nodes that are inside an\n    // Offscreen fiber.\n    // case HostRoot: {\n    //  ...\n    // }\n    case HostComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n\n      // Renderers may schedule work to be done after host components are mounted\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n      // These effects should only be committed when components are first mounted,\n      // aka when there is no current/alternate.\n      if (includeWorkInProgressEffects && current === null && flags & Update) {\n        commitHostComponentMount(finishedWork);\n      }\n\n      // TODO: Check flags & Ref\n      safelyAttachRef(finishedWork, finishedWork.return);\n      break;\n    }\n    case Profiler: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n      // TODO: Figure out how Profiler updates should work with Offscreen\n      if (includeWorkInProgressEffects && flags & Update) {\n        commitProfilerUpdate(finishedWork, current);\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n\n      // TODO: Figure out how Suspense hydration callbacks should work\n      // with Offscreen.\n      if (includeWorkInProgressEffects && flags & Update) {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const offscreenState: OffscreenState = finishedWork.memoizedState;\n      const isHidden = offscreenState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n      } else {\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          includeWorkInProgressEffects,\n        );\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        includeWorkInProgressEffects,\n      );\n      break;\n    }\n  }\n}\n\nfunction recursivelyTraverseReappearLayoutEffects(\n  finishedRoot: FiberRoot,\n  parentFiber: Fiber,\n  committedLanes: Lanes,\n  includeWorkInProgressEffects: boolean,\n) {\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  const childShouldIncludeWorkInProgressEffects =\n    includeWorkInProgressEffects &&\n    (parentFiber.subtreeFlags & LayoutMask) !== NoFlags;\n\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  let child = parentFiber.child;\n  while (child !== null) {\n    const current = child.alternate;\n    reappearLayoutEffects(\n      finishedRoot,\n      current,\n      child,\n      committedLanes,\n      childShouldIncludeWorkInProgressEffects,\n    );\n    child = child.sibling;\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitHookPassiveMountEffects(\n  finishedWork: Fiber,\n  hookFlags: HookFlags,\n) {\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    finishedWork.mode & ProfileMode\n  ) {\n    startPassiveEffectTimer();\n    try {\n      commitHookEffectListMount(hookFlags, finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n    recordPassiveEffectDuration(finishedWork);\n  } else {\n    try {\n      commitHookEffectListMount(hookFlags, finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitOffscreenPassiveMountEffects(\n  current: Fiber | null,\n  finishedWork: Fiber,\n  instance: OffscreenInstance,\n) {\n  if (enableCache) {\n    let previousCache: Cache | null = null;\n    if (\n      current !== null &&\n      current.memoizedState !== null &&\n      current.memoizedState.cachePool !== null\n    ) {\n      previousCache = current.memoizedState.cachePool.pool;\n    }\n    let nextCache: Cache | null = null;\n    if (\n      finishedWork.memoizedState !== null &&\n      finishedWork.memoizedState.cachePool !== null\n    ) {\n      nextCache = finishedWork.memoizedState.cachePool.pool;\n    }\n    // Retain/release the cache used for pending (suspended) nodes.\n    // Note that this is only reached in the non-suspended/visible case:\n    // when the content is suspended/hidden, the retain/release occurs\n    // via the parent Suspense component (see case above).\n    if (nextCache !== previousCache) {\n      if (nextCache != null) {\n        retainCache(nextCache);\n      }\n      if (previousCache != null) {\n        releaseCache(previousCache);\n      }\n    }\n  }\n\n  if (enableTransitionTracing) {\n    // TODO: Pre-rendering should not be counted as part of a transition. We\n    // may add separate logs for pre-rendering, but it's not part of the\n    // primary metrics.\n    const offscreenState: OffscreenState = finishedWork.memoizedState;\n    const queue: OffscreenQueue | null = (finishedWork.updateQueue: any);\n\n    const isHidden = offscreenState !== null;\n    if (queue !== null) {\n      if (isHidden) {\n        const transitions = queue.transitions;\n        if (transitions !== null) {\n          transitions.forEach(transition => {\n            // Add all the transitions saved in the update queue during\n            // the render phase (ie the transitions associated with this boundary)\n            // into the transitions set.\n            if (instance.transitions === null) {\n              instance.transitions = new Set();\n            }\n            instance.transitions.add(transition);\n          });\n        }\n\n        const markerInstances = queue.markerInstances;\n        if (markerInstances !== null) {\n          markerInstances.forEach(markerInstance => {\n            const markerTransitions = markerInstance.transitions;\n            // There should only be a few tracing marker transitions because\n            // they should be only associated with the transition that\n            // caused them\n            if (markerTransitions !== null) {\n              markerTransitions.forEach(transition => {\n                if (instance.transitions === null) {\n                  instance.transitions = new Set();\n                } else if (instance.transitions.has(transition)) {\n                  if (markerInstance.pendingBoundaries === null) {\n                    markerInstance.pendingBoundaries = new Map();\n                  }\n                  if (instance.pendingMarkers === null) {\n                    instance.pendingMarkers = new Set();\n                  }\n\n                  instance.pendingMarkers.add(markerInstance);\n                }\n              });\n            }\n          });\n        }\n      }\n\n      finishedWork.updateQueue = null;\n    }\n\n    commitTransitionProgress(finishedWork);\n  }\n}\n\nfunction commitCachePassiveMountEffect(\n  current: Fiber | null,\n  finishedWork: Fiber,\n) {\n  if (enableCache) {\n    let previousCache: Cache | null = null;\n    if (finishedWork.alternate !== null) {\n      previousCache = finishedWork.alternate.memoizedState.cache;\n    }\n    const nextCache = finishedWork.memoizedState.cache;\n    // Retain/release the cache. In theory the cache component\n    // could be \"borrowing\" a cache instance owned by some parent,\n    // in which case we could avoid retaining/releasing. But it\n    // is non-trivial to determine when that is the case, so we\n    // always retain/release.\n    if (nextCache !== previousCache) {\n      retainCache(nextCache);\n      if (previousCache != null) {\n        releaseCache(previousCache);\n      }\n    }\n  }\n}\n\nfunction commitTracingMarkerPassiveMountEffect(finishedWork: Fiber) {\n  // Get the transitions that were initiatized during the render\n  // and add a start transition callback for each of them\n  const instance = finishedWork.stateNode;\n  if (\n    instance.transitions !== null &&\n    (instance.pendingBoundaries === null ||\n      instance.pendingBoundaries.size === 0)\n  ) {\n    instance.transitions.forEach(transition => {\n      addMarkerCompleteCallbackToPendingTransition(\n        finishedWork.memoizedProps.name,\n        instance.transitions,\n      );\n    });\n    instance.transitions = null;\n    instance.pendingBoundaries = null;\n  }\n}\n\nexport function commitPassiveMountEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n): void {\n  setCurrentDebugFiberInDEV(finishedWork);\n  commitPassiveMountOnFiber(\n    root,\n    finishedWork,\n    committedLanes,\n    committedTransitions,\n  );\n  resetCurrentDebugFiberInDEV();\n}\n\nfunction recursivelyTraversePassiveMountEffects(\n  root: FiberRoot,\n  parentFiber: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  if (parentFiber.subtreeFlags & PassiveMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      commitPassiveMountOnFiber(\n        root,\n        child,\n        committedLanes,\n        committedTransitions,\n      );\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitPassiveMountOnFiber(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n): void {\n  // When updating this function, also update reconnectPassiveEffects, which does\n  // most of the same things when an offscreen tree goes from hidden -> visible,\n  // or when toggling effects inside a hidden tree.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      if (flags & Passive) {\n        commitHookPassiveMountEffects(\n          finishedWork,\n          HookPassive | HookHasEffect,\n        );\n      }\n      break;\n    }\n    case HostRoot: {\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      if (flags & Passive) {\n        if (enableCache) {\n          let previousCache: Cache | null = null;\n          if (finishedWork.alternate !== null) {\n            previousCache = finishedWork.alternate.memoizedState.cache;\n          }\n          const nextCache = finishedWork.memoizedState.cache;\n          // Retain/release the root cache.\n          // Note that on initial mount, previousCache and nextCache will be the same\n          // and this retain won't occur. To counter this, we instead retain the HostRoot's\n          // initial cache when creating the root itself (see createFiberRoot() in\n          // ReactFiberRoot.js). Subsequent updates that change the cache are reflected\n          // here, such that previous/next caches are retained correctly.\n          if (nextCache !== previousCache) {\n            retainCache(nextCache);\n            if (previousCache != null) {\n              releaseCache(previousCache);\n            }\n          }\n        }\n\n        if (enableTransitionTracing) {\n          // Get the transitions that were initiatized during the render\n          // and add a start transition callback for each of them\n          const root = finishedWork.stateNode;\n          const incompleteTransitions = root.incompleteTransitions;\n          // Initial render\n          if (committedTransitions !== null) {\n            committedTransitions.forEach(transition => {\n              addTransitionStartCallbackToPendingTransition(transition);\n            });\n\n            clearTransitionsForLanes(finishedRoot, committedLanes);\n          }\n\n          incompleteTransitions.forEach((markerInstance, transition) => {\n            const pendingBoundaries = markerInstance.pendingBoundaries;\n            if (pendingBoundaries === null || pendingBoundaries.size === 0) {\n              addTransitionCompleteCallbackToPendingTransition(transition);\n              incompleteTransitions.delete(transition);\n            }\n          });\n\n          clearTransitionsForLanes(finishedRoot, committedLanes);\n        }\n      }\n      break;\n    }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      // TODO: Pass `current` as argument to this function\n      const instance: OffscreenInstance = finishedWork.stateNode;\n      const nextState: OffscreenState | null = finishedWork.memoizedState;\n\n      const isHidden = nextState !== null;\n\n      if (isHidden) {\n        if (instance.visibility & OffscreenPassiveEffectsConnected) {\n          // The effects are currently connected. Update them.\n          recursivelyTraversePassiveMountEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n          );\n        } else {\n          if (finishedWork.mode & ConcurrentMode) {\n            // The effects are currently disconnected. Since the tree is hidden,\n            // don't connect them. This also applies to the initial render.\n            if (enableCache || enableTransitionTracing) {\n              // \"Atomic\" effects are ones that need to fire on every commit,\n              // even during pre-rendering. An example is updating the reference\n              // count on cache instances.\n              recursivelyTraverseAtomicPassiveEffects(\n                finishedRoot,\n                finishedWork,\n                committedLanes,\n                committedTransitions,\n              );\n            }\n          } else {\n            // Legacy Mode: Fire the effects even if the tree is hidden.\n            instance.visibility |= OffscreenPassiveEffectsConnected;\n            recursivelyTraversePassiveMountEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions,\n            );\n          }\n        }\n      } else {\n        // Tree is visible\n        if (instance.visibility & OffscreenPassiveEffectsConnected) {\n          // The effects are currently connected. Update them.\n          recursivelyTraversePassiveMountEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n          );\n        } else {\n          // The effects are currently disconnected. Reconnect them, while also\n          // firing effects inside newly mounted trees. This also applies to\n          // the initial render.\n          instance.visibility |= OffscreenPassiveEffectsConnected;\n\n          const includeWorkInProgressEffects =\n            (finishedWork.subtreeFlags & PassiveMask) !== NoFlags;\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n            includeWorkInProgressEffects,\n          );\n        }\n      }\n\n      if (flags & Passive) {\n        const current = finishedWork.alternate;\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\n      }\n      break;\n    }\n    case CacheComponent: {\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      if (flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        commitCachePassiveMountEffect(current, finishedWork);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        recursivelyTraversePassiveMountEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n        );\n        if (flags & Passive) {\n          commitTracingMarkerPassiveMountEffect(finishedWork);\n        }\n        break;\n      }\n      // Intentional fallthrough to next branch\n    }\n    // eslint-disable-next-line-no-fallthrough\n    default: {\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      break;\n    }\n  }\n}\n\nfunction recursivelyTraverseReconnectPassiveEffects(\n  finishedRoot: FiberRoot,\n  parentFiber: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n  includeWorkInProgressEffects: boolean,\n) {\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  const childShouldIncludeWorkInProgressEffects =\n    includeWorkInProgressEffects &&\n    (parentFiber.subtreeFlags & PassiveMask) !== NoFlags;\n\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  let child = parentFiber.child;\n  while (child !== null) {\n    reconnectPassiveEffects(\n      finishedRoot,\n      child,\n      committedLanes,\n      committedTransitions,\n      childShouldIncludeWorkInProgressEffects,\n    );\n    child = child.sibling;\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction reconnectPassiveEffects(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  includeWorkInProgressEffects: boolean,\n) {\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraverseReconnectPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        includeWorkInProgressEffects,\n      );\n      // TODO: Check for PassiveStatic flag\n      commitHookPassiveMountEffects(finishedWork, HookPassive);\n      break;\n    }\n    // Unlike commitPassiveMountOnFiber, we don't need to handle HostRoot\n    // because this function only visits nodes that are inside an\n    // Offscreen fiber.\n    // case HostRoot: {\n    //  ...\n    // }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      const instance: OffscreenInstance = finishedWork.stateNode;\n      const nextState: OffscreenState | null = finishedWork.memoizedState;\n\n      const isHidden = nextState !== null;\n\n      if (isHidden) {\n        if (instance.visibility & OffscreenPassiveEffectsConnected) {\n          // The effects are currently connected. Update them.\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n            includeWorkInProgressEffects,\n          );\n        } else {\n          if (finishedWork.mode & ConcurrentMode) {\n            // The effects are currently disconnected. Since the tree is hidden,\n            // don't connect them. This also applies to the initial render.\n            if (enableCache || enableTransitionTracing) {\n              // \"Atomic\" effects are ones that need to fire on every commit,\n              // even during pre-rendering. An example is updating the reference\n              // count on cache instances.\n              recursivelyTraverseAtomicPassiveEffects(\n                finishedRoot,\n                finishedWork,\n                committedLanes,\n                committedTransitions,\n              );\n            }\n          } else {\n            // Legacy Mode: Fire the effects even if the tree is hidden.\n            instance.visibility |= OffscreenPassiveEffectsConnected;\n            recursivelyTraverseReconnectPassiveEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions,\n              includeWorkInProgressEffects,\n            );\n          }\n        }\n      } else {\n        // Tree is visible\n\n        // Since we're already inside a reconnecting tree, it doesn't matter\n        // whether the effects are currently connected. In either case, we'll\n        // continue traversing the tree and firing all the effects.\n        //\n        // We do need to set the \"connected\" flag on the instance, though.\n        instance.visibility |= OffscreenPassiveEffectsConnected;\n\n        recursivelyTraverseReconnectPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          includeWorkInProgressEffects,\n        );\n      }\n\n      if (includeWorkInProgressEffects && flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current: Fiber | null = finishedWork.alternate;\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\n      }\n      break;\n    }\n    case CacheComponent: {\n      recursivelyTraverseReconnectPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        includeWorkInProgressEffects,\n      );\n      if (includeWorkInProgressEffects && flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        commitCachePassiveMountEffect(current, finishedWork);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        recursivelyTraverseReconnectPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          includeWorkInProgressEffects,\n        );\n        if (includeWorkInProgressEffects && flags & Passive) {\n          commitTracingMarkerPassiveMountEffect(finishedWork);\n        }\n        break;\n      }\n      // Intentional fallthrough to next branch\n    }\n    // eslint-disable-next-line-no-fallthrough\n    default: {\n      recursivelyTraverseReconnectPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        includeWorkInProgressEffects,\n      );\n      break;\n    }\n  }\n}\n\nfunction recursivelyTraverseAtomicPassiveEffects(\n  finishedRoot: FiberRoot,\n  parentFiber: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  // \"Atomic\" effects are ones that need to fire on every commit, even during\n  // pre-rendering. We call this function when traversing a hidden tree whose\n  // regular effects are currently disconnected.\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  // TODO: Add special flag for atomic effects\n  if (parentFiber.subtreeFlags & PassiveMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      commitAtomicPassiveEffects(\n        finishedRoot,\n        child,\n        committedLanes,\n        committedTransitions,\n      );\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitAtomicPassiveEffects(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  // \"Atomic\" effects are ones that need to fire on every commit, even during\n  // pre-rendering. We call this function when traversing a hidden tree whose\n  // regular effects are currently disconnected.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case OffscreenComponent: {\n      recursivelyTraverseAtomicPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      if (flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        const instance: OffscreenInstance = finishedWork.stateNode;\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\n      }\n      break;\n    }\n    case CacheComponent: {\n      recursivelyTraverseAtomicPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      if (flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        commitCachePassiveMountEffect(current, finishedWork);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        recursivelyTraverseAtomicPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n        );\n        if (flags & Passive) {\n          commitTracingMarkerPassiveMountEffect(finishedWork);\n        }\n        break;\n      }\n      // Intentional fallthrough to next branch\n    }\n    // eslint-disable-next-line-no-fallthrough\n    default: {\n      recursivelyTraverseAtomicPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n      );\n      break;\n    }\n  }\n}\n\nexport function commitPassiveUnmountEffects(finishedWork: Fiber): void {\n  setCurrentDebugFiberInDEV(finishedWork);\n  commitPassiveUnmountOnFiber(finishedWork);\n  resetCurrentDebugFiberInDEV();\n}\n\nfunction detachAlternateSiblings(parentFiber: Fiber) {\n  if (deletedTreeCleanUpLevel >= 1) {\n    // A fiber was deleted from this parent fiber, but it's still part of the\n    // previous (alternate) parent fiber's list of children. Because children\n    // are a linked list, an earlier sibling that's still alive will be\n    // connected to the deleted fiber via its `alternate`:\n    //\n    //   live fiber --alternate--> previous live fiber --sibling--> deleted\n    //   fiber\n    //\n    // We can't disconnect `alternate` on nodes that haven't been deleted yet,\n    // but we can disconnect the `sibling` and `child` pointers.\n\n    const previousFiber = parentFiber.alternate;\n    if (previousFiber !== null) {\n      let detachedChild = previousFiber.child;\n      if (detachedChild !== null) {\n        previousFiber.child = null;\n        do {\n          const detachedSibling = detachedChild.sibling;\n          detachedChild.sibling = null;\n          detachedChild = detachedSibling;\n        } while (detachedChild !== null);\n      }\n    }\n  }\n}\n\nfunction commitHookPassiveUnmountEffects(\n  finishedWork: Fiber,\n  nearestMountedAncestor,\n  hookFlags: HookFlags,\n) {\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    finishedWork.mode & ProfileMode\n  ) {\n    startPassiveEffectTimer();\n    commitHookEffectListUnmount(\n      hookFlags,\n      finishedWork,\n      nearestMountedAncestor,\n    );\n    recordPassiveEffectDuration(finishedWork);\n  } else {\n    commitHookEffectListUnmount(\n      hookFlags,\n      finishedWork,\n      nearestMountedAncestor,\n    );\n  }\n}\n\nfunction recursivelyTraversePassiveUnmountEffects(parentFiber: Fiber): void {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects have fired.\n  const deletions = parentFiber.deletions;\n\n  if ((parentFiber.flags & ChildDeletion) !== NoFlags) {\n    if (deletions !== null) {\n      for (let i = 0; i < deletions.length; i++) {\n        const childToDelete = deletions[i];\n        // TODO: Convert this to use recursion\n        nextEffect = childToDelete;\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n          childToDelete,\n          parentFiber,\n        );\n      }\n    }\n    detachAlternateSiblings(parentFiber);\n  }\n\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  // TODO: Split PassiveMask into separate masks for mount and unmount?\n  if (parentFiber.subtreeFlags & PassiveMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      commitPassiveUnmountOnFiber(child);\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork: Fiber): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n      if (finishedWork.flags & Passive) {\n        commitHookPassiveUnmountEffects(\n          finishedWork,\n          finishedWork.return,\n          HookPassive | HookHasEffect,\n        );\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const instance: OffscreenInstance = finishedWork.stateNode;\n      const nextState: OffscreenState | null = finishedWork.memoizedState;\n\n      const isHidden = nextState !== null;\n\n      if (\n        isHidden &&\n        instance.visibility & OffscreenPassiveEffectsConnected &&\n        // For backwards compatibility, don't unmount when a tree suspends. In\n        // the future we may change this to unmount after a delay.\n        (finishedWork.return === null ||\n          finishedWork.return.tag !== SuspenseComponent)\n      ) {\n        // The effects are currently connected. Disconnect them.\n        // TODO: Add option or heuristic to delay before disconnecting the\n        // effects. Then if the tree reappears before the delay has elapsed, we\n        // can skip toggling the effects entirely.\n        instance.visibility &= ~OffscreenPassiveEffectsConnected;\n        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      } else {\n        recursivelyTraversePassiveUnmountEffects(finishedWork);\n      }\n\n      break;\n    }\n    default: {\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n      break;\n    }\n  }\n}\n\nfunction recursivelyTraverseDisconnectPassiveEffects(parentFiber: Fiber): void {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects have fired.\n  const deletions = parentFiber.deletions;\n\n  if ((parentFiber.flags & ChildDeletion) !== NoFlags) {\n    if (deletions !== null) {\n      for (let i = 0; i < deletions.length; i++) {\n        const childToDelete = deletions[i];\n        // TODO: Convert this to use recursion\n        nextEffect = childToDelete;\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n          childToDelete,\n          parentFiber,\n        );\n      }\n    }\n    detachAlternateSiblings(parentFiber);\n  }\n\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  // TODO: Check PassiveStatic flag\n  let child = parentFiber.child;\n  while (child !== null) {\n    setCurrentDebugFiberInDEV(child);\n    disconnectPassiveEffect(child);\n    child = child.sibling;\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction disconnectPassiveEffect(finishedWork: Fiber): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      // TODO: Check PassiveStatic flag\n      commitHookPassiveUnmountEffects(\n        finishedWork,\n        finishedWork.return,\n        HookPassive,\n      );\n      // When disconnecting passive effects, we fire the effects in the same\n      // order as during a deletiong: parent before child\n      recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      break;\n    }\n    case OffscreenComponent: {\n      const instance: OffscreenInstance = finishedWork.stateNode;\n      if (instance.visibility & OffscreenPassiveEffectsConnected) {\n        instance.visibility &= ~OffscreenPassiveEffectsConnected;\n        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      } else {\n        // The effects are already disconnected.\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      break;\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n  deletedSubtreeRoot: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n    setCurrentDebugFiberInDEV(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentDebugFiberInDEV();\n\n    const child = fiber.child;\n    // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n    if (child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n        deletedSubtreeRoot,\n      );\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n  deletedSubtreeRoot: Fiber,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const sibling = fiber.sibling;\n    const returnFiber = fiber.return;\n\n    if (deletedTreeCleanUpLevel >= 2) {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    } else {\n      // This is the default branch (level 0). We do not recursively clear all\n      // the fiber fields. Only the root of the deleted subtree.\n      if (fiber === deletedSubtreeRoot) {\n        detachFiberAfterEffects(fiber);\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      sibling.return = returnFiber;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n): void {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      commitHookPassiveUnmountEffects(\n        current,\n        nearestMountedAncestor,\n        HookPassive,\n      );\n      break;\n    }\n    // TODO: run passive unmount effects when unmounting a root.\n    // Because passive unmount effects are not currently run,\n    // the cache instance owned by the root will never be freed.\n    // When effects are run, the cache should be freed here:\n    // case HostRoot: {\n    //   if (enableCache) {\n    //     const cache = current.memoizedState.cache;\n    //     releaseCache(cache);\n    //   }\n    //   break;\n    // }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      if (enableCache) {\n        if (\n          current.memoizedState !== null &&\n          current.memoizedState.cachePool !== null\n        ) {\n          const cache: Cache = current.memoizedState.cachePool.pool;\n          // Retain/release the cache used for pending (suspended) nodes.\n          // Note that this is only reached in the non-suspended/visible case:\n          // when the content is suspended/hidden, the retain/release occurs\n          // via the parent Suspense component (see case above).\n          if (cache != null) {\n            retainCache(cache);\n          }\n        }\n      }\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache = current.memoizedState.cache;\n        releaseCache(cache);\n      }\n      break;\n    }\n  }\n}\n\n// TODO: Reuse reappearLayoutEffects traversal here?\nfunction invokeLayoutEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookLayout | HookHasEffect, fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookPassive | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n      }\n    }\n  }\n}\n\nexport {\n  commitPlacement,\n  commitAttachRef,\n  commitDetachRef,\n  invokeLayoutEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokePassiveEffectUnmountInDEV,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\n\nimport {HostComponent, HostText} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {\n  findFiberRoot,\n  getBoundingRect,\n  getInstanceFromNode,\n  getTextContent,\n  isHiddenSubtree,\n  matchAccessibilityRole,\n  setFocusIfFocusable,\n  setupIntersectionObserver,\n  supportsTestSelectors,\n} from './ReactFiberHostConfig';\n\nlet COMPONENT_TYPE = 0b000;\nlet HAS_PSEUDO_CLASS_TYPE = 0b001;\nlet ROLE_TYPE = 0b010;\nlet TEST_NAME_TYPE = 0b011;\nlet TEXT_TYPE = 0b100;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\ntype Type = Symbol | number;\n\ntype ComponentSelector = {|\n  $$typeof: Type,\n  value: React$AbstractComponent<empty, mixed>,\n|};\n\ntype HasPseudoClassSelector = {|\n  $$typeof: Type,\n  value: Array<Selector>,\n|};\n\ntype RoleSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TextSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TestNameSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype Selector =\n  | ComponentSelector\n  | HasPseudoClassSelector\n  | RoleSelector\n  | TextSelector\n  | TestNameSelector;\n\nexport function createComponentSelector(\n  component: React$AbstractComponent<empty, mixed>,\n): ComponentSelector {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component,\n  };\n}\n\nexport function createHasPseudoClassSelector(\n  selectors: Array<Selector>,\n): HasPseudoClassSelector {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors,\n  };\n}\n\nexport function createRoleSelector(role: string): RoleSelector {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role,\n  };\n}\n\nexport function createTextSelector(text: string): TextSelector {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text,\n  };\n}\n\nexport function createTestNameSelector(id: string): TestNameSelector {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id,\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot: Instance): Fiber {\n  const maybeFiber = getInstanceFromNode((hostRoot: any));\n  if (maybeFiber != null) {\n    if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n      throw new Error(\n        'Invalid host root specified. Should be either a React container or a node with a testname attribute.',\n      );\n    }\n\n    return ((maybeFiber: any): Fiber);\n  } else {\n    const fiberRoot = findFiberRoot(hostRoot);\n\n    if (fiberRoot === null) {\n      throw new Error(\n        'Could not find React container within specified host subtree.',\n      );\n    }\n\n    // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n    return ((fiberRoot: any).stateNode.current: Fiber);\n  }\n}\n\nfunction matchSelector(fiber: Fiber, selector: Selector): boolean {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n      break;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(\n        fiber,\n        ((selector: any): HasPseudoClassSelector).value,\n      );\n    case ROLE_TYPE:\n      if (fiber.tag === HostComponent) {\n        const node = fiber.stateNode;\n        if (\n          matchAccessibilityRole(node, ((selector: any): RoleSelector).value)\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEXT_TYPE:\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n        const textContent = getTextContent(fiber);\n        if (\n          textContent !== null &&\n          textContent.indexOf(((selector: any): TextSelector).value) >= 0\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEST_NAME_TYPE:\n      if (fiber.tag === HostComponent) {\n        const dataTestID = fiber.memoizedProps['data-testname'];\n        if (\n          typeof dataTestID === 'string' &&\n          dataTestID.toLowerCase() ===\n            ((selector: any): TestNameSelector).value.toLowerCase()\n        ) {\n          return true;\n        }\n      }\n      break;\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector: Selector): string | null {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      const displayName = getComponentNameFromType(selector.value) || 'Unknown';\n      return `<${displayName}>`;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return `:has(${selectorToString(selector) || ''})`;\n    case ROLE_TYPE:\n      return `[role=\"${((selector: any): RoleSelector).value}\"]`;\n    case TEXT_TYPE:\n      return `\"${((selector: any): TextSelector).value}\"`;\n    case TEST_NAME_TYPE:\n      return `[data-testname=\"${((selector: any): TestNameSelector).value}\"]`;\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n}\n\nfunction findPaths(root: Fiber, selectors: Array<Selector>): Array<Fiber> {\n  const matchingFibers: Array<Fiber> = [];\n\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n}\n\n// Same as findPaths but with eager bailout on first match\nfunction hasMatchingPaths(root: Fiber, selectors: Array<Selector>): boolean {\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function findAllNodes(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<Instance> {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const instanceRoots: Array<Instance> = [];\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const node = ((stack[index++]: any): Fiber);\n    if (node.tag === HostComponent) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n      instanceRoots.push(node.stateNode);\n    } else {\n      let child = node.child;\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\n\nexport function getFindAllNodesFailureDescription(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): string | null {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n\n  let maxSelectorIndex: number = 0;\n  const matchedNames = [];\n\n  // The logic of this loop should be kept in sync with findPaths()\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    const selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    const unmatchedNames = [];\n    for (let i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return (\n      'findAllNodes was able to match part of the selector:\\n' +\n      `  ${matchedNames.join(' > ')}\\n\\n` +\n      'No matching component was found for:\\n' +\n      `  ${unmatchedNames.join(' > ')}`\n    );\n  }\n\n  return null;\n}\n\nexport type BoundingRect = {|\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n|};\n\nexport function findBoundingRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<BoundingRect> {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const boundingRects: Array<BoundingRect> = [];\n  for (let i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (let i = boundingRects.length - 1; i > 0; i--) {\n    const targetRect = boundingRects[i];\n    const targetLeft = targetRect.x;\n    const targetRight = targetLeft + targetRect.width;\n    const targetTop = targetRect.y;\n    const targetBottom = targetTop + targetRect.height;\n\n    for (let j = i - 1; j >= 0; j--) {\n      if (i !== j) {\n        const otherRect = boundingRects[j];\n        const otherLeft = otherRect.x;\n        const otherRight = otherLeft + otherRect.width;\n        const otherTop = otherRect.y;\n        const otherBottom = otherTop + otherRect.height;\n\n        // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (\n          targetLeft >= otherLeft &&\n          targetTop >= otherTop &&\n          targetRight <= otherRight &&\n          targetBottom <= otherBottom\n        ) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetLeft === otherLeft &&\n          targetRect.width === otherRect.width &&\n          !(otherBottom < targetTop) &&\n          !(otherTop > targetBottom)\n        ) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetTop === otherTop &&\n          targetRect.height === otherRect.height &&\n          !(otherRight < targetLeft) &&\n          !(otherLeft > targetRight)\n        ) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\n\nexport function focusWithin(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): boolean {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n    if (fiber.tag === HostComponent) {\n      const node = fiber.stateNode;\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n    let child = fiber.child;\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\n\nconst commitHooks: Array<Function> = [];\n\nexport function onCommitRoot(): void {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(commitHook => commitHook());\n  }\n}\n\nexport type IntersectionObserverOptions = Object;\n\nexport type ObserveVisibleRectsCallback = (\n  intersections: Array<{ratio: number, rect: BoundingRect}>,\n) => void;\n\nexport function observeVisibleRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n  callback: (intersections: Array<{ratio: number, rect: BoundingRect}>) => void,\n  options?: IntersectionObserverOptions,\n): {|disconnect: () => void|} {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const {disconnect, observe, unobserve} = setupIntersectionObserver(\n    instanceRoots,\n    callback,\n    options,\n  );\n\n  // When React mutates the host environment, we may need to change what we're listening to.\n  const commitHook = () => {\n    const nextInstanceRoots = findAllNodes(hostRoot, selectors);\n\n    instanceRoots.forEach(target => {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n\n    nextInstanceRoots.forEach(target => {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n\n  return {\n    disconnect: () => {\n      // Stop listening for React mutations:\n      const index = commitHooks.indexOf(commitHook);\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      }\n\n      // Disconnect the host observer:\n      disconnect();\n    },\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactFiber.old';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nimport {warnsIfNotActing} from './ReactFiberHostConfig';\n\nconst {ReactCurrentActQueue} = ReactSharedInternals;\n\nexport function isLegacyActEnvironment(fiber: Fiber) {\n  if (__DEV__) {\n    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n    // act environment whenever `jest` is defined, but you can still turn off\n    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n    // to false.\n\n    const isReactActEnvironmentGlobal =\n      // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\n        ? IS_REACT_ACT_ENVIRONMENT\n        : undefined;\n\n    // $FlowExpectedError - Flow doesn't know about jest\n    const jestIsDefined = typeof jest !== 'undefined';\n    return (\n      warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false\n    );\n  }\n  return false;\n}\n\nexport function isConcurrentActEnvironment() {\n  if (__DEV__) {\n    const isReactActEnvironmentGlobal =\n      // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\n        ? IS_REACT_ACT_ENVIRONMENT\n        : undefined;\n\n    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n      // TODO: Include link to relevant documentation page.\n      console.error(\n        'The current testing environment is not configured to support ' +\n          'act(...)',\n      );\n    }\n    return isReactActEnvironmentGlobal;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Flags} from './ReactFiberFlags';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {EventPriority} from './ReactEventPriorities.old';\nimport type {\n  PendingTransitionCallbacks,\n  PendingBoundaries,\n  Transition,\n} from './ReactFiberTracingMarkerComponent.old';\nimport type {OffscreenInstance} from './ReactFiberOffscreenComponent';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerNestedUpdateScheduledHook,\n  deferRenderPhaseUpdateToNextBatch,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  disableSchedulerTimeoutInWorkLoop,\n  enableStrictEffects,\n  skipUnmountedBoundaries,\n  enableUpdaterTracking,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport is from 'shared/objectIs';\n\nimport {\n  // Aliased because `act` will override and push to an internal queue\n  scheduleCallback as Scheduler_scheduleCallback,\n  cancelCallback as Scheduler_cancelCallback,\n  shouldYield,\n  requestPaint,\n  now,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\nimport {\n  flushSyncCallbacks,\n  flushSyncCallbacksOnlyInLegacyMode,\n  scheduleSyncCallback,\n  scheduleLegacySyncCallback,\n} from './ReactFiberSyncTaskQueue.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\n\nimport {\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  afterActiveInstanceBlur,\n  getCurrentEventPriority,\n  supportsMicrotasks,\n  errorHydratingContainer,\n  scheduleMicrotask,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {didSuspendOrErrorWhileHydratingDEV} from './ReactFiberHydrationContext.old';\nimport {NoMode, ProfileMode, ConcurrentMode} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Profiler,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  Incomplete,\n  StoreConsistency,\n  HostEffectMask,\n  ForceClientRender,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  MountPassiveDev,\n  MountLayoutDev,\n} from './ReactFiberFlags';\nimport {\n  NoLanes,\n  NoLane,\n  SyncLane,\n  NoTimestamp,\n  claimNextTransitionLane,\n  claimNextRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  includesBlockingLane,\n  includesExpiredLane,\n  getNextLanes,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootEntangled,\n  markRootFinished,\n  getHighestPriorityLane,\n  addFiberToLanesMap,\n  movePendingFibersToMemoized,\n  addTransitionToLanesMap,\n  getTransitionsForLanes,\n} from './ReactFiberLane.old';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  lowerEventPriority,\n  lanesToEventPriority,\n} from './ReactEventPriorities.old';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationEffects,\n  commitLayoutEffects,\n  commitMutationEffects,\n  commitPassiveEffectDurations,\n  commitPassiveMountEffects,\n  commitPassiveUnmountEffects,\n  invokeLayoutEffectMountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectUnmountInDEV,\n  reportUncaughtErrorInDEV,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactFiberClassUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {\n  createCapturedValueAtFiber,\n  type CapturedValue,\n} from './ReactCapturedValue';\nimport {\n  enqueueConcurrentRenderForLane,\n  finishQueueingConcurrentUpdates,\n  getConcurrentlyUpdatedLanes,\n} from './ReactFiberConcurrentUpdates.old';\n\nimport {\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  resetNestedUpdateFlag,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  isDevToolsPresent,\n  markCommitStarted,\n  markCommitStopped,\n  markComponentRenderStopped,\n  markComponentSuspended,\n  markComponentErrored,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n  onCommitRoot as onCommitRootDevTools,\n  onPostCommitRoot as onPostCommitRootDevTools,\n} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\nimport {releaseCache} from './ReactFiberCacheComponent.old';\nimport {\n  isLegacyActEnvironment,\n  isConcurrentActEnvironment,\n} from './ReactFiberAct.old';\nimport {processTransitionCallbacks} from './ReactFiberTracingMarkerComponent.old';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  ReactCurrentBatchConfig,\n  ReactCurrentActQueue,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b000;\nconst BatchedContext = /*               */ 0b001;\nconst RenderContext = /*                */ 0b010;\nconst CommitContext = /*                */ 0b100;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6;\nconst RootInProgress = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\nconst RootDidNotComplete = 6;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// A contextual version of workInProgressRootRenderLanes. It is a superset of\n// the lanes that we started working on at the root. When we enter a subtree\n// that is currently hidden, we add the lanes that would have committed if\n// the hidden tree hadn't been deferred. This is modified by the\n// HiddenContext module.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with renderLanes.\nexport let renderLanes: Lanes = NoLanes;\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootInProgress;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootInterleavedUpdatedLanes: Lanes = NoLanes;\n// Lanes that were updated during the render phase (*not* an interleaved event).\nlet workInProgressRootRenderPhaseUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n// Errors that are thrown during the render phase.\nlet workInProgressRootConcurrentErrors: Array<\n  CapturedValue<mixed>,\n> | null = null;\n// These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\nlet workInProgressRootRecoverableErrors: Array<\n  CapturedValue<mixed>,\n> | null = null;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nlet workInProgressTransitions: Array<Transition> | null = null;\nexport function getWorkInProgressTransitions() {\n  return workInProgressTransitions;\n}\n\nlet currentPendingTransitionCallbacks: PendingTransitionCallbacks | null = null;\n\nexport function addTransitionStartCallbackToPendingTransition(\n  transition: Transition,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: [],\n        transitionProgress: null,\n        transitionComplete: null,\n        markerProgress: null,\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionStart === null) {\n      currentPendingTransitionCallbacks.transitionStart = [];\n    }\n\n    currentPendingTransitionCallbacks.transitionStart.push(transition);\n  }\n}\n\nexport function addMarkerProgressCallbackToPendingTransition(\n  markerName: string,\n  transitions: Set<Transition>,\n  pendingBoundaries: PendingBoundaries | null,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: null,\n        transitionComplete: null,\n        markerProgress: new Map(),\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.markerProgress === null) {\n      currentPendingTransitionCallbacks.markerProgress = new Map();\n    }\n\n    currentPendingTransitionCallbacks.markerProgress.set(markerName, {\n      pendingBoundaries,\n      transitions,\n    });\n  }\n}\n\nexport function addMarkerCompleteCallbackToPendingTransition(\n  markerName: string,\n  transitions: Set<Transition>,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: null,\n        transitionComplete: null,\n        markerProgress: null,\n        markerComplete: new Map(),\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.markerComplete === null) {\n      currentPendingTransitionCallbacks.markerComplete = new Map();\n    }\n\n    currentPendingTransitionCallbacks.markerComplete.set(\n      markerName,\n      transitions,\n    );\n  }\n}\n\nexport function addTransitionProgressCallbackToPendingTransition(\n  transition: Transition,\n  boundaries: PendingBoundaries,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: new Map(),\n        transitionComplete: null,\n        markerProgress: null,\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionProgress === null) {\n      currentPendingTransitionCallbacks.transitionProgress = new Map();\n    }\n\n    currentPendingTransitionCallbacks.transitionProgress.set(\n      transition,\n      boundaries,\n    );\n  }\n}\n\nexport function addTransitionCompleteCallbackToPendingTransition(\n  transition: Transition,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: null,\n        transitionComplete: [],\n        markerProgress: null,\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionComplete === null) {\n      currentPendingTransitionCallbacks.transitionComplete = [];\n    }\n\n    currentPendingTransitionCallbacks.transitionComplete.push(transition);\n  }\n}\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\n// Only used when enableProfilerNestedUpdateScheduledHook is true;\n// to track which root is currently committing layout effects.\nlet rootCommittingMutationOrLayoutEffects: FiberRoot | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\nlet pendingPassiveEffectsRemainingLanes: Lanes = NoLanes;\nlet pendingPassiveTransitions: Array<Transition> | null = null;\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\nlet isFlushingPassiveEffects = false;\nlet didScheduleUpdateDuringPassiveEffects = false;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\nlet rootWithPassiveNestedUpdates: FiberRoot | null = null;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventTransitionLane: Lanes = NoLanes;\n\nlet isRunningInsertionEffect = false;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function getWorkInProgressRootRenderLanes(): Lanes {\n  return workInProgressRootRenderLanes;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (__DEV__ && ReactCurrentBatchConfig.transition !== null) {\n      const transition = ReactCurrentBatchConfig.transition;\n      if (!transition._updatedFibers) {\n        transition._updatedFibers = new Set();\n      }\n\n      transition._updatedFibers.add(fiber);\n    }\n    // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n    return currentEventTransitionLane;\n  }\n\n  // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const updateLane: Lane = (getCurrentUpdatePriority(): any);\n  if (updateLane !== NoLane) {\n    return updateLane;\n  }\n\n  // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const eventLane: Lane = (getCurrentEventPriority(): any);\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  }\n\n  return claimNextRetryLane();\n}\n\nexport function scheduleUpdateOnFiber(\n  root: FiberRoot,\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n) {\n  if (__DEV__) {\n    if (isRunningInsertionEffect) {\n      console.error('useInsertionEffect must not schedule updates.');\n    }\n  }\n\n  if (__DEV__) {\n    if (isFlushingPassiveEffects) {\n      didScheduleUpdateDuringPassiveEffects = true;\n    }\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (\n    (executionContext & RenderContext) !== NoLanes &&\n    root === workInProgressRoot\n  ) {\n    // This update was dispatched during the render phase. This is a mistake\n    // if the update originates from user space (with the exception of local\n    // hook updates, which are handled differently and don't reach this\n    // function), but there are some internal React features that use this as\n    // an implementation detail, like selective hydration.\n    warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n    // Track lanes that were updated during the render phase\n    workInProgressRootRenderPhaseUpdatedLanes = mergeLanes(\n      workInProgressRootRenderPhaseUpdatedLanes,\n      lane,\n    );\n  } else {\n    // This is a normal update, scheduled from outside the render phase. For\n    // example, during an input event.\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        addFiberToLanesMap(root, fiber, lane);\n      }\n    }\n\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      if (\n        (executionContext & CommitContext) !== NoContext &&\n        root === rootCommittingMutationOrLayoutEffects\n      ) {\n        if (fiber.mode & ProfileMode) {\n          let current = fiber;\n          while (current !== null) {\n            if (current.tag === Profiler) {\n              const {id, onNestedUpdateScheduled} = current.memoizedProps;\n              if (typeof onNestedUpdateScheduled === 'function') {\n                onNestedUpdateScheduled(id);\n              }\n            }\n            current = current.return;\n          }\n        }\n      }\n    }\n\n    if (enableTransitionTracing) {\n      const transition = ReactCurrentBatchConfig.transition;\n      if (transition !== null && transition.name != null) {\n        if (transition.startTime === -1) {\n          transition.startTime = now();\n        }\n\n        addTransitionToLanesMap(root, transition, lane);\n      }\n    }\n\n    if (root === workInProgressRoot) {\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root. Unless the\n      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n      // phase update. In that case, we don't treat render phase updates as if\n      // they were interleaved, for backwards compat reasons.\n      if (\n        deferRenderPhaseUpdateToNextBatch ||\n        (executionContext & RenderContext) === NoContext\n      ) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(\n          workInProgressRootInterleavedUpdatedLanes,\n          lane,\n        );\n      }\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        markRootSuspended(root, workInProgressRootRenderLanes);\n      }\n    }\n\n    ensureRootIsScheduled(root, eventTime);\n    if (\n      lane === SyncLane &&\n      executionContext === NoContext &&\n      (fiber.mode & ConcurrentMode) === NoMode &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      // Flush the synchronous work now, unless we're already working or inside\n      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n      // without immediately flushing it. We only do this for user-initiated\n      // updates, to preserve historical behavior of legacy mode.\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function scheduleInitialHydrationOnRoot(\n  root: FiberRoot,\n  lane: Lane,\n  eventTime: number,\n) {\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\n  // schedule the initial hydration of a root that has just been created. Most\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\n  //\n  // The main reason for this separate path, though, is to distinguish the\n  // initial children from subsequent updates. In fully client-rendered roots\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n  // updates, but hydration roots are special because the initial render must\n  // match what was rendered on the server.\n  const current = root.current;\n  current.lanes = lane;\n  markRootUpdated(root, lane, eventTime);\n  ensureRootIsScheduled(root, eventTime);\n}\n\nexport function isUnsafeClassRenderPhaseUpdate(fiber: Fiber) {\n  // Check if this is a render phase update. Only called by class components,\n  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n  return (\n    // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n    // decided not to enable it.\n    (!deferRenderPhaseUpdateToNextBatch ||\n      (fiber.mode & ConcurrentMode) === NoMode) &&\n    (executionContext & RenderContext) !== NoContext\n  );\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  }\n\n  // We use the highest priority lane to represent the priority of the callback.\n  const newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n  // Check if there's an existing task. We may be able to reuse it.\n  const existingCallbackPriority = root.callbackPriority;\n  if (\n    existingCallbackPriority === newCallbackPriority &&\n    // Special case related to `act`. If the currently scheduled task is a\n    // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n    // on the `act` queue.\n    !(\n      __DEV__ &&\n      ReactCurrentActQueue.current !== null &&\n      existingCallbackNode !== fakeActCallbackNode\n    )\n  ) {\n    if (__DEV__) {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (\n        existingCallbackNode == null &&\n        existingCallbackPriority !== SyncLane\n      ) {\n        console.error(\n          'Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n    // The priority hasn't changed. We can reuse the existing task. Exit.\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if (__DEV__ && ReactCurrentActQueue.isBatchingLegacy !== null) {\n        ReactCurrentActQueue.didScheduleLegacyUpdate = true;\n      }\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n    if (supportsMicrotasks) {\n      // Flush the queue in a microtask.\n      if (__DEV__ && ReactCurrentActQueue.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(() => {\n          // In Safari, appending an iframe forces microtasks to run.\n          // https://github.com/facebook/react/issues/22459\n          // We don't support running callbacks in the middle of render\n          // or commit so we need to check against that.\n          if (\n            (executionContext & (RenderContext | CommitContext)) ===\n            NoContext\n          ) {\n            // Note that this would still prematurely flush the callbacks\n            // if this happens outside render or commit phase (e.g. in an event).\n            flushSyncCallbacks();\n          }\n        });\n      }\n    } else {\n      // Flush the queue in an Immediate task.\n      scheduleCallback(ImmediateSchedulerPriority, flushSyncCallbacks);\n    }\n    newCallbackNode = null;\n  } else {\n    let schedulerPriorityLevel;\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediateSchedulerPriority;\n        break;\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingSchedulerPriority;\n        break;\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdleSchedulerPriority;\n        break;\n      default:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n    }\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    resetNestedUpdateFlag();\n  }\n\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next lanes to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n  const shouldTimeSlice =\n    !includesBlockingLane(root, lanes) &&\n    !includesExpiredLane(root, lanes) &&\n    (disableSchedulerTimeoutInWorkLoop || !didTimeout);\n  let exitStatus = shouldTimeSlice\n    ? renderRootConcurrent(root, lanes)\n    : renderRootSync(root, lanes);\n  if (exitStatus !== RootInProgress) {\n    if (exitStatus === RootErrored) {\n      // If something threw an error, try rendering one more time. We'll\n      // render synchronously to block concurrent data mutations, and we'll\n      // includes all pending updates are included. If it still fails after\n      // the second attempt, we'll give up and commit the resulting tree.\n      const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n      }\n    }\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    if (exitStatus === RootDidNotComplete) {\n      // The render unwound without completing the tree. This happens in special\n      // cases where need to exit the current render without producing a\n      // consistent tree or committing.\n      //\n      // This should only happen during a concurrent render, not a discrete or\n      // synchronous update. We should have already checked for this when we\n      // unwound the stack.\n      markRootSuspended(root, lanes);\n    } else {\n      // The render completed.\n\n      // Check if this render may have yielded to a concurrent event, and if so,\n      // confirm that any newly rendered stores are consistent.\n      // TODO: It's possible that even a concurrent render may never have yielded\n      // to the main thread, if it was fast enough, or if it expired. We could\n      // skip the consistency check in that case, too.\n      const renderWasConcurrent = !includesBlockingLane(root, lanes);\n      const finishedWork: Fiber = (root.current.alternate: any);\n      if (\n        renderWasConcurrent &&\n        !isRenderConsistentWithExternalStores(finishedWork)\n      ) {\n        // A store was mutated in an interleaved event. Render again,\n        // synchronously, to block further mutations.\n        exitStatus = renderRootSync(root, lanes);\n\n        // We need to check again if something threw\n        if (exitStatus === RootErrored) {\n          const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n          if (errorRetryLanes !== NoLanes) {\n            lanes = errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n            // We assume the tree is now consistent because we didn't yield to any\n            // concurrent events.\n          }\n        }\n        if (exitStatus === RootFatalErrored) {\n          const fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw fatalError;\n        }\n      }\n\n      // We now have a consistent tree. The next step is either to commit it,\n      // or, if something suspended, wait to commit it after a timeout.\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      finishConcurrentRender(root, exitStatus, lanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction recoverFromConcurrentError(root, errorRetryLanes) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n\n  // Before rendering again, save the errors from the previous attempt.\n  const errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n  if (isRootDehydrated(root)) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    const rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n    if (__DEV__) {\n      errorHydratingContainer(root.containerInfo);\n    }\n  }\n\n  const exitStatus = renderRootSync(root, errorRetryLanes);\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n\n    // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n    const errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt;\n    // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  } else {\n    // The UI failed to recover.\n  }\n  return exitStatus;\n}\n\nexport function queueRecoverableErrors(errors: Array<CapturedValue<mixed>>) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    workInProgressRootRecoverableErrors.push.apply(\n      workInProgressRootRecoverableErrors,\n      errors,\n    );\n  }\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored: {\n      throw new Error('Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(\n              null,\n              root,\n              workInProgressRootRecoverableErrors,\n              workInProgressTransitions,\n            ),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(\n              null,\n              root,\n              workInProgressRootRecoverableErrors,\n              workInProgressTransitions,\n            ),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unknown root exit status.');\n    }\n  }\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork: Fiber): boolean {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  let node: Fiber = finishedWork;\n  while (true) {\n    if (node.flags & StoreConsistency) {\n      const updateQueue: FunctionComponentUpdateQueue | null = (node.updateQueue: any);\n      if (updateQueue !== null) {\n        const checks = updateQueue.stores;\n        if (checks !== null) {\n          for (let i = 0; i < checks.length; i++) {\n            const check = checks[i];\n            const getSnapshot = check.getSnapshot;\n            const renderedValue = check.value;\n            try {\n              if (!is(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n    const child = node.child;\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n    if (node === finishedWork) {\n      return true;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n  return true;\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(\n    suspendedLanes,\n    workInProgressRootInterleavedUpdatedLanes,\n  );\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    syncNestedUpdateFlag();\n  }\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  flushPassiveEffects();\n\n  let lanes = getNextLanes(root, NoLanes);\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  let exitStatus = renderRootSync(root, lanes);\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  if (exitStatus === RootDidNotComplete) {\n    throw new Error('Root did not complete. This is a bug in React.');\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(\n    root,\n    workInProgressRootRecoverableErrors,\n    workInProgressTransitions,\n  );\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now());\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DefaultEventPriority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n    if (\n      executionContext === NoContext &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C, D) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\ndeclare function flushSync<R>(fn: () => R): R;\n// eslint-disable-next-line no-redeclare\ndeclare function flushSync(): void;\n// eslint-disable-next-line no-redeclare\nexport function flushSync(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (\n    rootWithPendingPassiveEffects !== null &&\n    rootWithPendingPassiveEffects.tag === LegacyRoot &&\n    (executionContext & (RenderContext | CommitContext)) === NoContext\n  ) {\n    flushPassiveEffects();\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function isAlreadyRendering() {\n  // Used by the renderer to print a warning if certain APIs are called from\n  // the wrong context.\n  return (\n    __DEV__ &&\n    (executionContext & (RenderContext | CommitContext)) !== NoContext\n  );\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\n// This is called by the HiddenContext module when we enter or leave a\n// hidden subtree. The stack logic is managed there because that's the only\n// place that ever modifies it. Which module it lives in doesn't matter for\n// performance because this function will get inlined regardless\nexport function setRenderLanes(subtreeRenderLanes: Lanes) {\n  renderLanes = subtreeRenderLanes;\n}\n\nexport function getRenderLanes(): Lanes {\n  return renderLanes;\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes): Fiber {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      const current = interruptedWork.alternate;\n      unwindInterruptedWork(\n        current,\n        interruptedWork,\n        workInProgressRootRenderLanes,\n      );\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  const rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = renderLanes = lanes;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootRenderPhaseUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n\n  finishQueueingConcurrentUpdates();\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n\n  return rootWorkInProgress;\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      if (enableSchedulingProfiler) {\n        markComponentRenderStopped();\n\n        if (\n          thrownValue !== null &&\n          typeof thrownValue === 'object' &&\n          typeof thrownValue.then === 'function'\n        ) {\n          const wakeable: Wakeable = (thrownValue: any);\n          markComponentSuspended(\n            erroredWork,\n            wakeable,\n            workInProgressRootRenderLanes,\n          );\n        } else {\n          markComponentErrored(\n            erroredWork,\n            thrownValue,\n            workInProgressRootRenderLanes,\n          );\n        }\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootInProgress ||\n    workInProgressRootExitStatus === RootSuspended ||\n    workInProgressRootExitStatus === RootErrored\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError(error: CapturedValue<mixed>) {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    throw new Error(\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootInProgress;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, renderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, renderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, renderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, renderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(current, completedWork, renderLanes);\n\n      // Because this fiber did not complete, don't reset its lanes.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      } else {\n        // We've unwound all the way to the root.\n        workInProgressRootExitStatus = RootDidNotComplete;\n        workInProgress = null;\n        return;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(\n  root: FiberRoot,\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\n  transitions: Array<Transition> | null,\n) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  const previousUpdateLanePriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(\n      root,\n      recoverableErrors,\n      transitions,\n      previousUpdateLanePriority,\n    );\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(\n  root: FiberRoot,\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\n  transitions: Array<Transition> | null,\n  renderPriorityLevel: EventPriority,\n) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    if (__DEV__) {\n      if (lanes === NoLanes) {\n        console.error(\n          'root.finishedLanes should not be empty during a commit. This is a ' +\n            'bug in React.',\n        );\n      }\n    }\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (finishedWork === root.current) {\n    throw new Error(\n      'Cannot commit the same tree as before. This error is likely caused by ' +\n        'a bug in React. Please file an issue.',\n    );\n  }\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n  root.callbackPriority = NoLane;\n\n  // Check which lanes no longer have any work scheduled on them, and mark\n  // those as finished.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n\n  // Make sure to account for lanes that were updated by a concurrent event\n  // during the render phase; don't mark them as finished.\n  const concurrentlyUpdatedLanes = getConcurrentlyUpdatedLanes();\n  remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes);\n\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n  if (\n    (finishedWork.subtreeFlags & PassiveMask) !== NoFlags ||\n    (finishedWork.flags & PassiveMask) !== NoFlags\n  ) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      pendingPassiveEffectsRemainingLanes = remainingLanes;\n      // workInProgressTransitions might be overwritten, so we want\n      // to store it in pendingPassiveTransitions until they get processed\n      // We need to pass this through as an argument to commitRoot\n      // because workInProgressTransitions might have changed between\n      // the previous render and commit if we throttle the commit\n      // with setTimeout\n      pendingPassiveTransitions = transitions;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n        return null;\n      });\n    }\n  }\n\n  // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n  const subtreeHasEffects =\n    (finishedWork.subtreeFlags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n  const rootHasEffect =\n    (finishedWork.flags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = null;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    const shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(\n      root,\n      finishedWork,\n    );\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      // Track the root here, rather than in commitLayoutEffects(), because of ref setters.\n      // Updates scheduled during ref detachment should also be flagged.\n      rootCommittingMutationOrLayoutEffects = root;\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    commitMutationEffects(root, finishedWork, lanes);\n\n    if (enableCreateEventHandleAPI) {\n      if (shouldFireAfterActiveInstanceBlur) {\n        afterActiveInstanceBlur();\n      }\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStarted(lanes);\n      }\n    }\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStarted(lanes);\n    }\n    commitLayoutEffects(finishedWork, root, lanes);\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStopped();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      rootCommittingMutationOrLayoutEffects = null;\n    }\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    executionContext = prevExecutionContext;\n\n    // Reset the priority to the previous non-sync value.\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  } else {\n    // There were no passive effects, so we can immediately release the cache\n    // pool for this render.\n    releaseRootPooledCache(root, remainingLanes);\n    if (__DEV__) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n    }\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (recoverableErrors !== null) {\n    // There were errors during this render, but recovered from them without\n    // needing to surface it to the UI. We log them here.\n    const onRecoverableError = root.onRecoverableError;\n    for (let i = 0; i < recoverableErrors.length; i++) {\n      const recoverableError = recoverableErrors[i];\n      const componentStack = recoverableError.stack;\n      const digest = recoverableError.digest;\n      onRecoverableError(recoverableError.value, {componentStack, digest});\n    }\n  }\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n  if (\n    includesSomeLane(pendingPassiveEffectsLanes, SyncLane) &&\n    root.tag !== LegacyRoot\n  ) {\n    flushPassiveEffects();\n  }\n\n  // Read this again, since a passive effect might have updated it\n  remainingLanes = root.pendingLanes;\n  if (includesSomeLane(remainingLanes, (SyncLane: Lane))) {\n    if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n      markNestedUpdateScheduled();\n    }\n\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbacks();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction releaseRootPooledCache(root: FiberRoot, remainingLanes: Lanes) {\n  if (enableCache) {\n    const pooledCacheLanes = (root.pooledCacheLanes &= remainingLanes);\n    if (pooledCacheLanes === NoLanes) {\n      // None of the remaining work relies on the cache pool. Clear it so\n      // subsequent requests get a new cache\n      const pooledCache = root.pooledCache;\n      if (pooledCache != null) {\n        root.pooledCache = null;\n        releaseCache(pooledCache);\n      }\n    }\n  }\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    // Cache the root since rootWithPendingPassiveEffects is cleared in\n    // flushPassiveEffectsImpl\n    const root = rootWithPendingPassiveEffects;\n    // Cache and clear the remaining lanes flag; it must be reset since this\n    // method can be called from various places, not always from commitRoot\n    // where the remaining lanes are known\n    const remainingLanes = pendingPassiveEffectsRemainingLanes;\n    pendingPassiveEffectsRemainingLanes = NoLanes;\n\n    const renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    const priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    const previousPriority = getCurrentUpdatePriority();\n\n    try {\n      ReactCurrentBatchConfig.transition = null;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig.transition = prevTransition;\n\n      // Once passive effects have run for the tree - giving components a\n      // chance to retain cache instances they use - release the pooled\n      // cache at the root (if there is one)\n      releaseRootPooledCache(root, remainingLanes);\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  // Cache and clear the transitions flag\n  const transitions = pendingPassiveTransitions;\n  pendingPassiveTransitions = null;\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Cannot flush passive effects while already rendering.');\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = true;\n    didScheduleUpdateDuringPassiveEffects = false;\n\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current, lanes, transitions);\n\n  // TODO: Move to commitPassiveMountEffects\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbacks();\n\n  if (enableTransitionTracing) {\n    const prevPendingTransitionCallbacks = currentPendingTransitionCallbacks;\n    const prevRootTransitionCallbacks = root.transitionCallbacks;\n    if (\n      prevPendingTransitionCallbacks !== null &&\n      prevRootTransitionCallbacks !== null\n    ) {\n      // TODO(luna) Refactor this code into the Host Config\n      // TODO(luna) The end time here is not necessarily accurate\n      // because passive effects could be called before paint\n      // (synchronously) or after paint (normally). We need\n      // to come up with a way to get the correct end time for both cases.\n      // One solution is in the host config, if the passive effects\n      // have not yet been run, make a call to flush the passive effects\n      // right after paint.\n      const endTime = now();\n      currentPendingTransitionCallbacks = null;\n\n      scheduleCallback(IdleSchedulerPriority, () =>\n        processTransitionCallbacks(\n          prevPendingTransitionCallbacks,\n          endTime,\n          prevRootTransitionCallbacks,\n        ),\n      );\n    }\n  }\n\n  if (__DEV__) {\n    // If additional passive effects were scheduled, increment a counter. If this\n    // exceeds the limit, we'll fire a warning.\n    if (didScheduleUpdateDuringPassiveEffects) {\n      if (root === rootWithPassiveNestedUpdates) {\n        nestedPassiveUpdateCount++;\n      } else {\n        nestedPassiveUpdateCount = 0;\n        rootWithPassiveNestedUpdates = root;\n      }\n    } else {\n      nestedPassiveUpdateCount = 0;\n    }\n    isFlushingPassiveEffects = false;\n    didScheduleUpdateDuringPassiveEffects = false;\n  }\n\n  // TODO: Move to commitPassiveMountEffects\n  onPostCommitRootDevTools(root);\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  const root = enqueueUpdate(rootFiber, update, (SyncLane: Lane));\n  const eventTime = requestEventTime();\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function captureCommitPhaseError(\n  sourceFiber: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  error: mixed,\n) {\n  if (__DEV__) {\n    reportUncaughtErrorInDEV(error);\n    setIsRunningInsertionEffect(false);\n  }\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = null;\n  if (skipUnmountedBoundaries) {\n    fiber = nearestMountedAncestor;\n  } else {\n    fiber = sourceFiber.return;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        const root = enqueueUpdate(fiber, update, (SyncLane: Lane));\n        const eventTime = requestEventTime();\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n\n  if (__DEV__) {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    console.error(\n      'Internal React error: Attempted to capture a commit phase error ' +\n        'inside a detached tree. This indicates a bug in React. Likely ' +\n        'causes include deleting the same fiber more than once, committing an ' +\n        'already-finished tree, or an inconsistent return pointer.\\n\\n' +\n        'Error message:\\n\\n%s',\n      error,\n    );\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  switch (boundaryFiber.tag) {\n    case SuspenseComponent:\n      retryCache = boundaryFiber.stateNode;\n      const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n      break;\n    case SuspenseListComponent:\n      retryCache = boundaryFiber.stateNode;\n      break;\n    case OffscreenComponent: {\n      const instance: OffscreenInstance = boundaryFiber.stateNode;\n      retryCache = instance.retryCache;\n      break;\n    }\n    default:\n      throw new Error(\n        'Pinged unknown suspense boundary type. ' +\n          'This is probably a bug in React.',\n      );\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nexport function throwIfInfiniteUpdateLoopDetected() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    nestedPassiveUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    rootWithPassiveNestedUpdates = null;\n\n    throw new Error(\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(\n  fiber: Fiber,\n  hasPassiveEffects: boolean,\n) {\n  if (__DEV__ && enableStrictEffects) {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n\n    setCurrentDebugFiberInDEV(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(\n        fiber,\n        MountPassiveDev,\n        invokePassiveEffectUnmountInDEV,\n      );\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction invokeEffectsInDev(\n  firstChild: Fiber,\n  fiberFlags: Flags,\n  invokeEffectFn: (fiber: Fiber) => void,\n): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n\n    let current = firstChild;\n    let subtreeRoot = null;\n    while (current !== null) {\n      const primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n      if (\n        current !== subtreeRoot &&\n        current.child !== null &&\n        primarySubtreeFlag !== NoFlags\n      ) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nexport function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber: Fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        didSuspendOrErrorWhileHydratingDEV() ||\n        (originalError !== null &&\n          typeof originalError === 'object' &&\n          typeof originalError.then === 'function')\n      ) {\n        // Don't replay promises.\n        // Don't replay errors if we are hydrating and have already suspended or handled an error\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(current, unitOfWork, workInProgressRootRenderLanes);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        if (\n          typeof replayError === 'object' &&\n          replayError !== null &&\n          replayError._suppressLogging &&\n          typeof originalError === 'object' &&\n          originalError !== null &&\n          !originalError._suppressLogging\n        ) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      }\n      // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n      throw originalError;\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentNameFromFiber(fiber) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport function restorePendingUpdaters(root: FiberRoot, lanes: Lanes): void {\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      const memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(schedulingFiber => {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      });\n\n      // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\n\nconst fakeActCallbackNode = {};\nfunction scheduleCallback(priorityLevel, callback) {\n  if (__DEV__) {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    const actQueue = ReactCurrentActQueue.current;\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return Scheduler_scheduleCallback(priorityLevel, callback);\n    }\n  } else {\n    // In production, always call Scheduler. This function will be stripped out.\n    return Scheduler_scheduleCallback(priorityLevel, callback);\n  }\n}\n\nfunction cancelCallback(callbackNode) {\n  if (__DEV__ && callbackNode === fakeActCallbackNode) {\n    return;\n  }\n  // In production, always call Scheduler. This function will be stripped out.\n  return Scheduler_cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && ReactCurrentActQueue.current !== null;\n}\n\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (fiber.mode & ConcurrentMode) {\n      if (!isConcurrentActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n    } else {\n      // Legacy mode has additional cases where we suppress a warning.\n      if (!isLegacyActEnvironment(fiber)) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n      if (executionContext !== NoContext) {\n        // Legacy mode doesn't warn if the update is batched, i.e.\n        // batchedUpdates or flushSync.\n        return;\n      }\n      if (\n        fiber.tag !== FunctionComponent &&\n        fiber.tag !== ForwardRef &&\n        fiber.tag !== SimpleMemoComponent\n      ) {\n        // For backwards compatibility with pre-hooks code, legacy mode only\n        // warns for updates that originate from a hook.\n        return;\n      }\n    }\n\n    if (ReactCurrentActQueue.current === null) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentNameFromFiber(fiber),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root: FiberRoot): void {\n  if (__DEV__) {\n    if (\n      root.tag !== LegacyRoot &&\n      isConcurrentActEnvironment() &&\n      ReactCurrentActQueue.current === null\n    ) {\n      console.error(\n        'A suspended resource finished loading inside a test, but the event ' +\n          'was not wrapped in act(...).\\n\\n' +\n          'When testing, code that resolves suspended data should be wrapped ' +\n          'into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* finish loading suspended data */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n      );\n    }\n  }\n}\n\nexport function setIsRunningInsertionEffect(isRunning: boolean): void {\n  if (__DEV__) {\n    isRunningInsertionEffect = isRunning;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-disable react-internal/prod-error-codes */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport {\n  flushSync,\n  scheduleUpdateOnFiber,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {updateContainer} from './ReactFiberReconciler.old';\nimport {emptyContextObject} from './ReactFiberContext.old';\nimport {SyncLane, NoTimestamp} from './ReactFiberLane.old';\nimport {\n  ClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  HostComponent,\n  HostPortal,\n  HostRoot,\n  MemoComponent,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type Family = {|\n  current: any,\n|};\n\nexport type RefreshUpdate = {|\n  staleFamilies: Set<Family>,\n  updatedFamilies: Set<Family>,\n|};\n\n// Resolves type to a family.\ntype RefreshHandler = any => Family | void;\n\n// Used by React Refresh runtime through DevTools Global Hook.\nexport type SetRefreshHandler = (handler: RefreshHandler | null) => void;\nexport type ScheduleRefresh = (root: FiberRoot, update: RefreshUpdate) => void;\nexport type ScheduleRoot = (root: FiberRoot, element: ReactNodeList) => void;\nexport type FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n) => Set<Instance>;\n\nlet resolveFamily: RefreshHandler | null = null;\n// $FlowFixMe Flow gets confused by a WeakSet feature check below.\nlet failedBoundaries: WeakSet<Fiber> | null = null;\n\nexport const setRefreshHandler = (handler: RefreshHandler | null): void => {\n  if (__DEV__) {\n    resolveFamily = handler;\n  }\n};\n\nexport function resolveFunctionForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function resolveClassForHotReloading(type: any): any {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\n\nexport function resolveForwardRefForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (\n        type !== null &&\n        type !== undefined &&\n        typeof type.render === 'function'\n      ) {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        const currentRender = resolveFunctionForHotReloading(type.render);\n        if (type.render !== currentRender) {\n          const syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender,\n          };\n          if (type.displayName !== undefined) {\n            (syntheticType: any).displayName = type.displayName;\n          }\n          return syntheticType;\n        }\n      }\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function isCompatibleFamilyForHotReloading(\n  fiber: Fiber,\n  element: ReactElement,\n): boolean {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    const prevType = fiber.elementType;\n    const nextType = element.type;\n\n    // If we got here, we know types aren't === equal.\n    let needsCompareFamilies = false;\n\n    const $$typeofNextType =\n      typeof nextType === 'object' && nextType !== null\n        ? nextType.$$typeof\n        : null;\n\n    switch (fiber.tag) {\n      case ClassComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case FunctionComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          // We don't know the inner type yet.\n          // We're going to assume that the lazy inner type is stable,\n          // and so it is sufficient to avoid reconciling it away.\n          // We're not going to unwrap or actually use the new lazy type.\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case ForwardRef: {\n        if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if ($$typeofNextType === REACT_MEMO_TYPE) {\n          // TODO: if it was but can no longer be simple,\n          // we shouldn't set this.\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      default:\n        return false;\n    }\n\n    // Check if both types have a family and it's the same one.\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      const prevFamily = resolveFamily(prevType);\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return false;\n  }\n}\n\nexport function markFailedErrorBoundaryForHotReloading(fiber: Fiber) {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n    failedBoundaries.add(fiber);\n  }\n}\n\nexport const scheduleRefresh: ScheduleRefresh = (\n  root: FiberRoot,\n  update: RefreshUpdate,\n): void => {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    const {staleFamilies, updatedFamilies} = update;\n    flushPassiveEffects();\n    flushSync(() => {\n      scheduleFibersWithFamiliesRecursively(\n        root.current,\n        updatedFamilies,\n        staleFamilies,\n      );\n    });\n  }\n};\n\nexport const scheduleRoot: ScheduleRoot = (\n  root: FiberRoot,\n  element: ReactNodeList,\n): void => {\n  if (__DEV__) {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n    flushPassiveEffects();\n    flushSync(() => {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(\n  fiber: Fiber,\n  updatedFamilies: Set<Family>,\n  staleFamilies: Set<Family>,\n) {\n  if (__DEV__) {\n    const {alternate, child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    let needsRender = false;\n    let needsRemount = false;\n    if (candidateType !== null) {\n      const family = resolveFamily(candidateType);\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n    if (failedBoundaries !== null) {\n      if (\n        failedBoundaries.has(fiber) ||\n        (alternate !== null && failedBoundaries.has(alternate))\n      ) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n    if (needsRemount || needsRender) {\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(\n        child,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(\n        sibling,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n  }\n}\n\nexport const findHostInstancesForRefresh: FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n): Set<Instance> => {\n  if (__DEV__) {\n    const hostInstances = new Set();\n    const types = new Set(families.map(family => family.current));\n    findHostInstancesForMatchingFibersRecursively(\n      root.current,\n      types,\n      hostInstances,\n    );\n    return hostInstances;\n  } else {\n    throw new Error(\n      'Did not expect findHostInstancesForRefresh to be called in production.',\n    );\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(\n  fiber: Fiber,\n  types: Set<any>,\n  hostInstances: Set<Instance>,\n) {\n  if (__DEV__) {\n    const {child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    let didMatch = false;\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(\n          child,\n          types,\n          hostInstances,\n        );\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(\n        sibling,\n        types,\n        hostInstances,\n      );\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): void {\n  if (__DEV__) {\n    const foundHostInstances = findChildHostInstancesForFiberShallowly(\n      fiber,\n      hostInstances,\n    );\n    if (foundHostInstances) {\n      return;\n    }\n    // If we didn't find any host children, fallback to closest host parent.\n    let node = fiber;\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): boolean {\n  if (__DEV__) {\n    let node: Fiber = fiber;\n    let foundHostInstances = false;\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode);\n        // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactFragment, ReactPortal, ReactScope} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {\n  OffscreenProps,\n  OffscreenInstance,\n} from './ReactFiberOffscreenComponent';\nimport type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent.old';\n\nimport {\n  createRootStrictEffectsByDefault,\n  enableCache,\n  enableStrictEffects,\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableLegacyHidden,\n  enableSyncDefaultUpdates,\n  allowConcurrentByDefault,\n  enableTransitionTracing,\n  enableDebugTracing,\n} from 'shared/ReactFeatureFlags';\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {OffscreenVisible} from './ReactFiberOffscreenComponent';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  ConcurrentUpdatesByDefaultMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effects are no longer valid.\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement;\n\n  // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(\n  tag: RootTag,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      if (enableStrictEffects) {\n        mode |= StrictEffectsMode;\n      }\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n    if (\n      // We only use this flag for our repo tests to check both behaviors.\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n      !enableSyncDefaultUpdates ||\n      // Only for internal experiments.\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\n    ) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        if (enableLegacyHidden) {\n          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_TRACING_MARKER_TYPE:\n        if (enableTransitionTracing) {\n          return createFiberFromTracingMarker(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        if (enableDebugTracing) {\n          fiberTag = Mode;\n          mode |= DebugTracingMode;\n          break;\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n\n        throw new Error(\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            `but got: ${type == null ? type : typeof type}.${info}`,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error(\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n        typeof pendingProps.id,\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  const primaryChildInstance: OffscreenInstance = {\n    visibility: OffscreenVisible,\n    pendingMarkers: null,\n    retryCache: null,\n    transitions: null,\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  // Adding a stateNode for legacy hidden because it's currently using\n  // the offscreen implementation, which depends on a state node\n  const instance: OffscreenInstance = {\n    visibility: OffscreenVisible,\n    pendingMarkers: null,\n    transitions: null,\n    retryCache: null,\n  };\n  fiber.stateNode = instance;\n  return fiber;\n}\n\nexport function createFiberFromCache(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromTracingMarker(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(TracingMarkerComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_TRACING_MARKER_TYPE;\n  fiber.lanes = lanes;\n  const tracingMarkerInstance: TracingMarkerInstance = {\n    transitions: null,\n    pendingBoundaries: null,\n  };\n  fiber.stateNode = tracingMarkerInstance;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {\n  FiberRoot,\n  SuspenseHydrationCallbacks,\n  TransitionTracingCallbacks,\n} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {Cache} from './ReactFiberCacheComponent.old';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLane,\n  NoLanes,\n  NoTimestamp,\n  TotalLanes,\n  createLaneMap,\n} from './ReactFiberLane.old';\nimport {\n  enableSuspenseCallback,\n  enableCache,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableUpdaterTracking,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {initializeUpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport {LegacyRoot, ConcurrentRoot} from './ReactRootTags';\nimport {createCache, retainCache} from './ReactFiberCacheComponent.old';\n\nexport type RootState = {\n  element: any,\n  isDehydrated: boolean,\n  cache: Cache,\n};\n\nfunction FiberRootNode(\n  containerInfo,\n  tag,\n  hydrate,\n  identifierPrefix,\n  onRecoverableError,\n) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  this.hiddenUpdates = createLaneMap(null);\n\n  this.identifierPrefix = identifierPrefix;\n  this.onRecoverableError = onRecoverableError;\n\n  if (enableCache) {\n    this.pooledCache = null;\n    this.pooledCacheLanes = NoLanes;\n  }\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  this.incompleteTransitions = new Map();\n  if (enableTransitionTracing) {\n    this.transitionCallbacks = null;\n    const transitionLanesMap = (this.transitionLanes = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      transitionLanesMap.push(null);\n    }\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  if (enableUpdaterTracking) {\n    this.memoizedUpdaters = new Set();\n    const pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  initialChildren: ReactNodeList,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  // TODO: We have several of these arguments that are conceptually part of the\n  // host config, but because they are passed in at runtime, we have to thread\n  // them through the root constructor. Perhaps we should put them all into a\n  // single type, like a DynamicHostConfig that is defined by the renderer.\n  identifierPrefix: string,\n  onRecoverableError: null | ((error: mixed) => void),\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(\n    containerInfo,\n    tag,\n    hydrate,\n    identifierPrefix,\n    onRecoverableError,\n  ): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  if (enableTransitionTracing) {\n    root.transitionCallbacks = transitionCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(\n    tag,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  if (enableCache) {\n    const initialCache = createCache();\n    retainCache(initialCache);\n\n    // The pooledCache is a fresh cache instance that is used temporarily\n    // for newly mounted boundaries during a render. In general, the\n    // pooledCache is always cleared from the root at the end of a render:\n    // it is either released when render commits, or moved to an Offscreen\n    // component if rendering suspends. Because the lifetime of the pooled\n    // cache is distinct from the main memoizedState.cache, it must be\n    // retained separately.\n    root.pooledCache = initialCache;\n    retainCache(initialCache);\n    const initialState: RootState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: initialCache,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  } else {\n    const initialState: RootState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: (null: any), // not enabled yet\n    };\n    uninitializedFiber.memoizedState = initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\n//\n// TODO: 18.0.0 has not been released to NPM;\n// It exists as a placeholder so that DevTools can support work tag changes between releases.\n// When we next publish a release, update the matching TODO in backend/renderer.js\n// TODO: This module is used both by the release scripts and to expose a version\n// at runtime. We should instead inject the version number as part of the build\n// process, and use the ReactVersions.js module as the single source of truth.\nexport default '18.2.0';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Fiber,\n  SuspenseHydrationCallbacks,\n  TransitionTracingCallbacks,\n} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport isArray from 'shared/isArray';\nimport {enableSchedulingProfiler} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {\n  injectInternals,\n  markRenderScheduled,\n  onScheduleRoot,\n} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  scheduleInitialHydrationOnRoot,\n  flushRoot,\n  batchedUpdates,\n  flushSync,\n  isAlreadyRendering,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n} from './ReactFiberLane.old';\nimport {\n  getCurrentUpdatePriority,\n  runWithPriority,\n} from './ReactEventPriorities.old';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport ReactVersion from 'shared/ReactVersion';\nexport {registerMutableSourceForHydration} from './ReactMutableSource.old';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPseudoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      throw new Error('Unable to find node on an unmounted component.');\n    } else {\n      const keys = Object.keys(component).join(',');\n      throw new Error(\n        `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        throw new Error('Unable to find node on an unmounted component.');\n      } else {\n        const keys = Object.keys(component).join(',');\n        throw new Error(\n          `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictLegacyMode) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictLegacyMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  identifierPrefix: string,\n  onRecoverableError: (error: mixed) => void,\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): OpaqueRoot {\n  const hydrate = false;\n  const initialChildren = null;\n  return createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onRecoverableError,\n    transitionCallbacks,\n  );\n}\n\nexport function createHydrationContainer(\n  initialChildren: ReactNodeList,\n  // TODO: Remove `callback` when we delete legacy mode.\n  callback: ?Function,\n  containerInfo: Container,\n  tag: RootTag,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  identifierPrefix: string,\n  onRecoverableError: (error: mixed) => void,\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): OpaqueRoot {\n  const hydrate = true;\n  const root = createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onRecoverableError,\n    transitionCallbacks,\n  );\n\n  // TODO: Move this to FiberRoot constructor\n  root.context = getContextForSubtree(null);\n\n  // Schedule the initial render. In a hydration root, this is different from\n  // a regular update because the initial render must match was was rendered\n  // on the server.\n  // NOTE: This update intentionally doesn't have a payload. We're only using\n  // the update to schedule work on the root fiber (and, for legacy roots, to\n  // enqueue the callback if one is provided).\n  const current = root.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n  const update = createUpdate(eventTime, lane);\n  update.callback =\n    callback !== undefined && callback !== null ? callback : null;\n  enqueueUpdate(current, update, lane);\n  scheduleInitialHydrationOnRoot(root, lane, eventTime);\n\n  return root;\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentNameFromFiber(ReactCurrentFiberCurrent) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  const root = enqueueUpdate(current, update, lane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, current, lane, eventTime);\n    entangleTransitions(root, current, lane);\n  }\n\n  return lane;\n}\n\nexport {\n  batchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushControlled,\n  flushSync,\n  isAlreadyRendering,\n  flushPassiveEffects,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot: {\n      const root: FiberRoot = fiber.stateNode;\n      if (isRootDehydrated(root)) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      flushSync(() => {\n        const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          const eventTime = requestEventTime();\n          scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n        }\n      });\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = SyncLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n    }\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thenables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptDiscreteHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const lane = SyncLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const lane = SelectiveHydrationLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const lane = requestUpdateLane(fiber);\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport {getCurrentUpdatePriority, runWithPriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldErrorImpl = fiber => null;\n\nexport function shouldError(fiber: Fiber): ?boolean {\n  return shouldErrorImpl(fiber);\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setErrorHandler = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  setErrorHandler = (newShouldErrorImpl: Fiber => ?boolean) => {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setErrorHandler,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion,\n  });\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {FiberRoot} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance, TextInstance} from './ReactTestHostConfig';\n\nimport * as React from 'react';\nimport * as Scheduler from 'scheduler/unstable_mock';\nimport {\n  getPublicRootInstance,\n  createContainer,\n  updateContainer,\n  flushSync,\n  injectIntoDevTools,\n  batchedUpdates,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport {findCurrentFiberUsingSlowPath} from 'react-reconciler/src/ReactFiberTreeReflection';\nimport {\n  Fragment,\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  HostPortal,\n  HostText,\n  HostRoot,\n  ContextConsumer,\n  ContextProvider,\n  Mode,\n  ForwardRef,\n  Profiler,\n  MemoComponent,\n  SimpleMemoComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport isArray from 'shared/isArray';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactVersion from 'shared/ReactVersion';\nimport {checkPropStringCoercion} from 'shared/CheckStringCoercion';\n\nimport {getPublicInstance} from './ReactTestHostConfig';\nimport {ConcurrentRoot, LegacyRoot} from 'react-reconciler/src/ReactRootTags';\nimport {allowConcurrentByDefault} from 'shared/ReactFeatureFlags';\n\nconst act = React.unstable_act;\n\n// TODO: Remove from public bundle\n\ntype TestRendererOptions = {\n  createNodeMock: (element: React$Element<any>) => any,\n  unstable_isConcurrent: boolean,\n  unstable_strictMode: boolean,\n  unstable_concurrentUpdatesByDefault: boolean,\n  ...\n};\n\ntype ReactTestRendererJSON = {|\n  type: string,\n  props: {[propName: string]: any, ...},\n  children: null | Array<ReactTestRendererNode>,\n  $$typeof?: Symbol, // Optional because we add it with defineProperty().\n|};\ntype ReactTestRendererNode = ReactTestRendererJSON | string;\n\ntype FindOptions = $Shape<{\n  // performs a \"greedy\" search: if a matching node is found, will continue\n  // to search within the matching node's children. (default: true)\n  deep: boolean,\n  ...\n}>;\n\nexport type Predicate = (node: ReactTestInstance) => ?boolean;\n\nconst defaultTestOptions = {\n  createNodeMock: function() {\n    return null;\n  },\n};\n\nfunction toJSON(inst: Instance | TextInstance): ReactTestRendererNode | null {\n  if (inst.isHidden) {\n    // Omit timed out children from output entirely. This seems like the least\n    // surprising behavior. We could perhaps add a separate API that includes\n    // them, if it turns out people need it.\n    return null;\n  }\n  switch (inst.tag) {\n    case 'TEXT':\n      return inst.text;\n    case 'INSTANCE': {\n      /* eslint-disable no-unused-vars */\n      // We don't include the `children` prop in JSON.\n      // Instead, we will include the actual rendered children.\n      const {children, ...props} = inst.props;\n      /* eslint-enable */\n      let renderedChildren = null;\n      if (inst.children && inst.children.length) {\n        for (let i = 0; i < inst.children.length; i++) {\n          const renderedChild = toJSON(inst.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      const json: ReactTestRendererJSON = {\n        type: inst.type,\n        props: props,\n        children: renderedChildren,\n      };\n      Object.defineProperty(json, '$$typeof', {\n        value: Symbol.for('react.test.json'),\n      });\n      return json;\n    }\n    default:\n      throw new Error(`Unexpected node type in toJSON: ${inst.tag}`);\n  }\n}\n\nfunction childrenToTree(node) {\n  if (!node) {\n    return null;\n  }\n  const children = nodeAndSiblingsArray(node);\n  if (children.length === 0) {\n    return null;\n  } else if (children.length === 1) {\n    return toTree(children[0]);\n  }\n  return flatten(children.map(toTree));\n}\n\nfunction nodeAndSiblingsArray(nodeWithSibling) {\n  const array = [];\n  let node = nodeWithSibling;\n  while (node != null) {\n    array.push(node);\n    node = node.sibling;\n  }\n  return array;\n}\n\nfunction flatten(arr) {\n  const result = [];\n  const stack = [{i: 0, array: arr}];\n  while (stack.length) {\n    const n = stack.pop();\n    while (n.i < n.array.length) {\n      const el = n.array[n.i];\n      n.i += 1;\n      if (isArray(el)) {\n        stack.push(n);\n        stack.push({i: 0, array: el});\n        break;\n      }\n      result.push(el);\n    }\n  }\n  return result;\n}\n\nfunction toTree(node: ?Fiber) {\n  if (node == null) {\n    return null;\n  }\n  switch (node.tag) {\n    case HostRoot:\n      return childrenToTree(node.child);\n    case HostPortal:\n      return childrenToTree(node.child);\n    case ClassComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: node.stateNode,\n        rendered: childrenToTree(node.child),\n      };\n    case FunctionComponent:\n    case SimpleMemoComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null,\n        rendered: childrenToTree(node.child),\n      };\n    case HostComponent: {\n      return {\n        nodeType: 'host',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null, // TODO: use createNodeMock here somehow?\n        rendered: flatten(nodeAndSiblingsArray(node.child).map(toTree)),\n      };\n    }\n    case HostText:\n      return node.stateNode.text;\n    case Fragment:\n    case ContextProvider:\n    case ContextConsumer:\n    case Mode:\n    case Profiler:\n    case ForwardRef:\n    case MemoComponent:\n    case IncompleteClassComponent:\n    case ScopeComponent:\n      return childrenToTree(node.child);\n    default:\n      throw new Error(\n        `toTree() does not yet know how to handle nodes with tag=${node.tag}`,\n      );\n  }\n}\n\nconst validWrapperTypes = new Set([\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  // Normally skipped, but used when there's more than one root child.\n  HostRoot,\n]);\n\nfunction getChildren(parent: Fiber) {\n  const children = [];\n  const startingNode = parent;\n  let node: Fiber = startingNode;\n  if (node.child === null) {\n    return children;\n  }\n  node.child.return = node;\n  node = node.child;\n  outer: while (true) {\n    let descend = false;\n    if (validWrapperTypes.has(node.tag)) {\n      children.push(wrapFiber(node));\n    } else if (node.tag === HostText) {\n      if (__DEV__) {\n        checkPropStringCoercion(node.memoizedProps, 'memoizedProps');\n      }\n      children.push('' + node.memoizedProps);\n    } else {\n      descend = true;\n    }\n    if (descend && node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    while (node.sibling === null) {\n      if (node.return === startingNode) {\n        break outer;\n      }\n      node = (node.return: any);\n    }\n    (node.sibling: any).return = node.return;\n    node = (node.sibling: any);\n  }\n  return children;\n}\n\nclass ReactTestInstance {\n  _fiber: Fiber;\n\n  _currentFiber(): Fiber {\n    // Throws if this component has been unmounted.\n    const fiber = findCurrentFiberUsingSlowPath(this._fiber);\n\n    if (fiber === null) {\n      throw new Error(\n        \"Can't read from currently-mounting component. This error is likely \" +\n          'caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    return fiber;\n  }\n\n  constructor(fiber: Fiber) {\n    if (!validWrapperTypes.has(fiber.tag)) {\n      throw new Error(\n        `Unexpected object passed to ReactTestInstance constructor (tag: ${fiber.tag}). ` +\n          'This is probably a bug in React.',\n      );\n    }\n\n    this._fiber = fiber;\n  }\n\n  get instance() {\n    if (this._fiber.tag === HostComponent) {\n      return getPublicInstance(this._fiber.stateNode);\n    } else {\n      return this._fiber.stateNode;\n    }\n  }\n\n  get type() {\n    return this._fiber.type;\n  }\n\n  get props(): Object {\n    return this._currentFiber().memoizedProps;\n  }\n\n  get parent(): ?ReactTestInstance {\n    let parent = this._fiber.return;\n    while (parent !== null) {\n      if (validWrapperTypes.has(parent.tag)) {\n        if (parent.tag === HostRoot) {\n          // Special case: we only \"materialize\" instances for roots\n          // if they have more than a single child. So we'll check that now.\n          if (getChildren(parent).length < 2) {\n            return null;\n          }\n        }\n        return wrapFiber(parent);\n      }\n      parent = parent.return;\n    }\n    return null;\n  }\n\n  get children(): Array<ReactTestInstance | string> {\n    return getChildren(this._currentFiber());\n  }\n\n  // Custom search functions\n  find(predicate: Predicate): ReactTestInstance {\n    return expectOne(\n      this.findAll(predicate, {deep: false}),\n      `matching custom predicate: ${predicate.toString()}`,\n    );\n  }\n\n  findByType(type: any): ReactTestInstance {\n    return expectOne(\n      this.findAllByType(type, {deep: false}),\n      `with node type: \"${getComponentNameFromType(type) || 'Unknown'}\"`,\n    );\n  }\n\n  findByProps(props: Object): ReactTestInstance {\n    return expectOne(\n      this.findAllByProps(props, {deep: false}),\n      `with props: ${JSON.stringify(props)}`,\n    );\n  }\n\n  findAll(\n    predicate: Predicate,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, predicate, options);\n  }\n\n  findAllByType(\n    type: any,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, node => node.type === type, options);\n  }\n\n  findAllByProps(\n    props: Object,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(\n      this,\n      node => node.props && propsMatch(node.props, props),\n      options,\n    );\n  }\n}\n\nfunction findAll(\n  root: ReactTestInstance,\n  predicate: Predicate,\n  options: ?FindOptions,\n): Array<ReactTestInstance> {\n  const deep = options ? options.deep : true;\n  const results = [];\n\n  if (predicate(root)) {\n    results.push(root);\n    if (!deep) {\n      return results;\n    }\n  }\n\n  root.children.forEach(child => {\n    if (typeof child === 'string') {\n      return;\n    }\n    results.push(...findAll(child, predicate, options));\n  });\n\n  return results;\n}\n\nfunction expectOne(\n  all: Array<ReactTestInstance>,\n  message: string,\n): ReactTestInstance {\n  if (all.length === 1) {\n    return all[0];\n  }\n\n  const prefix =\n    all.length === 0\n      ? 'No instances found '\n      : `Expected 1 but found ${all.length} instances `;\n\n  throw new Error(prefix + message);\n}\n\nfunction propsMatch(props: Object, filter: Object): boolean {\n  for (const key in filter) {\n    if (props[key] !== filter[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction onRecoverableError(error) {\n  // TODO: Expose onRecoverableError option to userspace\n  // eslint-disable-next-line react-internal/no-production-logging, react-internal/warning-args\n  console.error(error);\n}\n\nfunction create(element: React$Element<any>, options: TestRendererOptions) {\n  let createNodeMock = defaultTestOptions.createNodeMock;\n  let isConcurrent = false;\n  let isStrictMode = false;\n  let concurrentUpdatesByDefault = null;\n  if (typeof options === 'object' && options !== null) {\n    if (typeof options.createNodeMock === 'function') {\n      createNodeMock = options.createNodeMock;\n    }\n    if (options.unstable_isConcurrent === true) {\n      isConcurrent = true;\n    }\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n    if (allowConcurrentByDefault) {\n      if (options.unstable_concurrentUpdatesByDefault !== undefined) {\n        concurrentUpdatesByDefault =\n          options.unstable_concurrentUpdatesByDefault;\n      }\n    }\n  }\n  let container = {\n    children: [],\n    createNodeMock,\n    tag: 'CONTAINER',\n  };\n  let root: FiberRoot | null = createContainer(\n    container,\n    isConcurrent ? ConcurrentRoot : LegacyRoot,\n    null,\n    isStrictMode,\n    concurrentUpdatesByDefault,\n    '',\n    onRecoverableError,\n    null,\n  );\n\n  if (root == null) {\n    throw new Error('something went wrong');\n  }\n\n  updateContainer(element, root, null, null);\n\n  const entry = {\n    _Scheduler: Scheduler,\n\n    root: undefined, // makes flow happy\n    // we define a 'getter' for 'root' below using 'Object.defineProperty'\n    toJSON(): Array<ReactTestRendererNode> | ReactTestRendererNode | null {\n      if (root == null || root.current == null || container == null) {\n        return null;\n      }\n      if (container.children.length === 0) {\n        return null;\n      }\n      if (container.children.length === 1) {\n        return toJSON(container.children[0]);\n      }\n      if (\n        container.children.length === 2 &&\n        container.children[0].isHidden === true &&\n        container.children[1].isHidden === false\n      ) {\n        // Omit timed out children from output entirely, including the fact that we\n        // temporarily wrap fallback and timed out children in an array.\n        return toJSON(container.children[1]);\n      }\n      let renderedChildren = null;\n      if (container.children && container.children.length) {\n        for (let i = 0; i < container.children.length; i++) {\n          const renderedChild = toJSON(container.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      return renderedChildren;\n    },\n    toTree() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return toTree(root.current);\n    },\n    update(newElement: React$Element<any>) {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(newElement, root, null, null);\n    },\n    unmount() {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(null, root, null, null);\n      container = null;\n      root = null;\n    },\n    getInstance() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return getPublicRootInstance(root);\n    },\n\n    unstable_flushSync: flushSync,\n  };\n\n  Object.defineProperty(\n    entry,\n    'root',\n    ({\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (root === null) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        }\n        const children = getChildren(root.current);\n        if (children.length === 0) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        } else if (children.length === 1) {\n          // Normally, we skip the root and just give you the child.\n          return children[0];\n        } else {\n          // However, we give you the root if there's more than one root child.\n          // We could make this the behavior for all cases but it would be a breaking change.\n          return wrapFiber(root.current);\n        }\n      },\n    }: Object),\n  );\n\n  return entry;\n}\n\nconst fiberToWrapper = new WeakMap();\nfunction wrapFiber(fiber: Fiber): ReactTestInstance {\n  let wrapper = fiberToWrapper.get(fiber);\n  if (wrapper === undefined && fiber.alternate !== null) {\n    wrapper = fiberToWrapper.get(fiber.alternate);\n  }\n  if (wrapper === undefined) {\n    wrapper = new ReactTestInstance(fiber);\n    fiberToWrapper.set(fiber, wrapper);\n  }\n  return wrapper;\n}\n\n// Enable ReactTestRenderer to be used to test DevTools integration.\ninjectIntoDevTools({\n  findFiberByHostInstance: (() => {\n    throw new Error('TestRenderer does not support findFiberByHostInstance()');\n  }: any),\n  bundleType: __DEV__ ? 1 : 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-test-renderer',\n});\n\nexport {\n  Scheduler as _Scheduler,\n  create,\n  /* eslint-disable-next-line camelcase */\n  batchedUpdates as unstable_batchedUpdates,\n  act,\n};\n"],"names":["ReactSharedInternals","React","warn","format","args","printWarning","error","level","ReactDebugCurrentFrame","stack","getStackAddendum","concat","argsWithFormat","map","item","String","unshift","Function","prototype","apply","call","console","assign","Object","get","key","_reactInternals","set","value","enableSchedulingProfiler","enableProfilerTimer","__PROFILE__","enableProfilerCommitHooks","enableProfilerNestedUpdatePhase","warnAboutStringRefs","enableNewReconciler","enableSuspenseAvoidThisFallback","enableLazyContextPropagation","enableLegacyHidden","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","name","getContextName","type","getComponentNameFromType","tag","$$typeof","context","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","getComponentNameFromFiber","fiber","NoFlags","PerformedWork","Placement","Update","ChildDeletion","ContentReset","Callback","DidCapture","ForceClientRender","Ref","Snapshot","Passive","Hydrating","Visibility","StoreConsistency","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","PassiveStatic","BeforeMutationMask","enableCreateEventHandleAPI","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","owner","current","ownerFiber","instance","stateNode","_warnedAboutRefsInRender","getInstance","assertIsMounted","Error","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","isArrayImpl","Array","isArray","scheduleCallback","Scheduler","cancelCallback","shouldYield","requestPaint","now","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","rendererID","injectedHook","hasLoggedError","isDevToolsPresent","__REACT_DEVTOOLS_GLOBAL_HOOK__","injectInternals","internals","hook","isDisabled","supportsFiber","getLaneLabelMap","injectProfilingHooks","inject","err","checkDCE","onScheduleRoot","root","children","onScheduleFiberRoot","__DEV__","onCommitRoot","eventPriority","onCommitFiberRoot","didError","schedulerPriority","DiscreteEventPriority","ImmediateSchedulerPriority","ContinuousEventPriority","UserBlockingSchedulerPriority","DefaultEventPriority","NormalSchedulerPriority","IdleEventPriority","IdleSchedulerPriority","undefined","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","profilingHooks","injectedProfilingHooks","markComponentRenderStopped","markComponentErrored","thrownValue","lanes","markComponentSuspended","wakeable","NoMode","ConcurrentMode","ProfileMode","StrictLegacyMode","ConcurrentUpdatesByDefaultMode","clz32","Math","clz32Fallback","log","LN2","asUint","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","getHighestPriorityLane","getNextLanes","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","allowConcurrentByDefault","mode","entangledLanes","entanglements","index","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyNonUrgentLanes","UrgentLanes","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","createLaneMap","initial","laneMap","i","push","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootFinished","remainingLanes","noLongerPendingLanes","mutableReadLanes","hiddenUpdates","hiddenUpdatesForLane","length","update","markRootEntangled","rootEntangledLanes","markHiddenUpdate","getBumpedLaneForHydration","renderLanes","renderLane","getTransitionsForLanes","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","shim","isSuspenseInstancePending","isSuspenseInstanceFallback","getSuspenseInstanceFallbackErrorDetails","registerSuspenseInstanceRetry","hydrateTextInstance","clearSuspenseBoundary","clearSuspenseBoundaryFromContainer","errorHydratingContainer","NO_CONTEXT","UPDATE_SIGNAL","nodeToInstanceMap","WeakMap","freeze","getPublicInstance","inst","createNodeMock","rootContainerInstance","mockNode","props","appendChild","parentInstance","indexOf","splice","insertBefore","beforeChild","beforeIndex","removeChild","clearContainer","container","getRootHostContext","getChildHostContext","parentHostContext","prepareForCommit","containerInfo","resetAfterCommit","createInstance","hostContext","internalInstanceHandle","isHidden","appendInitialChild","prepareUpdate","testElement","oldProps","newProps","shouldSetTextContent","createTextInstance","text","getCurrentEventPriority","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","commitUpdate","updatePayload","commitMount","commitTextUpdate","textInstance","oldText","newText","resetTextContent","appendChildToContainer","insertInContainerBefore","removeChildFromContainer","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","preparePortalMount","portalInstance","ReactCurrentDispatcher","describeBuiltInComponentFrame","source","ownerFn","ownerName","describeComponentFrame","componentFrameCache","PossiblyWeakMap","Map","BEFORE_SLASH_RE","sourceInfo","path","fileName","replace","test","pathBeforeSlash","folderName","lineNumber","describeClassComponentFrame","ctor","describeFunctionComponentFrame","fn","describeUnknownElementTypeFrameInDEV","hasOwnProperty","loggedTypeFailures","setCurrentlyValidatingElement","element","_owner","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","has","bind","typeSpecName","ex","message","valueStack","fiberStack","createCursor","defaultValue","pop","cursor","warnedAboutMissingGetChildContext","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","Component","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","OffscreenVisible","OffscreenPassiveEffectsConnected","is","y","objectIs","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","callback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","slice","isRootDehydrated","currentState","memoizedState","isDehydrated","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","popTreeContext","isHydrating","hydrationErrors","reenterHydrationStateFromDehydratedSuspenseInstance","suspenseInstance","treeContext","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","shouldUpdate","prepareToHydrateHostSuspenseInstance","popHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","getIsHydrating","queueHydrationError","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","shallowEqual","objA","objB","keysA","keys","keysB","currentKey","describeFiber","_debugOwner","_debugSource","getStackByFiberInDevAndProd","info","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","getCurrentFiber","setIsRendering","rendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","setToSortedString","array","forEach","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","add","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","size","sortedNames","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","fiberArray","firstFiber","uniqueNames","setCurrentDebugFiberInDEV","resetCurrentDebugFiberInDEV","typeName","hasToStringTag","toStringTag","constructor","willCoercionThrow","testStringCoercion","e","checkPropStringCoercion","propName","resolveDefaultProps","baseProps","defaultProps","valueCursor","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","_currentValue2","_currentRenderer2","popProvider","currentValue","scheduleContextWorkOnParentPath","propagationRoot","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependencies","dependency","firstContext","createUpdate","ForceUpdate","updateQueue","sharedQueue","shared","pending","next","parentSuspense","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","isPrimaryRenderer","contextItem","memoizedValue","concurrentQueues","concurrentQueuesIndex","concurrentlyUpdatedLanes","finishQueueingConcurrentUpdates","endIndex","markUpdateLaneFromFiberToRoot","getConcurrentlyUpdatedLanes","enqueueUpdate","enqueueConcurrentHookUpdate","concurrentQueue","concurrentUpdate","getRootForUpdatedFiber","enqueueConcurrentHookUpdateAndEagerlyBailout","enqueueConcurrentClassUpdate","enqueueConcurrentRenderForLane","unsafe_markUpdateLaneFromFiberToRoot","sourceFiber","offscreenInstance","visibility","throwIfInfiniteUpdateLoopDetected","detectUpdateOnUnmountedFiber","warnAboutUpdateOnNotYetMountedFiberInDEV","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","hiddenCallbacks","callbacks","cloneUpdateQueue","currentQueue","clone","isUnsafeClassRenderPhaseUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","lastPendingUpdate","firstPendingUpdate","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","isHiddenUpdate","shouldSkipUpdate","getWorkInProgressRootRenderLanes","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","deferHiddenCallbacks","newHiddenCallbacks","existingHiddenCallbacks","commitHiddenCallbacks","commitCallbacks","fakeInternalInstance","emptyRefsObject","refs","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","warnOnUndefinedDerivedState","warnOnInvalidCallback","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutContextTypeAndContextTypes","didWarnAboutInvalidateContextType","didWarnOnInvalidCallback","callerName","defineProperty","enumerable","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","state","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","adoptClassInstance","updater","setInstance","_reactInternalInstance","constructClassInstance","isLegacyContextConsumer","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","fiberFlags","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","warnForMissingKey","returnFiber","_store","validated","coerceRef","mixedRef","ref","_self","resolvedInst","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","toString","warnOnFunctionType","resolveLazy","lazyType","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","deletions","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","existing","updateElement","updateFragment","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","warnOnInvalidKey","knownKeys","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","reconcileChildrenIterator","newChildrenIterable","iteratorFn","entries","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","c","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","currentTreeHiddenStackCursor","prevRenderLanesStackCursor","pushHiddenContext","prevRenderLanes","getRenderLanes","setRenderLanes","baseLanes","reuseHiddenContextOnStack","popHiddenContext","isCurrentTreeHidden","suspenseHandlerStackCursor","pushPrimaryTreeSuspenseHandler","handler","pushFallbackTreeSuspenseHandler","reuseSuspenseHandlerOnStack","pushOffscreenSuspenseHandler","getSuspenseHandler","popSuspenseHandler","DefaultSuspenseContext","SubtreeSuspenseContextMask","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseListContext","flag","setDefaultShallowSuspenseListContext","setShallowSuspenseListContext","shallowContext","pushSuspenseListContext","newContext","popSuspenseListContext","findFirstSuspended","row","dehydrated","revealOrder","didSuspend","HasEffect","Insertion","Layout","workInProgressSources","resetWorkInProgressVersions","mutableSource","_workInProgressVersionSecondary","AbortControllerLocal","enableCache","AbortController","AbortControllerShim","listeners","signal","aborted","addEventListener","listener","abort","CacheContext","Consumer","Provider","_currentValue","_threadCount","_defaultValue","_globalName","_currentRenderer","createCache","cache","controller","data","refCount","retainCache","releaseCache","pushCacheProvider","popCacheProvider","didWarnAboutMismatchedHooksForComponent","didWarnUncachedGetSnapshot","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","globalClientIdCounter","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","numberOfReRenders","localIdCounter","HooksDispatcherOnRerenderInDEV","ContextOnlyDispatcher","didRenderTooFewHooks","StaticMaskEffect","bailoutHooks","PassiveEffect","UpdateEffect","resetHooksAfterThrow","isUpdatingOpaqueValueInRenderPhase","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","hasEagerState","eagerState","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountMutableSource","getSnapshot","subscribe","updateMutableSource","mountSyncExternalStore","getServerSnapshot","nextSnapshot","cachedSnapshot","getWorkInProgressRoot","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","HookHasEffect","HookPassive","updateStoreInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","latestGetSnapshot","prevValue","mountState","dispatchSetState","updateState","rerenderState","create","destroy","effect","firstEffect","mountRef","initialValue","updateRef","mountEffectImpl","hookFlags","updateEffectImpl","prevEffect","PassiveStaticEffect","mountInsertionEffect","HookInsertion","updateInsertionEffect","mountLayoutEffect","LayoutStaticEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","updateDeferredValue","resolvedCurrentHook","updateDeferredValueImpl","rerenderDeferredValue","shouldDeferValue","deferredLane","startTransition","setPending","options","previousPriority","prevTransition","currentTransition","_updatedFibers","updatedFibersCount","clear","mountTransition","isPending","start","updateTransition","rerenderTransition","getIsUpdatingOpaqueValueInRenderPhaseInDEV","mountId","identifierPrefix","id","globalClientId","updateId","mountRefresh","refresh","refreshCache","updateRefresh","seedKey","seedValue","refreshUpdate","createLegacyQueueUpdate","enqueueLegacyQueueUpdate","entangleLegacyQueueTransitions","seededCache","arguments","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","entangleTransitionUpdate","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","getCacheSignal","getCacheForType","resourceType","cacheForType","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","useCacheRefresh","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","markNestedUpdateScheduled","resetNestedUpdateFlag","syncNestedUpdateFlag","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","parentFiber","effectDuration","parentStateNode","recordPassiveEffectDuration","passiveEffectDuration","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","createCapturedValueAtFiber","digest","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","markFailedErrorBoundaryForHotReloading","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","pingCache","threadIDs","ping","pingSuspendedRoot","then","resetSuspendedComponent","rootRenderLanes","currentSource","markSuspenseBoundaryShouldCapture","suspenseBoundary","currentSourceFiber","throwException","wakeables","offscreenQueue","newOffscreenQueue","transitions","markerInstances","renderDidSuspendDelayIfPossible","uncaughtSuspenseError","renderDidError","isAlreadyFailedLegacyErrorBoundary","resumedCache","peekCacheFromPool","cacheResumedFromPreviousRender","cacheFromRootCachePool","pooledCache","requestCacheFromPool","cacheFromPool","freshCache","pooledCacheLanes","pushTransition","offscreenWorkInProgress","prevCachePool","newTransitions","pool","popTransition","getSuspendedCache","getOffscreenDeferredCache","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","didWarnAboutDefaultPropsOnFunctionComponent","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","innerPropTypes","hasId","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","prevProps","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","nextBaseLanes","currentChildLanes","lanesWeJustAttempted","remainingChildLanes","deferHiddenOffscreenComponent","cachePool","updateCacheComponent","parentCache","derivedState","nextCache","updateMode","updateProfiler","markRef","updateClassComponent","shouldError","tempInstance","hasContext","isLegacyContextProvider","pushLegacyContextProvider","resetSuspendedCurrentOnMountInLegacyMode","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","pushRootTransition","updateHostComponent","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","mountIncompleteClassComponent","mountIndeterminateComponent","warningKey","debugSource","SUSPENDED_MARKER","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseState","suspenseContext","getRemainingWorkInPrimaryTree","updateSuspenseComponent","shouldSuspend","showFallback","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","mountSuspensePrimaryChildren","updateDehydratedSuspenseComponent","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","treeBaseDuration","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","subtreeFlags","retrySuspenseComponentWithoutHydrating","recoverableError","mountSuspenseFallbackAfterRetryWithoutHydrating","fiberMode","capturedValue","attemptHydrationAtLane","retry","retryDehydratedSuspenseBoundary","scheduleSuspenseWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","toLowerCase","validateTailOptions","tailMode","validateSuspenseListNestedChild","childSlot","isAnArray","isIterable","validateSuspenseListChildren","childrenIterator","initSuspenseListRenderState","isBackwards","tail","renderState","renderingStartTime","last","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","providerType","newValue","providerPropTypes","oldValue","hasLegacyContextChanged","hasWarnedAboutUsingContextAsConsumer","updateContextConsumer","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","hasChildWork","primaryChildLanes","beginWork","_debugNeedsRemount","unresolvedProps","markUpdate","appendAllChildren","updateHostContainer","needsVisibilityToggle","currentHostContext","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","bubbleProperties","completedWork","didBailout","newChildLanes","completeDehydratedSuspenseBoundary","wasHydrated","isTimedOutSuspense","completeWork","popLegacyContext","fiberRoot","previousCache","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","fallthroughToNormalSuspensePath","nextDidTimeout","prevDidTimeout","offscreenFiber","isBadFallback","renderDidSuspend","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","previousSibling","nextIsHidden","prevIsHidden","unwindWork","unwindInterruptedWork","interruptedWork","invokeGuardedCallbackProd","func","d","f","funcArgs","onError","invokeGuardedCallbackImpl","window","dispatchEvent","document","createEvent","fakeNode","createElement","invokeGuardedCallbackDev","evt","didCall","windowEvent","event","windowEventDescriptor","getOwnPropertyDescriptor","restoreAfterDispatch","removeEventListener","evtType","didSetError","isCrossOriginError","handleWindowError","colno","lineno","defaultPrevented","inner","initEvent","hasError","caughtError","reporter","invokeGuardedCallback","clearCaughtError","didWarnAboutUndefinedSnapshotBeforeUpdate","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","PossiblyWeakSet","WeakSet","nextEffect","reportUncaughtErrorInDEV","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","nearestMountedAncestor","captureCommitPhaseError","safelyAttachRef","commitAttachRef","safelyDetachRef","retVal","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","commitBeforeMutationEffects_complete","commitBeforeMutationEffectsOnFiber","finishedWork","snapshot","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","NoHookEffect","setIsRunningInsertionEffect","commitHookEffectListMount","commitPassiveEffectDurations","finishedRoot","onPostCommit","phase","outer","commitHookLayoutEffects","commitClassLayoutLifecycles","commitClassCallbacks","commitHostComponentMount","commitProfilerUpdate","onCommit","onRender","enqueuePendingPassiveProfilerEffect","commitLayoutEffectOnFiber","committedLanes","recursivelyTraverseLayoutEffects","isModernRoot","newOffscreenSubtreeIsHidden","wasHidden","newOffscreenSubtreeWasHidden","prevOffscreenSubtreeIsHidden","prevOffscreenSubtreeWasHidden","includeWorkInProgressEffects","recursivelyTraverseReappearLayoutEffects","hideOrUnhideAllChildren","hostSubtreeRoot","instanceToUse","detachFiberMutation","detachFiberAfterEffects","hostInstance","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","before","insertOrAppendPlacementNode","insertOrAppendPlacementNodeIntoContainer","isHost","hostParent","hostParentIsContainer","commitDeletionEffects","deletedFiber","findParent","commitDeletionEffectsOnFiber","recursivelyTraverseDeletionEffects","prevHostParent","prevHostParentIsContainer","commitSuspenseCallback","getRetryCache","retryCache","attachSuspenseRetryListeners","resolveRetryWakeable","commitMutationEffects","inProgressLanes","commitMutationEffectsOnFiber","recursivelyTraverseMutationEffects","prevDebugFiber","getCurrentDebugFiberInDEV","commitReconciliationEffects","markCommitTimeOfFallback","offscreenBoundary","recursivelyTraverseDisappearLayoutEffects","commitLayoutEffects","disappearLayoutEffects","reappearLayoutEffects","offscreenState","childShouldIncludeWorkInProgressEffects","commitHookPassiveMountEffects","commitOffscreenPassiveMountEffects","commitCachePassiveMountEffect","commitPassiveMountEffects","committedTransitions","commitPassiveMountOnFiber","recursivelyTraversePassiveMountEffects","recursivelyTraverseAtomicPassiveEffects","recursivelyTraverseReconnectPassiveEffects","reconnectPassiveEffects","commitAtomicPassiveEffects","commitPassiveUnmountEffects","commitPassiveUnmountOnFiber","detachAlternateSiblings","previousFiber","detachedChild","detachedSibling","commitHookPassiveUnmountEffects","recursivelyTraversePassiveUnmountEffects","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","recursivelyTraverseDisconnectPassiveEffects","disconnectPassiveEffect","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","symbolFor","ReactCurrentActQueue","isLegacyActEnvironment","isReactActEnvironmentGlobal","IS_REACT_ACT_ENVIRONMENT","jestIsDefined","jest","warnsIfNotActing","isConcurrentActEnvironment","ceil","NoContext","BatchedContext","RenderContext","CommitContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","executionContext","workInProgressRoot","workInProgressRootRenderLanes","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","workInProgressTransitions","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveProfilerEffects","pendingPassiveEffectsRemainingLanes","pendingPassiveTransitions","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","isFlushingPassiveEffects","didScheduleUpdateDuringPassiveEffects","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","rootWithPassiveNestedUpdates","currentEventTime","currentEventTransitionLane","isRunningInsertionEffect","isTransition","eventLane","requestRetryLane","warnAboutRenderPhaseUpdatesInDEV","warnIfUpdatesNotWrappedWithActDEV","deferRenderPhaseUpdateToNextBatch","ensureRootIsScheduled","isBatchingLegacy","existingCallbackNode","callbackNode","callbackPriority","newCallbackPriority","existingCallbackPriority","fakeActCallbackNode","newCallbackNode","didScheduleLegacyUpdate","performSyncWorkOnRoot","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","disableSchedulerTimeoutInWorkLoop","exitStatus","renderRootConcurrent","renderRootSync","errorRetryLanes","recoverFromConcurrentError","fatalError","prepareFreshStack","renderWasConcurrent","isRenderConsistentWithExternalStores","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","rootWorkInProgress","errorsFromSecondAttempt","errors","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","checks","renderedValue","markRootSuspended_dontCallThisOneDirectly","batchedUpdates","prevExecutionContext","flushSync","subtreeRenderLanes","workInProgressRootRenderPhaseUpdatedLanes","handleError","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","siblingFiber","recoverableErrors","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","flushRenderPhaseStrictModeWarningsInDEV","subtreeHasEffects","rootHasEffect","releaseRootPooledCache","onCommitRootDevTools","onRecoverableError","renderPriority","priority","flushPassiveEffectsImpl","profilerEffects","onPostCommitRootDevTools","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","timeElapsed","didWarnStateUpdateForNotYetMountedComponent","ReactCurrentFiberCurrent","originalBeginWork","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","ReactCurrentDebugFiberIsRenderingInDEV","renderingComponentName","dedupeKey","setStateComponentName","priorityLevel","actQueue","Scheduler_scheduleCallback","Scheduler_cancelCallback","isRunning","resolveFamily","failedBoundaries","setRefreshHandler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","findHostInstancesForRefresh","families","hostInstances","types","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","FiberNode","Number","NaN","createFiber","shouldConstruct","isReactComponent","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromCache","elements","primaryChildInstance","pendingMarkers","content","pendingChildren","FiberRootNode","hydrate","incompleteTransitions","_debugRootType","createFiberRoot","initialChildren","hydrationCallbacks","transitionCallbacks","uninitializedFiber","initialCache","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","createContainer","ReactCurrentFiberIsRendering","getPublicRootInstance","containerFiber","shouldErrorImpl","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","copyWithDeleteImpl","obj","updated","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldErrorImpl","newShouldSuspendImpl","findHostInstanceByFiber","hostFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","version","rendererPackageName","rendererConfig","currentDispatcherRef","reconcilerVersion","ReactVersion","act","defaultTestOptions","toJSON","renderedChildren","renderedChild","json","childrenToTree","nodeAndSiblingsArray","toTree","flatten","nodeWithSibling","arr","result","n","el","nodeType","rendered","validWrapperTypes","getChildren","startingNode","descend","wrapFiber","ReactTestInstance","_currentFiber","_fiber","find","predicate","expectOne","findAll","deep","findByType","findAllByType","findByProps","findAllByProps","JSON","stringify","propsMatch","results","all","prefix","filter","isConcurrent","concurrentUpdatesByDefault","unstable_isConcurrent","unstable_strictMode","unstable_concurrentUpdatesByDefault","entry","_Scheduler","newElement","unmount","unstable_flushSync","configurable","fiberToWrapper","wrapper"],"mappings":"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"}